
# DO NOT EDIT THIS FILE! This file was automatically generated from atom
# definitions in types.script by the macro OPENCOG_ADD_ATOM_TYPES
#
# This file contains basic python wrappers for atom creation.
#
from opencog.atomspace import TruthValue

def Notype(*args):
    return atomspace.add_link(types.Notype, args)
def Valuation(*args):
    return atomspace.add_link(types.Valuation, args)
def Node(node_name, tv=None):
    return atomspace.add_node(types.Node, node_name, tv)
def Link(*args):
    return atomspace.add_link(types.Link, args)
def ConceptNode(node_name, tv=None):
    return atomspace.add_node(types.ConceptNode, node_name, tv)
def NumberNode(node_name, tv=None):
    return atomspace.add_node(types.NumberNode, node_name, tv)
def OrderedLink(*args):
    return atomspace.add_link(types.OrderedLink, args)
def UnorderedLink(*args):
    return atomspace.add_link(types.UnorderedLink, args)
def EvaluatableLink(*args):
    return atomspace.add_link(types.EvaluatableLink, args)
def BooleanLink(*args):
    return atomspace.add_link(types.BooleanLink, args)
def NumericLink(*args):
    return atomspace.add_link(types.NumericLink, args)
def NumericOutputLink(*args):
    return atomspace.add_link(types.NumericOutputLink, args)
def TypeLink(*args):
    return atomspace.add_link(types.TypeLink, args)
def TypeOutputLink(*args):
    return atomspace.add_link(types.TypeOutputLink, args)
def SetLink(*args):
    return atomspace.add_link(types.SetLink, args)
def ListLink(*args):
    return atomspace.add_link(types.ListLink, args)
def MemberLink(*args):
    return atomspace.add_link(types.MemberLink, args)
def ContextLink(*args):
    return atomspace.add_link(types.ContextLink, args)
def InheritanceLink(*args):
    return atomspace.add_link(types.InheritanceLink, args)
def SubsetLink(*args):
    return atomspace.add_link(types.SubsetLink, args)
def IntensionalInheritanceLink(*args):
    return atomspace.add_link(types.IntensionalInheritanceLink, args)
def SimilarityLink(*args):
    return atomspace.add_link(types.SimilarityLink, args)
def ExtensionalSimilarityLink(*args):
    return atomspace.add_link(types.ExtensionalSimilarityLink, args)
def IntensionalSimilarityLink(*args):
    return atomspace.add_link(types.IntensionalSimilarityLink, args)
def TrueLink(*args):
    return atomspace.add_link(types.TrueLink, args)
def FalseLink(*args):
    return atomspace.add_link(types.FalseLink, args)
def AndLink(*args):
    return atomspace.add_link(types.AndLink, args)
def OrLink(*args):
    return atomspace.add_link(types.OrLink, args)
def NotLink(*args):
    return atomspace.add_link(types.NotLink, args)
def SequentialAndLink(*args):
    return atomspace.add_link(types.SequentialAndLink, args)
def SequentialOrLink(*args):
    return atomspace.add_link(types.SequentialOrLink, args)
def ChoiceLink(*args):
    return atomspace.add_link(types.ChoiceLink, args)
def PresentLink(*args):
    return atomspace.add_link(types.PresentLink, args)
def AbsentLink(*args):
    return atomspace.add_link(types.AbsentLink, args)
def ParallelLink(*args):
    return atomspace.add_link(types.ParallelLink, args)
def JoinLink(*args):
    return atomspace.add_link(types.JoinLink, args)
def VariableNode(node_name, tv=None):
    return atomspace.add_node(types.VariableNode, node_name, tv)
def VariableList(*args):
    return atomspace.add_link(types.VariableList, args)
def GlobNode(node_name, tv=None):
    return atomspace.add_node(types.GlobNode, node_name, tv)
def QuoteLink(*args):
    return atomspace.add_link(types.QuoteLink, args)
def UnquoteLink(*args):
    return atomspace.add_link(types.UnquoteLink, args)
def LocalQuoteLink(*args):
    return atomspace.add_link(types.LocalQuoteLink, args)
def DontExecLink(*args):
    return atomspace.add_link(types.DontExecLink, args)
def FreeLink(*args):
    return atomspace.add_link(types.FreeLink, args)
def DeleteLink(*args):
    return atomspace.add_link(types.DeleteLink, args)
def UniqueLink(*args):
    return atomspace.add_link(types.UniqueLink, args)
def StateLink(*args):
    return atomspace.add_link(types.StateLink, args)
def DefineLink(*args):
    return atomspace.add_link(types.DefineLink, args)
def ScopeLink(*args):
    return atomspace.add_link(types.ScopeLink, args)
def RewriteLink(*args):
    return atomspace.add_link(types.RewriteLink, args)
def PrenexLink(*args):
    return atomspace.add_link(types.PrenexLink, args)
def LambdaLink(*args):
    return atomspace.add_link(types.LambdaLink, args)
def PutLink(*args):
    return atomspace.add_link(types.PutLink, args)
def PatternLink(*args):
    return atomspace.add_link(types.PatternLink, args)
def SatisfactionLink(*args):
    return atomspace.add_link(types.SatisfactionLink, args)
def SatisfyingLink(*args):
    return atomspace.add_link(types.SatisfyingLink, args)
def GetLink(*args):
    return atomspace.add_link(types.GetLink, args)
def BindLink(*args):
    return atomspace.add_link(types.BindLink, args)
def DualLink(*args):
    return atomspace.add_link(types.DualLink, args)
def ForAllLink(*args):
    return atomspace.add_link(types.ForAllLink, args)
def ExistsLink(*args):
    return atomspace.add_link(types.ExistsLink, args)
def SatisfyingSetScopeLink(*args):
    return atomspace.add_link(types.SatisfyingSetScopeLink, args)
def SatisfyingSetLink(*args):
    return atomspace.add_link(types.SatisfyingSetLink, args)
def ImplicationScopeLink(*args):
    return atomspace.add_link(types.ImplicationScopeLink, args)
def IntensionalImplicationScopeLink(*args):
    return atomspace.add_link(types.IntensionalImplicationScopeLink, args)
def ExtensionalImplicationScopeLink(*args):
    return atomspace.add_link(types.ExtensionalImplicationScopeLink, args)
def EquivalenceScopeLink(*args):
    return atomspace.add_link(types.EquivalenceScopeLink, args)
def IntensionalEquivalenceScopeLink(*args):
    return atomspace.add_link(types.IntensionalEquivalenceScopeLink, args)
def ExtensionalEquivalenceScopeLink(*args):
    return atomspace.add_link(types.ExtensionalEquivalenceScopeLink, args)
def ImplicationLink(*args):
    return atomspace.add_link(types.ImplicationLink, args)
def IntensionalImplicationLink(*args):
    return atomspace.add_link(types.IntensionalImplicationLink, args)
def ExtensionalImplicationLink(*args):
    return atomspace.add_link(types.ExtensionalImplicationLink, args)
def EquivalenceLink(*args):
    return atomspace.add_link(types.EquivalenceLink, args)
def IntensionalEquivalenceLink(*args):
    return atomspace.add_link(types.IntensionalEquivalenceLink, args)
def ExtensionalEquivalenceLink(*args):
    return atomspace.add_link(types.ExtensionalEquivalenceLink, args)
def AssociativeLink(*args):
    return atomspace.add_link(types.AssociativeLink, args)
def AttractionLink(*args):
    return atomspace.add_link(types.AttractionLink, args)
def EvaluationLink(*args):
    return atomspace.add_link(types.EvaluationLink, args)
def ExecutionLink(*args):
    return atomspace.add_link(types.ExecutionLink, args)
def ProcedureNode(node_name, tv=None):
    return atomspace.add_node(types.ProcedureNode, node_name, tv)
def GroundedProcedureNode(node_name, tv=None):
    return atomspace.add_node(types.GroundedProcedureNode, node_name, tv)
def SchemaNode(node_name, tv=None):
    return atomspace.add_node(types.SchemaNode, node_name, tv)
def DefinedSchemaNode(node_name, tv=None):
    return atomspace.add_node(types.DefinedSchemaNode, node_name, tv)
def GroundedSchemaNode(node_name, tv=None):
    return atomspace.add_node(types.GroundedSchemaNode, node_name, tv)
def PredicateNode(node_name, tv=None):
    return atomspace.add_node(types.PredicateNode, node_name, tv)
def DefinedPredicateNode(node_name, tv=None):
    return atomspace.add_node(types.DefinedPredicateNode, node_name, tv)
def GroundedPredicateNode(node_name, tv=None):
    return atomspace.add_node(types.GroundedPredicateNode, node_name, tv)
def TypeNode(node_name, tv=None):
    return atomspace.add_node(types.TypeNode, node_name, tv)
def TypeInhNode(node_name, tv=None):
    return atomspace.add_node(types.TypeInhNode, node_name, tv)
def TypeCoInhNode(node_name, tv=None):
    return atomspace.add_node(types.TypeCoInhNode, node_name, tv)
def DefinedTypeNode(node_name, tv=None):
    return atomspace.add_node(types.DefinedTypeNode, node_name, tv)
def TypeChoice(*args):
    return atomspace.add_link(types.TypeChoice, args)
def TypeSetLink(*args):
    return atomspace.add_link(types.TypeSetLink, args)
def ArrowLink(*args):
    return atomspace.add_link(types.ArrowLink, args)
def SignatureLink(*args):
    return atomspace.add_link(types.SignatureLink, args)
def FuzzyLink(*args):
    return atomspace.add_link(types.FuzzyLink, args)
def TypedVariableLink(*args):
    return atomspace.add_link(types.TypedVariableLink, args)
def TypedAtomLink(*args):
    return atomspace.add_link(types.TypedAtomLink, args)
def AnchorNode(node_name, tv=None):
    return atomspace.add_node(types.AnchorNode, node_name, tv)
def IntervalLink(*args):
    return atomspace.add_link(types.IntervalLink, args)
def QuantityLink(*args):
    return atomspace.add_link(types.QuantityLink, args)
def VirtualLink(*args):
    return atomspace.add_link(types.VirtualLink, args)
def GreaterThanLink(*args):
    return atomspace.add_link(types.GreaterThanLink, args)
def IdenticalLink(*args):
    return atomspace.add_link(types.IdenticalLink, args)
def EqualLink(*args):
    return atomspace.add_link(types.EqualLink, args)
def FunctionLink(*args):
    return atomspace.add_link(types.FunctionLink, args)
def ExecutionOutputLink(*args):
    return atomspace.add_link(types.ExecutionOutputLink, args)
def ValueOfLink(*args):
    return atomspace.add_link(types.ValueOfLink, args)
def TruthValueOfLink(*args):
    return atomspace.add_link(types.TruthValueOfLink, args)
def FoldLink(*args):
    return atomspace.add_link(types.FoldLink, args)
def ArithmeticLink(*args):
    return atomspace.add_link(types.ArithmeticLink, args)
def PlusLink(*args):
    return atomspace.add_link(types.PlusLink, args)
def MinusLink(*args):
    return atomspace.add_link(types.MinusLink, args)
def TimesLink(*args):
    return atomspace.add_link(types.TimesLink, args)
def DivideLink(*args):
    return atomspace.add_link(types.DivideLink, args)
def RandomNumberLink(*args):
    return atomspace.add_link(types.RandomNumberLink, args)
def ArityLink(*args):
    return atomspace.add_link(types.ArityLink, args)
def RandomChoiceLink(*args):
    return atomspace.add_link(types.RandomChoiceLink, args)
def TimeLink(*args):
    return atomspace.add_link(types.TimeLink, args)
def SleepLink(*args):
    return atomspace.add_link(types.SleepLink, args)
def MapLink(*args):
    return atomspace.add_link(types.MapLink, args)
def Connector(*args):
    return atomspace.add_link(types.Connector, args)
def ConnectorDir(node_name, tv=None):
    return atomspace.add_node(types.ConnectorDir, node_name, tv)
def ConnectorSeq(*args):
    return atomspace.add_link(types.ConnectorSeq, args)
def Section(*args):
    return atomspace.add_link(types.Section, args)
