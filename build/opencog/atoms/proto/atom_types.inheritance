/* File automatically generated by the macro OPENCOG_ADD_ATOM_TYPES. Do not edit */

/* Touch the server before adding types. */
opencog::nameserver();
opencog::VALUE = opencog::nameserver().declType(opencog::VALUE, "Value");
opencog::FLOAT_VALUE = opencog::nameserver().declType(opencog::VALUE    , "FloatValue");
opencog::STRING_VALUE = opencog::nameserver().declType(opencog::VALUE, "StringValue");
opencog::LINK_VALUE = opencog::nameserver().declType(opencog::VALUE     , "LinkValue");
opencog::VALUATION = opencog::nameserver().declType(opencog::VALUE, "Valuation");
opencog::TRUTH_VALUE = opencog::nameserver().declType(opencog::FLOAT_VALUE, "TruthValue");
opencog::SIMPLE_TRUTH_VALUE = opencog::nameserver().declType(opencog::TRUTH_VALUE, "SimpleTruthValue");
opencog::COUNT_TRUTH_VALUE = opencog::nameserver().declType(opencog::TRUTH_VALUE, "CountTruthValue");
opencog::INDEFINITE_TRUTH_VALUE = opencog::nameserver().declType(opencog::TRUTH_VALUE, "IndefiniteTruthValue");
opencog::FUZZY_TRUTH_VALUE = opencog::nameserver().declType(opencog::TRUTH_VALUE, "FuzzyTruthValue");
opencog::PROBABILISTIC_TRUTH_VALUE = opencog::nameserver().declType(opencog::TRUTH_VALUE, "ProbabilisticTruthValue");
opencog::EVIDENCE_COUNT_TRUTH_VALUE = opencog::nameserver().declType(opencog::TRUTH_VALUE, "EvidenceCountTruthValue");
opencog::ATTENTION_VALUE = opencog::nameserver().declType(opencog::FLOAT_VALUE, "AttentionValue");
opencog::STREAM_VALUE = opencog::nameserver().declType(opencog::FLOAT_VALUE, "StreamValue");
opencog::RANDOM_STREAM = opencog::nameserver().declType(opencog::STREAM_VALUE, "RandomStream");
opencog::ATOM = opencog::nameserver().declType(opencog::VALUE, "Atom");
opencog::NODE = opencog::nameserver().declType(opencog::ATOM, "Node");
opencog::LINK = opencog::nameserver().declType(opencog::ATOM, "Link");
opencog::CONCEPT_NODE = opencog::nameserver().declType(opencog::NODE, "ConceptNode");
opencog::NUMBER_NODE = opencog::nameserver().declType(opencog::NODE, "NumberNode");
opencog::ORDERED_LINK = opencog::nameserver().declType(opencog::LINK, "OrderedLink");
opencog::UNORDERED_LINK = opencog::nameserver().declType(opencog::LINK, "UnorderedLink");
opencog::EVALUATABLE_LINK = opencog::nameserver().declType(opencog::LINK, "EvaluatableLink");
opencog::BOOLEAN_LINK = opencog::nameserver().declType(opencog::LINK, "BooleanLink");
opencog::NUMERIC_LINK = opencog::nameserver().declType(opencog::LINK, "NumericLink");
opencog::NUMERIC_OUTPUT_LINK = opencog::nameserver().declType(opencog::LINK, "NumericOutputLink");
opencog::TYPE_LINK = opencog::nameserver().declType(opencog::LINK, "TypeLink");
opencog::TYPE_OUTPUT_LINK = opencog::nameserver().declType(opencog::LINK, "TypeOutputLink");
opencog::SET_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "SetLink");
opencog::LIST_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ListLink");
opencog::MEMBER_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "MemberLink");
opencog::MEMBER_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "MemberLink");
opencog::CONTEXT_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ContextLink");
opencog::INHERITANCE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "InheritanceLink");
opencog::INHERITANCE_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "InheritanceLink");
opencog::SUBSET_LINK = opencog::nameserver().declType(opencog::INHERITANCE_LINK, "SubsetLink");
opencog::INTENSIONAL_INHERITANCE_LINK = opencog::nameserver().declType(opencog::INHERITANCE_LINK, "IntensionalInheritanceLink");
opencog::SIMILARITY_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "SimilarityLink");
opencog::SIMILARITY_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "SimilarityLink");
opencog::EXTENSIONAL_SIMILARITY_LINK = opencog::nameserver().declType(opencog::SIMILARITY_LINK, "ExtensionalSimilarityLink");
opencog::INTENSIONAL_SIMILARITY_LINK = opencog::nameserver().declType(opencog::SIMILARITY_LINK, "IntensionalSimilarityLink");
opencog::TRUE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "TrueLink");
opencog::TRUE_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "TrueLink");
opencog::FALSE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "FalseLink");
opencog::FALSE_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "FalseLink");
opencog::AND_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "AndLink");
opencog::AND_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "AndLink");
opencog::AND_LINK = opencog::nameserver().declType(opencog::BOOLEAN_LINK, "AndLink");
opencog::OR_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "OrLink");
opencog::OR_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "OrLink");
opencog::OR_LINK = opencog::nameserver().declType(opencog::BOOLEAN_LINK, "OrLink");
opencog::NOT_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "NotLink");
opencog::NOT_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "NotLink");
opencog::NOT_LINK = opencog::nameserver().declType(opencog::BOOLEAN_LINK, "NotLink");
opencog::SEQUENTIAL_AND_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "SequentialAndLink");
opencog::SEQUENTIAL_AND_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "SequentialAndLink");
opencog::SEQUENTIAL_AND_LINK = opencog::nameserver().declType(opencog::BOOLEAN_LINK, "SequentialAndLink");
opencog::SEQUENTIAL_OR_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "SequentialOrLink");
opencog::SEQUENTIAL_OR_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "SequentialOrLink");
opencog::SEQUENTIAL_OR_LINK = opencog::nameserver().declType(opencog::BOOLEAN_LINK, "SequentialOrLink");
opencog::CHOICE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ChoiceLink");
opencog::PRESENT_LINK = opencog::nameserver().declType(opencog::SET_LINK, "PresentLink");
opencog::PRESENT_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "PresentLink");
opencog::ABSENT_LINK = opencog::nameserver().declType(opencog::PRESENT_LINK, "AbsentLink");
opencog::PARALLEL_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "ParallelLink");
opencog::PARALLEL_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "ParallelLink");
opencog::JOIN_LINK = opencog::nameserver().declType(opencog::PARALLEL_LINK, "JoinLink");
opencog::VARIABLE_NODE = opencog::nameserver().declType(opencog::NODE, "VariableNode");
opencog::VARIABLE_LIST = opencog::nameserver().declType(opencog::LIST_LINK, "VariableList");
opencog::GLOB_NODE = opencog::nameserver().declType(opencog::VARIABLE_NODE, "GlobNode");
opencog::QUOTE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "QuoteLink");
opencog::UNQUOTE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "UnquoteLink");
opencog::LOCAL_QUOTE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "LocalQuoteLink");
opencog::DONT_EXEC_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "DontExecLink");
opencog::FREE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "FreeLink");
opencog::DELETE_LINK = opencog::nameserver().declType(opencog::FREE_LINK, "DeleteLink");
opencog::UNIQUE_LINK = opencog::nameserver().declType(opencog::FREE_LINK, "UniqueLink");
opencog::STATE_LINK = opencog::nameserver().declType(opencog::UNIQUE_LINK, "StateLink");
opencog::DEFINE_LINK = opencog::nameserver().declType(opencog::UNIQUE_LINK, "DefineLink");
opencog::SCOPE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ScopeLink");
opencog::REWRITE_LINK = opencog::nameserver().declType(opencog::SCOPE_LINK, "RewriteLink");
opencog::PRENEX_LINK = opencog::nameserver().declType(opencog::REWRITE_LINK, "PrenexLink");
opencog::LAMBDA_LINK = opencog::nameserver().declType(opencog::PRENEX_LINK, "LambdaLink");
opencog::PUT_LINK = opencog::nameserver().declType(opencog::PRENEX_LINK, "PutLink");
opencog::PATTERN_LINK = opencog::nameserver().declType(opencog::PRENEX_LINK         , "PatternLink");
opencog::SATISFACTION_LINK = opencog::nameserver().declType(opencog::PATTERN_LINK, "SatisfactionLink");
opencog::SATISFACTION_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK  , "SatisfactionLink");
opencog::SATISFYING_LINK = opencog::nameserver().declType(opencog::PATTERN_LINK    , "SatisfyingLink");
opencog::GET_LINK = opencog::nameserver().declType(opencog::SATISFYING_LINK        , "GetLink");
opencog::BIND_LINK = opencog::nameserver().declType(opencog::SATISFYING_LINK       , "BindLink");
opencog::DUAL_LINK = opencog::nameserver().declType(opencog::SATISFYING_LINK, "DualLink");
opencog::FORALL_LINK = opencog::nameserver().declType(opencog::SCOPE_LINK, "ForAllLink");
opencog::FORALL_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK , "ForAllLink");
opencog::EXISTS_LINK = opencog::nameserver().declType(opencog::SCOPE_LINK, "ExistsLink");
opencog::EXISTS_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "ExistsLink");
opencog::SATISFYING_SET_SCOPE_LINK = opencog::nameserver().declType(opencog::SCOPE_LINK, "SatisfyingSetScopeLink");
opencog::SATISFYING_SET_LINK = opencog::nameserver().declType(opencog::LINK, "SatisfyingSetLink");
opencog::IMPLICATION_SCOPE_LINK = opencog::nameserver().declType(opencog::SCOPE_LINK, "ImplicationScopeLink");
opencog::INTENSIONAL_IMPLICATION_SCOPE_LINK = opencog::nameserver().declType(opencog::IMPLICATION_SCOPE_LINK, "IntensionalImplicationScopeLink");
opencog::EXTENSIONAL_IMPLICATION_SCOPE_LINK = opencog::nameserver().declType(opencog::IMPLICATION_SCOPE_LINK, "ExtensionalImplicationScopeLink");
opencog::EQUIVALENCE_SCOPE_LINK = opencog::nameserver().declType(opencog::SCOPE_LINK, "EquivalenceScopeLink");
opencog::INTENSIONAL_EQUIVALENCE_SCOPE_LINK = opencog::nameserver().declType(opencog::EQUIVALENCE_SCOPE_LINK, "IntensionalEquivalenceScopeLink");
opencog::EXTENSIONAL_EQUIVALENCE_SCOPE_LINK = opencog::nameserver().declType(opencog::EQUIVALENCE_SCOPE_LINK, "ExtensionalEquivalenceScopeLink");
opencog::IMPLICATION_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ImplicationLink");
opencog::IMPLICATION_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "ImplicationLink");
opencog::INTENSIONAL_IMPLICATION_LINK = opencog::nameserver().declType(opencog::IMPLICATION_LINK, "IntensionalImplicationLink");
opencog::EXTENSIONAL_IMPLICATION_LINK = opencog::nameserver().declType(opencog::IMPLICATION_LINK, "ExtensionalImplicationLink");
opencog::EQUIVALENCE_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "EquivalenceLink");
opencog::INTENSIONAL_EQUIVALENCE_LINK = opencog::nameserver().declType(opencog::EQUIVALENCE_LINK, "IntensionalEquivalenceLink");
opencog::EXTENSIONAL_EQUIVALENCE_LINK = opencog::nameserver().declType(opencog::EQUIVALENCE_LINK, "ExtensionalEquivalenceLink");
opencog::ASSOCIATIVE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "AssociativeLink");
opencog::ATTRACTION_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "AttractionLink");
opencog::EVALUATION_LINK = opencog::nameserver().declType(opencog::FREE_LINK, "EvaluationLink");
opencog::EVALUATION_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "EvaluationLink");
opencog::EXECUTION_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ExecutionLink");
opencog::PROCEDURE_NODE = opencog::nameserver().declType(opencog::NODE, "ProcedureNode");
opencog::GROUNDED_PROCEDURE_NODE = opencog::nameserver().declType(opencog::PROCEDURE_NODE, "GroundedProcedureNode");
opencog::SCHEMA_NODE = opencog::nameserver().declType(opencog::PROCEDURE_NODE, "SchemaNode");
opencog::DEFINED_SCHEMA_NODE = opencog::nameserver().declType(opencog::SCHEMA_NODE, "DefinedSchemaNode");
opencog::GROUNDED_SCHEMA_NODE = opencog::nameserver().declType(opencog::SCHEMA_NODE, "GroundedSchemaNode");
opencog::GROUNDED_SCHEMA_NODE = opencog::nameserver().declType(opencog::GROUNDED_PROCEDURE_NODE, "GroundedSchemaNode");
opencog::PREDICATE_NODE = opencog::nameserver().declType(opencog::PROCEDURE_NODE, "PredicateNode");
opencog::DEFINED_PREDICATE_NODE = opencog::nameserver().declType(opencog::PREDICATE_NODE, "DefinedPredicateNode");
opencog::GROUNDED_PREDICATE_NODE = opencog::nameserver().declType(opencog::PREDICATE_NODE, "GroundedPredicateNode");
opencog::GROUNDED_PREDICATE_NODE = opencog::nameserver().declType(opencog::GROUNDED_PROCEDURE_NODE, "GroundedPredicateNode");
opencog::TYPE_NODE = opencog::nameserver().declType(opencog::PREDICATE_NODE, "TypeNode");
opencog::TYPE_INH_NODE = opencog::nameserver().declType(opencog::TYPE_NODE, "TypeInhNode");
opencog::TYPE_CO_INH_NODE = opencog::nameserver().declType(opencog::TYPE_NODE, "TypeCoInhNode");
opencog::DEFINED_TYPE_NODE = opencog::nameserver().declType(opencog::TYPE_NODE, "DefinedTypeNode");
opencog::TYPE_CHOICE = opencog::nameserver().declType(opencog::CHOICE_LINK, "TypeChoice");
opencog::TYPE_CHOICE = opencog::nameserver().declType(opencog::TYPE_OUTPUT_LINK, "TypeChoice");
opencog::TYPE_SET_LINK = opencog::nameserver().declType(opencog::SET_LINK, "TypeSetLink");
opencog::TYPE_SET_LINK = opencog::nameserver().declType(opencog::TYPE_OUTPUT_LINK, "TypeSetLink");
opencog::TYPE_SET_LINK = opencog::nameserver().declType(opencog::TYPE_LINK, "TypeSetLink");
opencog::ARROW_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ArrowLink");
opencog::ARROW_LINK = opencog::nameserver().declType(opencog::TYPE_OUTPUT_LINK, "ArrowLink");
opencog::SIGNATURE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "SignatureLink");
opencog::SIGNATURE_LINK = opencog::nameserver().declType(opencog::TYPE_OUTPUT_LINK, "SignatureLink");
opencog::FUZZY_LINK = opencog::nameserver().declType(opencog::SIGNATURE_LINK, "FuzzyLink");
opencog::TYPED_VARIABLE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "TypedVariableLink");
opencog::TYPED_ATOM_LINK = opencog::nameserver().declType(opencog::UNIQUE_LINK, "TypedAtomLink");
opencog::ANCHOR_NODE = opencog::nameserver().declType(opencog::NODE, "AnchorNode");
opencog::INTERVAL_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "IntervalLink");
opencog::QUANTITY_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "QuantityLink");
opencog::VIRTUAL_LINK = opencog::nameserver().declType(opencog::EVALUATION_LINK, "VirtualLink");
opencog::GREATER_THAN_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "GreaterThanLink");
opencog::GREATER_THAN_LINK = opencog::nameserver().declType(opencog::NUMERIC_LINK, "GreaterThanLink");
opencog::IDENTICAL_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "IdenticalLink");
opencog::IDENTICAL_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "IdenticalLink");
opencog::EQUAL_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "EqualLink");
opencog::EQUAL_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "EqualLink");
opencog::FUNCTION_LINK = opencog::nameserver().declType(opencog::FREE_LINK, "FunctionLink");
opencog::EXECUTION_OUTPUT_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "ExecutionOutputLink");
opencog::VALUE_OF_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "ValueOfLink");
opencog::VALUE_OF_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "ValueOfLink");
opencog::TRUTH_VALUE_OF_LINK = opencog::nameserver().declType(opencog::VALUE_OF_LINK, "TruthValueOfLink");
opencog::FOLD_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "FoldLink");
opencog::ARITHMETIC_LINK = opencog::nameserver().declType(opencog::FOLD_LINK, "ArithmeticLink");
opencog::ARITHMETIC_LINK = opencog::nameserver().declType(opencog::NUMERIC_LINK, "ArithmeticLink");
opencog::ARITHMETIC_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "ArithmeticLink");
opencog::PLUS_LINK = opencog::nameserver().declType(opencog::ARITHMETIC_LINK, "PlusLink");
opencog::MINUS_LINK = opencog::nameserver().declType(opencog::PLUS_LINK, "MinusLink");
opencog::TIMES_LINK = opencog::nameserver().declType(opencog::ARITHMETIC_LINK, "TimesLink");
opencog::DIVIDE_LINK = opencog::nameserver().declType(opencog::TIMES_LINK, "DivideLink");
opencog::RANDOM_NUMBER_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "RandomNumberLink");
opencog::RANDOM_NUMBER_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "RandomNumberLink");
opencog::ARITY_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "ArityLink");
opencog::ARITY_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "ArityLink");
opencog::RANDOM_CHOICE_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "RandomChoiceLink");
opencog::RANDOM_CHOICE_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "RandomChoiceLink");
opencog::TIME_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "TimeLink");
opencog::TIME_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "TimeLink");
opencog::SLEEP_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "SleepLink");
opencog::SLEEP_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "SleepLink");
opencog::MAP_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "MapLink");
opencog::CONNECTOR = opencog::nameserver().declType(opencog::LINK              , "Connector");
opencog::CONNECTOR_DIR_NODE = opencog::nameserver().declType(opencog::NODE , "ConnectorDir");
opencog::CONNECTOR_SEQ = opencog::nameserver().declType(opencog::ORDERED_LINK  , "ConnectorSeq");
opencog::SECTION = opencog::nameserver().declType(opencog::ORDERED_LINK        , "Section");
