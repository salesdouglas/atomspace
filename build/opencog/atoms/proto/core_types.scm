
; DO NOT EDIT THIS FILE! This file was automatically
; generated from atom definitions in types.script by the macro OPENCOG_ADD_ATOM_TYPES
;
; This file contains basic scheme wrappers for atom creation.
;
(define-module (opencog))
(define-public NotypeType (cog-type->int 'Notype))
(define-public (Notype . x)
	(apply cog-new-link (append (list NotypeType) x)))
(define-public (Notype . x)
	(apply cog-new-link (append (list NotypeType) x)))
(define-public ValueType (cog-type->int 'Value))
(define-public (Value . x)
	(apply cog-new-value (append (list ValueType) x)))
(define-public FloatValueType (cog-type->int 'FloatValue))
(define-public (FloatValue . x)
	(apply cog-new-value (append (list FloatValueType) x)))
(define-public StringValueType (cog-type->int 'StringValue))
(define-public (StringValue . x)
	(apply cog-new-value (append (list StringValueType) x)))
(define-public LinkValueType (cog-type->int 'LinkValue))
(define-public (LinkValue . x)
	(apply cog-new-value (append (list LinkValueType) x)))
(define-public ValuationType (cog-type->int 'Valuation))
(define-public TruthValueType (cog-type->int 'TruthValue))
(define-public (TruthValue . x)
	(apply cog-new-value (append (list TruthValueType) x)))
(define-public SimpleTruthValueType (cog-type->int 'SimpleTruthValue))
(define-public (SimpleTruthValue . x)
	(apply cog-new-value (append (list SimpleTruthValueType) x)))
(define-public CountTruthValueType (cog-type->int 'CountTruthValue))
(define-public (CountTruthValue . x)
	(apply cog-new-value (append (list CountTruthValueType) x)))
(define-public IndefiniteTruthValueType (cog-type->int 'IndefiniteTruthValue))
(define-public (IndefiniteTruthValue . x)
	(apply cog-new-value (append (list IndefiniteTruthValueType) x)))
(define-public FuzzyTruthValueType (cog-type->int 'FuzzyTruthValue))
(define-public (FuzzyTruthValue . x)
	(apply cog-new-value (append (list FuzzyTruthValueType) x)))
(define-public ProbabilisticTruthValueType (cog-type->int 'ProbabilisticTruthValue))
(define-public (ProbabilisticTruthValue . x)
	(apply cog-new-value (append (list ProbabilisticTruthValueType) x)))
(define-public EvidenceCountTruthValueType (cog-type->int 'EvidenceCountTruthValue))
(define-public (EvidenceCountTruthValue . x)
	(apply cog-new-value (append (list EvidenceCountTruthValueType) x)))
(define-public AttentionValueType (cog-type->int 'AttentionValue))
(define-public (AttentionValue . x)
	(apply cog-new-value (append (list AttentionValueType) x)))
(define-public StreamValueType (cog-type->int 'StreamValue))
(define-public (StreamValue . x)
	(apply cog-new-value (append (list StreamValueType) x)))
(define-public RandomStreamType (cog-type->int 'RandomStream))
(define-public (RandomStream . x)
	(apply cog-new-value (append (list RandomStreamType) x)))
(define-public AtomType (cog-type->int 'Atom))
(define-public (Atom . x)
	(apply cog-new-link (append (list AtomType) x)))
(define-public (Atom . x)
	(apply cog-new-link (append (list AtomType) x)))
(define-public NodeType (cog-type->int 'Node))
(define-public (Node . x)
	(apply cog-new-node (append (list NodeType) x)))
(define-public LinkType (cog-type->int 'Link))
(define-public (Link . x)
	(apply cog-new-link (append (list LinkType) x)))
(define-public ConceptNodeType (cog-type->int 'ConceptNode))
(define-public (ConceptNode . x)
	(apply cog-new-node (append (list ConceptNodeType) x)))
(define-public (Concept . x)
	(apply cog-new-node (append (list ConceptNodeType) x)))
(define-public NumberNodeType (cog-type->int 'NumberNode))
(define-public (NumberNode . x)
	(apply cog-new-node (append (list NumberNodeType) x)))
(define-public (Number . x)
	(apply cog-new-node (append (list NumberNodeType) x)))
(define-public OrderedLinkType (cog-type->int 'OrderedLink))
(define-public (OrderedLink . x)
	(apply cog-new-link (append (list OrderedLinkType) x)))
(define-public (Ordered . x)
	(apply cog-new-link (append (list OrderedLinkType) x)))
(define-public UnorderedLinkType (cog-type->int 'UnorderedLink))
(define-public (UnorderedLink . x)
	(apply cog-new-link (append (list UnorderedLinkType) x)))
(define-public (Unordered . x)
	(apply cog-new-link (append (list UnorderedLinkType) x)))
(define-public EvaluatableLinkType (cog-type->int 'EvaluatableLink))
(define-public (EvaluatableLink . x)
	(apply cog-new-link (append (list EvaluatableLinkType) x)))
(define-public (Evaluatable . x)
	(apply cog-new-link (append (list EvaluatableLinkType) x)))
(define-public BooleanLinkType (cog-type->int 'BooleanLink))
(define-public (BooleanLink . x)
	(apply cog-new-link (append (list BooleanLinkType) x)))
(define-public (Boolean . x)
	(apply cog-new-link (append (list BooleanLinkType) x)))
(define-public NumericLinkType (cog-type->int 'NumericLink))
(define-public (NumericLink . x)
	(apply cog-new-link (append (list NumericLinkType) x)))
(define-public (Numeric . x)
	(apply cog-new-link (append (list NumericLinkType) x)))
(define-public NumericOutputLinkType (cog-type->int 'NumericOutputLink))
(define-public (NumericOutputLink . x)
	(apply cog-new-link (append (list NumericOutputLinkType) x)))
(define-public (NumericOutput . x)
	(apply cog-new-link (append (list NumericOutputLinkType) x)))
(define-public TypeLinkType (cog-type->int 'TypeLink))
(define-public (TypeLink . x)
	(apply cog-new-link (append (list TypeLinkType) x)))
(define-public (Type . x)
	(apply cog-new-link (append (list TypeLinkType) x)))
(define-public TypeOutputLinkType (cog-type->int 'TypeOutputLink))
(define-public (TypeOutputLink . x)
	(apply cog-new-link (append (list TypeOutputLinkType) x)))
(define-public (TypeOutput . x)
	(apply cog-new-link (append (list TypeOutputLinkType) x)))
(define-public SetLinkType (cog-type->int 'SetLink))
(define-public (SetLink . x)
	(apply cog-new-link (append (list SetLinkType) x)))
(define-public (Set . x)
	(apply cog-new-link (append (list SetLinkType) x)))
(define-public ListLinkType (cog-type->int 'ListLink))
(define-public (ListLink . x)
	(apply cog-new-link (append (list ListLinkType) x)))
(define-public (List . x)
	(apply cog-new-link (append (list ListLinkType) x)))
(define-public MemberLinkType (cog-type->int 'MemberLink))
(define-public (MemberLink . x)
	(apply cog-new-link (append (list MemberLinkType) x)))
(define-public (Member . x)
	(apply cog-new-link (append (list MemberLinkType) x)))
(define-public ContextLinkType (cog-type->int 'ContextLink))
(define-public (ContextLink . x)
	(apply cog-new-link (append (list ContextLinkType) x)))
(define-public (Context . x)
	(apply cog-new-link (append (list ContextLinkType) x)))
(define-public InheritanceLinkType (cog-type->int 'InheritanceLink))
(define-public (InheritanceLink . x)
	(apply cog-new-link (append (list InheritanceLinkType) x)))
(define-public (Inheritance . x)
	(apply cog-new-link (append (list InheritanceLinkType) x)))
(define-public SubsetLinkType (cog-type->int 'SubsetLink))
(define-public (SubsetLink . x)
	(apply cog-new-link (append (list SubsetLinkType) x)))
(define-public (Subset . x)
	(apply cog-new-link (append (list SubsetLinkType) x)))
(define-public IntensionalInheritanceLinkType (cog-type->int 'IntensionalInheritanceLink))
(define-public (IntensionalInheritanceLink . x)
	(apply cog-new-link (append (list IntensionalInheritanceLinkType) x)))
(define-public (IntensionalInheritance . x)
	(apply cog-new-link (append (list IntensionalInheritanceLinkType) x)))
(define-public SimilarityLinkType (cog-type->int 'SimilarityLink))
(define-public (SimilarityLink . x)
	(apply cog-new-link (append (list SimilarityLinkType) x)))
(define-public (Similarity . x)
	(apply cog-new-link (append (list SimilarityLinkType) x)))
(define-public ExtensionalSimilarityLinkType (cog-type->int 'ExtensionalSimilarityLink))
(define-public (ExtensionalSimilarityLink . x)
	(apply cog-new-link (append (list ExtensionalSimilarityLinkType) x)))
(define-public (ExtensionalSimilarity . x)
	(apply cog-new-link (append (list ExtensionalSimilarityLinkType) x)))
(define-public IntensionalSimilarityLinkType (cog-type->int 'IntensionalSimilarityLink))
(define-public (IntensionalSimilarityLink . x)
	(apply cog-new-link (append (list IntensionalSimilarityLinkType) x)))
(define-public (IntensionalSimilarity . x)
	(apply cog-new-link (append (list IntensionalSimilarityLinkType) x)))
(define-public TrueLinkType (cog-type->int 'TrueLink))
(define-public (TrueLink . x)
	(apply cog-new-link (append (list TrueLinkType) x)))
(define-public (True . x)
	(apply cog-new-link (append (list TrueLinkType) x)))
(define-public FalseLinkType (cog-type->int 'FalseLink))
(define-public (FalseLink . x)
	(apply cog-new-link (append (list FalseLinkType) x)))
(define-public (False . x)
	(apply cog-new-link (append (list FalseLinkType) x)))
(define-public AndLinkType (cog-type->int 'AndLink))
(define-public (AndLink . x)
	(apply cog-new-link (append (list AndLinkType) x)))
(define-public (And . x)
	(apply cog-new-link (append (list AndLinkType) x)))
(define-public OrLinkType (cog-type->int 'OrLink))
(define-public (OrLink . x)
	(apply cog-new-link (append (list OrLinkType) x)))
(define-public (Or . x)
	(apply cog-new-link (append (list OrLinkType) x)))
(define-public NotLinkType (cog-type->int 'NotLink))
(define-public (NotLink . x)
	(apply cog-new-link (append (list NotLinkType) x)))
(define-public (Not . x)
	(apply cog-new-link (append (list NotLinkType) x)))
(define-public SequentialAndLinkType (cog-type->int 'SequentialAndLink))
(define-public (SequentialAndLink . x)
	(apply cog-new-link (append (list SequentialAndLinkType) x)))
(define-public (SequentialAnd . x)
	(apply cog-new-link (append (list SequentialAndLinkType) x)))
(define-public SequentialOrLinkType (cog-type->int 'SequentialOrLink))
(define-public (SequentialOrLink . x)
	(apply cog-new-link (append (list SequentialOrLinkType) x)))
(define-public (SequentialOr . x)
	(apply cog-new-link (append (list SequentialOrLinkType) x)))
(define-public ChoiceLinkType (cog-type->int 'ChoiceLink))
(define-public (ChoiceLink . x)
	(apply cog-new-link (append (list ChoiceLinkType) x)))
(define-public (Choice . x)
	(apply cog-new-link (append (list ChoiceLinkType) x)))
(define-public PresentLinkType (cog-type->int 'PresentLink))
(define-public (PresentLink . x)
	(apply cog-new-link (append (list PresentLinkType) x)))
(define-public (Present . x)
	(apply cog-new-link (append (list PresentLinkType) x)))
(define-public AbsentLinkType (cog-type->int 'AbsentLink))
(define-public (AbsentLink . x)
	(apply cog-new-link (append (list AbsentLinkType) x)))
(define-public (Absent . x)
	(apply cog-new-link (append (list AbsentLinkType) x)))
(define-public ParallelLinkType (cog-type->int 'ParallelLink))
(define-public (ParallelLink . x)
	(apply cog-new-link (append (list ParallelLinkType) x)))
(define-public (Parallel . x)
	(apply cog-new-link (append (list ParallelLinkType) x)))
(define-public JoinLinkType (cog-type->int 'JoinLink))
(define-public (JoinLink . x)
	(apply cog-new-link (append (list JoinLinkType) x)))
(define-public (Join . x)
	(apply cog-new-link (append (list JoinLinkType) x)))
(define-public VariableNodeType (cog-type->int 'VariableNode))
(define-public (VariableNode . x)
	(apply cog-new-node (append (list VariableNodeType) x)))
(define-public (Variable . x)
	(apply cog-new-node (append (list VariableNodeType) x)))
(define-public VariableListType (cog-type->int 'VariableList))
(define-public (VariableList . x)
	(apply cog-new-link (append (list VariableListType) x)))
(define-public (VariableList . x)
	(apply cog-new-link (append (list VariableListType) x)))
(define-public GlobNodeType (cog-type->int 'GlobNode))
(define-public (GlobNode . x)
	(apply cog-new-node (append (list GlobNodeType) x)))
(define-public (Glob . x)
	(apply cog-new-node (append (list GlobNodeType) x)))
(define-public QuoteLinkType (cog-type->int 'QuoteLink))
(define-public (QuoteLink . x)
	(apply cog-new-link (append (list QuoteLinkType) x)))
(define-public (Quote . x)
	(apply cog-new-link (append (list QuoteLinkType) x)))
(define-public UnquoteLinkType (cog-type->int 'UnquoteLink))
(define-public (UnquoteLink . x)
	(apply cog-new-link (append (list UnquoteLinkType) x)))
(define-public (Unquote . x)
	(apply cog-new-link (append (list UnquoteLinkType) x)))
(define-public LocalQuoteLinkType (cog-type->int 'LocalQuoteLink))
(define-public (LocalQuoteLink . x)
	(apply cog-new-link (append (list LocalQuoteLinkType) x)))
(define-public (LocalQuote . x)
	(apply cog-new-link (append (list LocalQuoteLinkType) x)))
(define-public DontExecLinkType (cog-type->int 'DontExecLink))
(define-public (DontExecLink . x)
	(apply cog-new-link (append (list DontExecLinkType) x)))
(define-public (DontExec . x)
	(apply cog-new-link (append (list DontExecLinkType) x)))
(define-public FreeLinkType (cog-type->int 'FreeLink))
(define-public (FreeLink . x)
	(apply cog-new-link (append (list FreeLinkType) x)))
(define-public (Free . x)
	(apply cog-new-link (append (list FreeLinkType) x)))
(define-public DeleteLinkType (cog-type->int 'DeleteLink))
(define-public (DeleteLink . x)
	(apply cog-new-link (append (list DeleteLinkType) x)))
(define-public (Delete . x)
	(apply cog-new-link (append (list DeleteLinkType) x)))
(define-public UniqueLinkType (cog-type->int 'UniqueLink))
(define-public (UniqueLink . x)
	(apply cog-new-link (append (list UniqueLinkType) x)))
(define-public (Unique . x)
	(apply cog-new-link (append (list UniqueLinkType) x)))
(define-public StateLinkType (cog-type->int 'StateLink))
(define-public (StateLink . x)
	(apply cog-new-link (append (list StateLinkType) x)))
(define-public (State . x)
	(apply cog-new-link (append (list StateLinkType) x)))
(define-public DefineLinkType (cog-type->int 'DefineLink))
(define-public (DefineLink . x)
	(apply cog-new-link (append (list DefineLinkType) x)))
(define-public (Define . x)
	(apply cog-new-link (append (list DefineLinkType) x)))
(define-public ScopeLinkType (cog-type->int 'ScopeLink))
(define-public (ScopeLink . x)
	(apply cog-new-link (append (list ScopeLinkType) x)))
(define-public (Scope . x)
	(apply cog-new-link (append (list ScopeLinkType) x)))
(define-public RewriteLinkType (cog-type->int 'RewriteLink))
(define-public (RewriteLink . x)
	(apply cog-new-link (append (list RewriteLinkType) x)))
(define-public (Rewrite . x)
	(apply cog-new-link (append (list RewriteLinkType) x)))
(define-public PrenexLinkType (cog-type->int 'PrenexLink))
(define-public (PrenexLink . x)
	(apply cog-new-link (append (list PrenexLinkType) x)))
(define-public (Prenex . x)
	(apply cog-new-link (append (list PrenexLinkType) x)))
(define-public LambdaLinkType (cog-type->int 'LambdaLink))
(define-public (LambdaLink . x)
	(apply cog-new-link (append (list LambdaLinkType) x)))
(define-public (Lambda . x)
	(apply cog-new-link (append (list LambdaLinkType) x)))
(define-public PutLinkType (cog-type->int 'PutLink))
(define-public (PutLink . x)
	(apply cog-new-link (append (list PutLinkType) x)))
(define-public (Put . x)
	(apply cog-new-link (append (list PutLinkType) x)))
(define-public PatternLinkType (cog-type->int 'PatternLink))
(define-public (PatternLink . x)
	(apply cog-new-link (append (list PatternLinkType) x)))
(define-public (Pattern . x)
	(apply cog-new-link (append (list PatternLinkType) x)))
(define-public SatisfactionLinkType (cog-type->int 'SatisfactionLink))
(define-public (SatisfactionLink . x)
	(apply cog-new-link (append (list SatisfactionLinkType) x)))
(define-public (Satisfaction . x)
	(apply cog-new-link (append (list SatisfactionLinkType) x)))
(define-public SatisfyingLinkType (cog-type->int 'SatisfyingLink))
(define-public (SatisfyingLink . x)
	(apply cog-new-link (append (list SatisfyingLinkType) x)))
(define-public (Satisfying . x)
	(apply cog-new-link (append (list SatisfyingLinkType) x)))
(define-public GetLinkType (cog-type->int 'GetLink))
(define-public (GetLink . x)
	(apply cog-new-link (append (list GetLinkType) x)))
(define-public (Get . x)
	(apply cog-new-link (append (list GetLinkType) x)))
(define-public BindLinkType (cog-type->int 'BindLink))
(define-public (BindLink . x)
	(apply cog-new-link (append (list BindLinkType) x)))
(define-public (Bind . x)
	(apply cog-new-link (append (list BindLinkType) x)))
(define-public DualLinkType (cog-type->int 'DualLink))
(define-public (DualLink . x)
	(apply cog-new-link (append (list DualLinkType) x)))
(define-public (Dual . x)
	(apply cog-new-link (append (list DualLinkType) x)))
(define-public ForAllLinkType (cog-type->int 'ForAllLink))
(define-public (ForAllLink . x)
	(apply cog-new-link (append (list ForAllLinkType) x)))
(define-public (ForAll . x)
	(apply cog-new-link (append (list ForAllLinkType) x)))
(define-public ExistsLinkType (cog-type->int 'ExistsLink))
(define-public (ExistsLink . x)
	(apply cog-new-link (append (list ExistsLinkType) x)))
(define-public (Exists . x)
	(apply cog-new-link (append (list ExistsLinkType) x)))
(define-public SatisfyingSetScopeLinkType (cog-type->int 'SatisfyingSetScopeLink))
(define-public (SatisfyingSetScopeLink . x)
	(apply cog-new-link (append (list SatisfyingSetScopeLinkType) x)))
(define-public (SatisfyingSetScope . x)
	(apply cog-new-link (append (list SatisfyingSetScopeLinkType) x)))
(define-public SatisfyingSetLinkType (cog-type->int 'SatisfyingSetLink))
(define-public (SatisfyingSetLink . x)
	(apply cog-new-link (append (list SatisfyingSetLinkType) x)))
(define-public (SatisfyingSet . x)
	(apply cog-new-link (append (list SatisfyingSetLinkType) x)))
(define-public ImplicationScopeLinkType (cog-type->int 'ImplicationScopeLink))
(define-public (ImplicationScopeLink . x)
	(apply cog-new-link (append (list ImplicationScopeLinkType) x)))
(define-public (ImplicationScope . x)
	(apply cog-new-link (append (list ImplicationScopeLinkType) x)))
(define-public IntensionalImplicationScopeLinkType (cog-type->int 'IntensionalImplicationScopeLink))
(define-public (IntensionalImplicationScopeLink . x)
	(apply cog-new-link (append (list IntensionalImplicationScopeLinkType) x)))
(define-public (IntensionalImplicationScope . x)
	(apply cog-new-link (append (list IntensionalImplicationScopeLinkType) x)))
(define-public ExtensionalImplicationScopeLinkType (cog-type->int 'ExtensionalImplicationScopeLink))
(define-public (ExtensionalImplicationScopeLink . x)
	(apply cog-new-link (append (list ExtensionalImplicationScopeLinkType) x)))
(define-public (ExtensionalImplicationScope . x)
	(apply cog-new-link (append (list ExtensionalImplicationScopeLinkType) x)))
(define-public EquivalenceScopeLinkType (cog-type->int 'EquivalenceScopeLink))
(define-public (EquivalenceScopeLink . x)
	(apply cog-new-link (append (list EquivalenceScopeLinkType) x)))
(define-public (EquivalenceScope . x)
	(apply cog-new-link (append (list EquivalenceScopeLinkType) x)))
(define-public IntensionalEquivalenceScopeLinkType (cog-type->int 'IntensionalEquivalenceScopeLink))
(define-public (IntensionalEquivalenceScopeLink . x)
	(apply cog-new-link (append (list IntensionalEquivalenceScopeLinkType) x)))
(define-public (IntensionalEquivalenceScope . x)
	(apply cog-new-link (append (list IntensionalEquivalenceScopeLinkType) x)))
(define-public ExtensionalEquivalenceScopeLinkType (cog-type->int 'ExtensionalEquivalenceScopeLink))
(define-public (ExtensionalEquivalenceScopeLink . x)
	(apply cog-new-link (append (list ExtensionalEquivalenceScopeLinkType) x)))
(define-public (ExtensionalEquivalenceScope . x)
	(apply cog-new-link (append (list ExtensionalEquivalenceScopeLinkType) x)))
(define-public ImplicationLinkType (cog-type->int 'ImplicationLink))
(define-public (ImplicationLink . x)
	(apply cog-new-link (append (list ImplicationLinkType) x)))
(define-public (Implication . x)
	(apply cog-new-link (append (list ImplicationLinkType) x)))
(define-public IntensionalImplicationLinkType (cog-type->int 'IntensionalImplicationLink))
(define-public (IntensionalImplicationLink . x)
	(apply cog-new-link (append (list IntensionalImplicationLinkType) x)))
(define-public (IntensionalImplication . x)
	(apply cog-new-link (append (list IntensionalImplicationLinkType) x)))
(define-public ExtensionalImplicationLinkType (cog-type->int 'ExtensionalImplicationLink))
(define-public (ExtensionalImplicationLink . x)
	(apply cog-new-link (append (list ExtensionalImplicationLinkType) x)))
(define-public (ExtensionalImplication . x)
	(apply cog-new-link (append (list ExtensionalImplicationLinkType) x)))
(define-public EquivalenceLinkType (cog-type->int 'EquivalenceLink))
(define-public (EquivalenceLink . x)
	(apply cog-new-link (append (list EquivalenceLinkType) x)))
(define-public (Equivalence . x)
	(apply cog-new-link (append (list EquivalenceLinkType) x)))
(define-public IntensionalEquivalenceLinkType (cog-type->int 'IntensionalEquivalenceLink))
(define-public (IntensionalEquivalenceLink . x)
	(apply cog-new-link (append (list IntensionalEquivalenceLinkType) x)))
(define-public (IntensionalEquivalence . x)
	(apply cog-new-link (append (list IntensionalEquivalenceLinkType) x)))
(define-public ExtensionalEquivalenceLinkType (cog-type->int 'ExtensionalEquivalenceLink))
(define-public (ExtensionalEquivalenceLink . x)
	(apply cog-new-link (append (list ExtensionalEquivalenceLinkType) x)))
(define-public (ExtensionalEquivalence . x)
	(apply cog-new-link (append (list ExtensionalEquivalenceLinkType) x)))
(define-public AssociativeLinkType (cog-type->int 'AssociativeLink))
(define-public (AssociativeLink . x)
	(apply cog-new-link (append (list AssociativeLinkType) x)))
(define-public (Associative . x)
	(apply cog-new-link (append (list AssociativeLinkType) x)))
(define-public AttractionLinkType (cog-type->int 'AttractionLink))
(define-public (AttractionLink . x)
	(apply cog-new-link (append (list AttractionLinkType) x)))
(define-public (Attraction . x)
	(apply cog-new-link (append (list AttractionLinkType) x)))
(define-public EvaluationLinkType (cog-type->int 'EvaluationLink))
(define-public (EvaluationLink . x)
	(apply cog-new-link (append (list EvaluationLinkType) x)))
(define-public (Evaluation . x)
	(apply cog-new-link (append (list EvaluationLinkType) x)))
(define-public ExecutionLinkType (cog-type->int 'ExecutionLink))
(define-public (ExecutionLink . x)
	(apply cog-new-link (append (list ExecutionLinkType) x)))
(define-public (Execution . x)
	(apply cog-new-link (append (list ExecutionLinkType) x)))
(define-public ProcedureNodeType (cog-type->int 'ProcedureNode))
(define-public (ProcedureNode . x)
	(apply cog-new-node (append (list ProcedureNodeType) x)))
(define-public (Procedure . x)
	(apply cog-new-node (append (list ProcedureNodeType) x)))
(define-public GroundedProcedureNodeType (cog-type->int 'GroundedProcedureNode))
(define-public (GroundedProcedureNode . x)
	(apply cog-new-node (append (list GroundedProcedureNodeType) x)))
(define-public (GroundedProcedure . x)
	(apply cog-new-node (append (list GroundedProcedureNodeType) x)))
(define-public SchemaNodeType (cog-type->int 'SchemaNode))
(define-public (SchemaNode . x)
	(apply cog-new-node (append (list SchemaNodeType) x)))
(define-public (Schema . x)
	(apply cog-new-node (append (list SchemaNodeType) x)))
(define-public DefinedSchemaNodeType (cog-type->int 'DefinedSchemaNode))
(define-public (DefinedSchemaNode . x)
	(apply cog-new-node (append (list DefinedSchemaNodeType) x)))
(define-public (DefinedSchema . x)
	(apply cog-new-node (append (list DefinedSchemaNodeType) x)))
(define-public GroundedSchemaNodeType (cog-type->int 'GroundedSchemaNode))
(define-public (GroundedSchemaNode . x)
	(apply cog-new-node (append (list GroundedSchemaNodeType) x)))
(define-public (GroundedSchema . x)
	(apply cog-new-node (append (list GroundedSchemaNodeType) x)))
(define-public PredicateNodeType (cog-type->int 'PredicateNode))
(define-public (PredicateNode . x)
	(apply cog-new-node (append (list PredicateNodeType) x)))
(define-public (Predicate . x)
	(apply cog-new-node (append (list PredicateNodeType) x)))
(define-public DefinedPredicateNodeType (cog-type->int 'DefinedPredicateNode))
(define-public (DefinedPredicateNode . x)
	(apply cog-new-node (append (list DefinedPredicateNodeType) x)))
(define-public (DefinedPredicate . x)
	(apply cog-new-node (append (list DefinedPredicateNodeType) x)))
(define-public GroundedPredicateNodeType (cog-type->int 'GroundedPredicateNode))
(define-public (GroundedPredicateNode . x)
	(apply cog-new-node (append (list GroundedPredicateNodeType) x)))
(define-public (GroundedPredicate . x)
	(apply cog-new-node (append (list GroundedPredicateNodeType) x)))
(define-public TypeNodeType (cog-type->int 'TypeNode))
(define-public (TypeNode . x)
	(apply cog-new-node (append (list TypeNodeType) x)))
(define-public (Type . x)
	(apply cog-new-node (append (list TypeNodeType) x)))
(define-public TypeInhNodeType (cog-type->int 'TypeInhNode))
(define-public (TypeInhNode . x)
	(apply cog-new-node (append (list TypeInhNodeType) x)))
(define-public (TypeInh . x)
	(apply cog-new-node (append (list TypeInhNodeType) x)))
(define-public TypeCoInhNodeType (cog-type->int 'TypeCoInhNode))
(define-public (TypeCoInhNode . x)
	(apply cog-new-node (append (list TypeCoInhNodeType) x)))
(define-public (TypeCoInh . x)
	(apply cog-new-node (append (list TypeCoInhNodeType) x)))
(define-public DefinedTypeNodeType (cog-type->int 'DefinedTypeNode))
(define-public (DefinedTypeNode . x)
	(apply cog-new-node (append (list DefinedTypeNodeType) x)))
(define-public (DefinedType . x)
	(apply cog-new-node (append (list DefinedTypeNodeType) x)))
(define-public TypeChoiceType (cog-type->int 'TypeChoice))
(define-public (TypeChoice . x)
	(apply cog-new-link (append (list TypeChoiceType) x)))
(define-public (TypeChoice . x)
	(apply cog-new-link (append (list TypeChoiceType) x)))
(define-public TypeSetLinkType (cog-type->int 'TypeSetLink))
(define-public (TypeSetLink . x)
	(apply cog-new-link (append (list TypeSetLinkType) x)))
(define-public (TypeSet . x)
	(apply cog-new-link (append (list TypeSetLinkType) x)))
(define-public ArrowLinkType (cog-type->int 'ArrowLink))
(define-public (ArrowLink . x)
	(apply cog-new-link (append (list ArrowLinkType) x)))
(define-public (Arrow . x)
	(apply cog-new-link (append (list ArrowLinkType) x)))
(define-public SignatureLinkType (cog-type->int 'SignatureLink))
(define-public (SignatureLink . x)
	(apply cog-new-link (append (list SignatureLinkType) x)))
(define-public (Signature . x)
	(apply cog-new-link (append (list SignatureLinkType) x)))
(define-public FuzzyLinkType (cog-type->int 'FuzzyLink))
(define-public (FuzzyLink . x)
	(apply cog-new-link (append (list FuzzyLinkType) x)))
(define-public (Fuzzy . x)
	(apply cog-new-link (append (list FuzzyLinkType) x)))
(define-public TypedVariableLinkType (cog-type->int 'TypedVariableLink))
(define-public (TypedVariableLink . x)
	(apply cog-new-link (append (list TypedVariableLinkType) x)))
(define-public (TypedVariable . x)
	(apply cog-new-link (append (list TypedVariableLinkType) x)))
(define-public TypedAtomLinkType (cog-type->int 'TypedAtomLink))
(define-public (TypedAtomLink . x)
	(apply cog-new-link (append (list TypedAtomLinkType) x)))
(define-public (TypedAtom . x)
	(apply cog-new-link (append (list TypedAtomLinkType) x)))
(define-public AnchorNodeType (cog-type->int 'AnchorNode))
(define-public (AnchorNode . x)
	(apply cog-new-node (append (list AnchorNodeType) x)))
(define-public (Anchor . x)
	(apply cog-new-node (append (list AnchorNodeType) x)))
(define-public IntervalLinkType (cog-type->int 'IntervalLink))
(define-public (IntervalLink . x)
	(apply cog-new-link (append (list IntervalLinkType) x)))
(define-public (Interval . x)
	(apply cog-new-link (append (list IntervalLinkType) x)))
(define-public QuantityLinkType (cog-type->int 'QuantityLink))
(define-public (QuantityLink . x)
	(apply cog-new-link (append (list QuantityLinkType) x)))
(define-public (Quantity . x)
	(apply cog-new-link (append (list QuantityLinkType) x)))
(define-public VirtualLinkType (cog-type->int 'VirtualLink))
(define-public (VirtualLink . x)
	(apply cog-new-link (append (list VirtualLinkType) x)))
(define-public (Virtual . x)
	(apply cog-new-link (append (list VirtualLinkType) x)))
(define-public GreaterThanLinkType (cog-type->int 'GreaterThanLink))
(define-public (GreaterThanLink . x)
	(apply cog-new-link (append (list GreaterThanLinkType) x)))
(define-public (GreaterThan . x)
	(apply cog-new-link (append (list GreaterThanLinkType) x)))
(define-public IdenticalLinkType (cog-type->int 'IdenticalLink))
(define-public (IdenticalLink . x)
	(apply cog-new-link (append (list IdenticalLinkType) x)))
(define-public (Identical . x)
	(apply cog-new-link (append (list IdenticalLinkType) x)))
(define-public EqualLinkType (cog-type->int 'EqualLink))
(define-public (EqualLink . x)
	(apply cog-new-link (append (list EqualLinkType) x)))
(define-public (Equal . x)
	(apply cog-new-link (append (list EqualLinkType) x)))
(define-public FunctionLinkType (cog-type->int 'FunctionLink))
(define-public (FunctionLink . x)
	(apply cog-new-link (append (list FunctionLinkType) x)))
(define-public (Function . x)
	(apply cog-new-link (append (list FunctionLinkType) x)))
(define-public ExecutionOutputLinkType (cog-type->int 'ExecutionOutputLink))
(define-public (ExecutionOutputLink . x)
	(apply cog-new-link (append (list ExecutionOutputLinkType) x)))
(define-public (ExecutionOutput . x)
	(apply cog-new-link (append (list ExecutionOutputLinkType) x)))
(define-public ValueOfLinkType (cog-type->int 'ValueOfLink))
(define-public (ValueOfLink . x)
	(apply cog-new-link (append (list ValueOfLinkType) x)))
(define-public (ValueOf . x)
	(apply cog-new-link (append (list ValueOfLinkType) x)))
(define-public TruthValueOfLinkType (cog-type->int 'TruthValueOfLink))
(define-public (TruthValueOfLink . x)
	(apply cog-new-link (append (list TruthValueOfLinkType) x)))
(define-public (TruthValueOf . x)
	(apply cog-new-link (append (list TruthValueOfLinkType) x)))
(define-public FoldLinkType (cog-type->int 'FoldLink))
(define-public (FoldLink . x)
	(apply cog-new-link (append (list FoldLinkType) x)))
(define-public (Fold . x)
	(apply cog-new-link (append (list FoldLinkType) x)))
(define-public ArithmeticLinkType (cog-type->int 'ArithmeticLink))
(define-public (ArithmeticLink . x)
	(apply cog-new-link (append (list ArithmeticLinkType) x)))
(define-public (Arithmetic . x)
	(apply cog-new-link (append (list ArithmeticLinkType) x)))
(define-public PlusLinkType (cog-type->int 'PlusLink))
(define-public (PlusLink . x)
	(apply cog-new-link (append (list PlusLinkType) x)))
(define-public (Plus . x)
	(apply cog-new-link (append (list PlusLinkType) x)))
(define-public MinusLinkType (cog-type->int 'MinusLink))
(define-public (MinusLink . x)
	(apply cog-new-link (append (list MinusLinkType) x)))
(define-public (Minus . x)
	(apply cog-new-link (append (list MinusLinkType) x)))
(define-public TimesLinkType (cog-type->int 'TimesLink))
(define-public (TimesLink . x)
	(apply cog-new-link (append (list TimesLinkType) x)))
(define-public (Times . x)
	(apply cog-new-link (append (list TimesLinkType) x)))
(define-public DivideLinkType (cog-type->int 'DivideLink))
(define-public (DivideLink . x)
	(apply cog-new-link (append (list DivideLinkType) x)))
(define-public (Divide . x)
	(apply cog-new-link (append (list DivideLinkType) x)))
(define-public RandomNumberLinkType (cog-type->int 'RandomNumberLink))
(define-public (RandomNumberLink . x)
	(apply cog-new-link (append (list RandomNumberLinkType) x)))
(define-public (RandomNumber . x)
	(apply cog-new-link (append (list RandomNumberLinkType) x)))
(define-public ArityLinkType (cog-type->int 'ArityLink))
(define-public (ArityLink . x)
	(apply cog-new-link (append (list ArityLinkType) x)))
(define-public (Arity . x)
	(apply cog-new-link (append (list ArityLinkType) x)))
(define-public RandomChoiceLinkType (cog-type->int 'RandomChoiceLink))
(define-public (RandomChoiceLink . x)
	(apply cog-new-link (append (list RandomChoiceLinkType) x)))
(define-public (RandomChoice . x)
	(apply cog-new-link (append (list RandomChoiceLinkType) x)))
(define-public TimeLinkType (cog-type->int 'TimeLink))
(define-public (TimeLink . x)
	(apply cog-new-link (append (list TimeLinkType) x)))
(define-public (Time . x)
	(apply cog-new-link (append (list TimeLinkType) x)))
(define-public SleepLinkType (cog-type->int 'SleepLink))
(define-public (SleepLink . x)
	(apply cog-new-link (append (list SleepLinkType) x)))
(define-public (Sleep . x)
	(apply cog-new-link (append (list SleepLinkType) x)))
(define-public MapLinkType (cog-type->int 'MapLink))
(define-public (MapLink . x)
	(apply cog-new-link (append (list MapLinkType) x)))
(define-public (Map . x)
	(apply cog-new-link (append (list MapLinkType) x)))
(define-public ConnectorType (cog-type->int 'Connector))
(define-public (Connector . x)
	(apply cog-new-link (append (list ConnectorType) x)))
(define-public (Connector . x)
	(apply cog-new-link (append (list ConnectorType) x)))
(define-public ConnectorDirType (cog-type->int 'ConnectorDir))
(define-public (ConnectorDir . x)
	(apply cog-new-node (append (list ConnectorDirType) x)))
(define-public (ConnectorDir . x)
	(apply cog-new-node (append (list ConnectorDirType) x)))
(define-public ConnectorSeqType (cog-type->int 'ConnectorSeq))
(define-public (ConnectorSeq . x)
	(apply cog-new-link (append (list ConnectorSeqType) x)))
(define-public (ConnectorSeq . x)
	(apply cog-new-link (append (list ConnectorSeqType) x)))
(define-public SectionType (cog-type->int 'Section))
(define-public (Section . x)
	(apply cog-new-link (append (list SectionType) x)))
(define-public (Section . x)
	(apply cog-new-link (append (list SectionType) x)))
