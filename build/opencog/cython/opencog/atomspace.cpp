/* Generated by Cython 0.23.4 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__opencog__atomspace
#define __PYX_HAVE_API__opencog__atomspace
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <list>
#include "opencog/cython/opencog/Cast.h"
#include <string>
#include "opencog/truthvalue/TruthValue.h"
#include "opencog/truthvalue/SimpleTruthValue.h"
#include "opencog/atoms/proto/NameServer.h"
#include "opencog/atoms/proto/atom_types.h"
#include "opencog/atoms/base/Link.h"
#include "opencog/atoms/base/Atom.h"
#include "opencog/atoms/base/Handle.h"
#include "opencog/atomspace/AtomSpace.h"
#include "opencog/attentionbank/AVUtils.h"
#include "opencog/attentionbank/AttentionBank.h"
#include "opencog/atomutils/AtomUtils.h"
#include "string.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "opencog/nameserver.pyx",
  "opencog/truth_value.pyx",
  "opencog/atomspace_details.pyx",
  "opencog/atom.pyx",
  "stringsource",
  "opencog/atomspace.pyx",
};

/* "opencog/atomspace.pxd":12
 *     cdef object PyLong_FromVoidPtr(void *p)
 * 
 * ctypedef public long PANDLE             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "opencog/cython/opencog/Cast.h":
 */
typedef long PANDLE;

/* "opencog/atomspace.pxd":39
 * 
 * ### TruthValue
 * ctypedef double count_t             # <<<<<<<<<<<<<<
 * ctypedef float confidence_t
 * ctypedef float strength_t
 */
typedef double __pyx_t_7opencog_9atomspace_count_t;

/* "opencog/atomspace.pxd":40
 * ### TruthValue
 * ctypedef double count_t
 * ctypedef float confidence_t             # <<<<<<<<<<<<<<
 * ctypedef float strength_t
 * 
 */
typedef float __pyx_t_7opencog_9atomspace_confidence_t;

/* "opencog/atomspace.pxd":41
 * ctypedef double count_t
 * ctypedef float confidence_t
 * ctypedef float strength_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "opencog/truthvalue/TruthValue.h" namespace "opencog":
 */
typedef float __pyx_t_7opencog_9atomspace_strength_t;

/* "opencog/atomspace.pxd":76
 * # Basic OpenCog types
 * # NameServer
 * ctypedef short Type             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "opencog/atoms/proto/NameServer.h" namespace "opencog":
 */
typedef short __pyx_t_7opencog_9atomspace_Type;

/* "opencog/atomspace.pxd":95
 * 
 * # Atom
 * ctypedef public short av_type             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "opencog/atoms/base/Link.h" namespace "opencog":
 */
typedef short av_type;

/*--- Type declarations ---*/
struct __pyx_obj_7opencog_9atomspace_TruthValue;
struct __pyx_obj_7opencog_9atomspace_Atom;
struct __pyx_obj_7opencog_9atomspace_AtomSpace;
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type;
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av;
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus;
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates;
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for;
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__;
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type;

/* "opencog/atomspace.pxd":143
 *     cdef cppclass cHandleSeq "opencog::HandleSeq"
 * 
 * cdef class TruthValue:             # <<<<<<<<<<<<<<
 *     cdef tv_ptr *cobj
 *     cdef _mean(self)
 */
struct __pyx_obj_7opencog_9atomspace_TruthValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *__pyx_vtab;
  std::shared_ptr<const opencog::TruthValue> *cobj;
};


/* "opencog/atomspace.pxd":152
 *     cdef _init(self, float mean, float count)
 * 
 * cdef class Atom:             # <<<<<<<<<<<<<<
 *     cdef cHandle *handle
 *     cdef AtomSpace atomspace
 */
struct __pyx_obj_7opencog_9atomspace_Atom {
  PyObject_HEAD
  opencog::Handle *handle;
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *atomspace;
  PyObject *_atom_type;
  PyObject *_name;
  PyObject *_outgoing;
};


/* "opencog/atomspace.pxd":188
 * cdef AtomSpace_factory(cAtomSpace *to_wrap)
 * 
 * cdef class AtomSpace:             # <<<<<<<<<<<<<<
 *     cdef cAtomSpace *atomspace
 *     cdef bint owns_atomspace
 */
struct __pyx_obj_7opencog_9atomspace_AtomSpace {
  PyObject_HEAD
  opencog::AtomSpace *atomspace;
  int owns_atomspace;
};


/* "../../../../opencog/cython/opencog/atomspace_details.pyx":201
 *         return convert_handle_seq_to_python_list(handle_vector,self)
 * 
 *     def xget_atoms_by_type(self, Type t, subtype = True):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type {
  PyObject_HEAD
  std::vector<opencog::Handle> ::iterator __pyx_v_c_handle_iter;
  opencog::Handle __pyx_v_current_c_handle;
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self;
  int __pyx_v_subt;
  PyObject *__pyx_v_subtype;
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t;
};


/* "../../../../opencog/cython/opencog/atomspace_details.pyx":231
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_atoms_by_av(self, lower_bound, upper_bound=None):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av {
  PyObject_HEAD
  std::vector<opencog::Handle> ::iterator __pyx_v_c_handle_iter;
  opencog::Handle __pyx_v_current_c_handle;
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  PyObject *__pyx_v_lower_bound;
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self;
  PyObject *__pyx_v_upper_bound;
};


/* "../../../../opencog/cython/opencog/atomspace_details.pyx":260
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_atoms_in_attentional_focus(self):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus {
  PyObject_HEAD
  std::vector<opencog::Handle> ::iterator __pyx_v_c_handle_iter;
  opencog::Handle __pyx_v_current_c_handle;
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self;
};


/* "../../../../opencog/cython/opencog/atomspace_details.pyx":289
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_predicates(self,             # <<<<<<<<<<<<<<
 *                         Atom target,
 *                         Type predicate_type = types.PredicateNode,
 */
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates {
  PyObject_HEAD
  std::vector<opencog::Handle> ::iterator __pyx_v_c_handle_iter;
  opencog::Handle __pyx_v_current_c_handle;
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  __pyx_t_7opencog_9atomspace_Type __pyx_v_predicate_type;
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self;
  PyObject *__pyx_v_subclasses;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target;
  int __pyx_v_want_subclasses;
};


/* "../../../../opencog/cython/opencog/atomspace_details.pyx":319
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_predicates_for(self, Atom target, Atom predicate):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for {
  PyObject_HEAD
  std::vector<opencog::Handle> ::iterator __pyx_v_c_handle_iter;
  opencog::Handle __pyx_v_current_c_handle;
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_predicate;
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target;
};


/* "../../../../opencog/cython/opencog/atom.pyx":194
 * 
 *     property xincoming:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[cHandle] handle_vector
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ {
  PyObject_HEAD
  opencog::Atom *__pyx_v_atom_ptr;
  std::vector<opencog::Handle> ::iterator __pyx_v_c_handle_iter;
  opencog::Handle __pyx_v_current_c_handle;
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self;
};


/* "../../../../opencog/cython/opencog/atom.pyx":220
 *         return convert_handle_seq_to_python_list(handle_vector, self.atomspace)
 * 
 *     def xincoming_by_type(self, Type type):             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type {
  PyObject_HEAD
  opencog::Atom *__pyx_v_atom_ptr;
  std::vector<opencog::Handle> ::iterator __pyx_v_c_handle_iter;
  opencog::Handle __pyx_v_current_c_handle;
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self;
  __pyx_t_7opencog_9atomspace_Type __pyx_v_type;
};



/* "../../../../opencog/cython/opencog/truth_value.pyx":5
 * from atomspace cimport cTruthValue, tv_ptr
 * 
 * cdef class TruthValue:             # <<<<<<<<<<<<<<
 *     """ The truth value represents the strength and confidence of
 *         a relationship or term. In OpenCog there are a number of TruthValue
 */

struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue {
  PyObject *(*_mean)(struct __pyx_obj_7opencog_9atomspace_TruthValue *);
  PyObject *(*_confidence)(struct __pyx_obj_7opencog_9atomspace_TruthValue *);
  PyObject *(*_count)(struct __pyx_obj_7opencog_9atomspace_TruthValue *);
  const opencog::TruthValue *(*_ptr)(struct __pyx_obj_7opencog_9atomspace_TruthValue *);
  std::shared_ptr<const opencog::TruthValue> *(*_tvptr)(struct __pyx_obj_7opencog_9atomspace_TruthValue *);
  PyObject *(*_init)(struct __pyx_obj_7opencog_9atomspace_TruthValue *, float, float);
};
static struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *__pyx_vtabptr_7opencog_9atomspace_TruthValue;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#include <string>

static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

#define __Pyx_ReturnWithStopIteration(value)\
    if (value == Py_None) PyErr_SetNone(PyExc_StopIteration); else __Pyx__ReturnWithStopIteration(value)
static void __Pyx__ReturnWithStopIteration(PyObject* value);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

#include <string.h>

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

#include <new>

#include "descrobject.h"
static PyObject* __Pyx_Method_ClassMethod(PyObject *method);

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(PyTypeObject *type, __pyx_coroutine_body_t body,
                                                   PyObject *closure, PyObject *name, PyObject *qualname);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

static int __Pyx_patch_abc(void);

#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_7opencog_9atomspace_10TruthValue__mean(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7opencog_9atomspace_10TruthValue__confidence(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7opencog_9atomspace_10TruthValue__count(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7opencog_9atomspace_10TruthValue__init(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self, float __pyx_v_mean, float __pyx_v_confidence); /* proto*/
static const opencog::TruthValue *__pyx_f_7opencog_9atomspace_10TruthValue__ptr(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto*/
static std::shared_ptr<const opencog::TruthValue> *__pyx_f_7opencog_9atomspace_10TruthValue__tvptr(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'opencog.nameserver' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'opencog.atomspace' */
static PyTypeObject *__pyx_ptype_7opencog_9atomspace_TruthValue = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace_Atom = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace_AtomSpace = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace___pyx_scope_struct_5___get__ = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type = 0;
static PyObject *__pyx_f_7opencog_9atomspace_AtomSpace_factory(opencog::AtomSpace *); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_c_get_type_name(__pyx_t_7opencog_9atomspace_Type); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_c_get_named_type(PyObject *); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_generate_type_module(void); /*proto*/
static std::string __pyx_f_7opencog_9atomspace_get_path_as_string(void); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(std::vector<opencog::Handle> , struct __pyx_obj_7opencog_9atomspace_AtomSpace *); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_py_atomspace(opencog::AtomSpace *); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_py_atom(PANDLE, PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "opencog.atomspace"
int __pyx_module_is_main_opencog__atomspace = 0;

/* Implementation of 'opencog.atomspace' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_hex;
static char __pyx_k_[] = "";
static char __pyx_k_a[] = "a";
static char __pyx_k_t[] = "t";
static char __pyx_k__9[] = ">\n";
static char __pyx_k_t1[] = "t1";
static char __pyx_k_t2[] = "t2";
static char __pyx_k_tv[] = "tv";
static char __pyx_k_get[] = "__get__";
static char __pyx_k_hex[] = "hex";
static char __pyx_k_lti[] = "lti";
static char __pyx_k_out[] = "out";
static char __pyx_k_sti[] = "sti";
static char __pyx_k_sys[] = "sys";
static char __pyx_k_Link[] = "Link";
static char __pyx_k_Node[] = "Node";
static char __pyx_k_addr[] = "addr";
static char __pyx_k_args[] = "args";
static char __pyx_k_atom[] = "atom";
static char __pyx_k_is_a[] = "is_a";
static char __pyx_k_lptr[] = "lptr";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_mean[] = "mean";
static char __pyx_k_name[] = "name";
static char __pyx_k_owns[] = "\n   owns: ";
static char __pyx_k_path[] = "path";
static char __pyx_k_send[] = "send";
static char __pyx_k_size[] = "size";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_type[] = "type";
static char __pyx_k_vlti[] = "vlti";
static char __pyx_k_UTF_8[] = "UTF-8";
static char __pyx_k_close[] = "close";
static char __pyx_k_count[] = "count";
static char __pyx_k_range[] = "range";
static char __pyx_k_throw[] = "throw";
static char __pyx_k_types[] = "types";
static char __pyx_k_addr_2[] = "   addr: ";
static char __pyx_k_decode[] = "decode";
static char __pyx_k_encode[] = "encode";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_target[] = "target";
static char __pyx_k_NO_TYPE[] = "NO_TYPE";
static char __pyx_k_get_out[] = "get_out";
static char __pyx_k_subtype[] = "subtype";
static char __pyx_k_add_link[] = "add_link";
static char __pyx_k_add_node[] = "add_node";
static char __pyx_k_get_type[] = "get_type";
static char __pyx_k_incoming[] = "incoming";
static char __pyx_k_is_valid[] = "is_valid";
static char __pyx_k_outgoing[] = "outgoing";
static char __pyx_k_strength[] = "strength";
static char __pyx_k_Atomspace[] = "<Atomspace\n";
static char __pyx_k_TypeError[] = "TypeError";
static char __pyx_k_atom_name[] = "atom_name";
static char __pyx_k_predicate[] = "predicate";
static char __pyx_k_recursive[] = "recursive";
static char __pyx_k_Atom___get[] = "Atom.__get__";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_atom_types[] = "atom_types";
static char __pyx_k_confidence[] = "confidence";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_subclasses[] = "subclasses";
static char __pyx_k_long_string[] = "long_string";
static char __pyx_k_lower_bound[] = "lower_bound";
static char __pyx_k_upper_bound[] = "upper_bound";
static char __pyx_k_Unknown_Type[] = "*** Unknown Type! ***";
static char __pyx_k_PredicateNode[] = "PredicateNode";
static char __pyx_k_get_type_name[] = "get_type_name";
static char __pyx_k_AssertionError[] = "AssertionError";
static char __pyx_k_NotImplemented[] = "NotImplemented";
static char __pyx_k_decrement_vlti[] = "decrement_vlti";
static char __pyx_k_increment_vlti[] = "increment_vlti";
static char __pyx_k_predicate_type[] = "predicate_type";
static char __pyx_k_xget_predicates[] = "xget_predicates";
static char __pyx_k_Need_Atom_object[] = "Need Atom object";
static char __pyx_k_include_incoming[] = "include_incoming";
static char __pyx_k_include_outgoing[] = "include_outgoing";
static char __pyx_k_xget_atoms_by_av[] = "xget_atoms_by_av";
static char __pyx_k_get_atoms_by_type[] = "get_atoms_by_type";
static char __pyx_k_opencog_atomspace[] = "opencog.atomspace";
static char __pyx_k_xincoming_by_type[] = "xincoming_by_type";
static char __pyx_k_xget_atoms_by_type[] = "xget_atoms_by_type";
static char __pyx_k_get_refreshed_types[] = "get_refreshed_types";
static char __pyx_k_xget_predicates_for[] = "xget_predicates_for";
static char __pyx_k_Atom_xincoming_by_type[] = "Atom.xincoming_by_type";
static char __pyx_k_Links_can_t_have_names[] = "Links can't have names";
static char __pyx_k_AtomSpace_xget_predicates[] = "AtomSpace.xget_predicates";
static char __pyx_k_AtomSpace_xget_atoms_by_av[] = "AtomSpace.xget_atoms_by_av";
static char __pyx_k_AtomSpace_xget_atoms_by_type[] = "AtomSpace.xget_atoms_by_type";
static char __pyx_k_AtomSpace_xget_predicates_for[] = "AtomSpace.xget_predicates_for";
static char __pyx_k_Nodes_can_t_have_outgoing_sets[] = "Nodes can't have outgoing sets";
static char __pyx_k_root_OPENCOG_atomspace_opencog[] = "/root/OPENCOG/atomspace/opencog/cython/opencog/nameserver.pyx";
static char __pyx_k_TruthValue_does_not_yet_support[] = "TruthValue does not yet support most comparison operators";
static char __pyx_k_xget_atoms_in_attentional_focus[] = "xget_atoms_in_attentional_focus";
static char __pyx_k_AtomSpace_xget_atoms_in_attentio[] = "AtomSpace.xget_atoms_in_attentional_focus";
static char __pyx_k_Got_blank_type_name_while_genera[] = "Got blank type name while generating types module";
static char __pyx_k_atom_av_property_needs_a_TruthVa[] = "atom.av property needs a TruthValue object";
static char __pyx_k_atom_av_property_needs_a_diction[] = "atom.av property needs a dictionary object";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_AssertionError;
static PyObject *__pyx_n_s_AtomSpace_xget_atoms_by_av;
static PyObject *__pyx_n_s_AtomSpace_xget_atoms_by_type;
static PyObject *__pyx_n_s_AtomSpace_xget_atoms_in_attentio;
static PyObject *__pyx_n_s_AtomSpace_xget_predicates;
static PyObject *__pyx_n_s_AtomSpace_xget_predicates_for;
static PyObject *__pyx_n_s_Atom___get;
static PyObject *__pyx_n_s_Atom_xincoming_by_type;
static PyObject *__pyx_kp_s_Atomspace;
static PyObject *__pyx_kp_s_Got_blank_type_name_while_genera;
static PyObject *__pyx_n_s_Link;
static PyObject *__pyx_kp_s_Links_can_t_have_names;
static PyObject *__pyx_n_s_NO_TYPE;
static PyObject *__pyx_kp_s_Need_Atom_object;
static PyObject *__pyx_n_s_Node;
static PyObject *__pyx_kp_s_Nodes_can_t_have_outgoing_sets;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_n_s_PredicateNode;
static PyObject *__pyx_kp_s_TruthValue_does_not_yet_support;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_UTF_8;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__9;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_add_link;
static PyObject *__pyx_n_s_add_node;
static PyObject *__pyx_n_s_addr;
static PyObject *__pyx_kp_s_addr_2;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_atom;
static PyObject *__pyx_kp_s_atom_av_property_needs_a_TruthVa;
static PyObject *__pyx_kp_s_atom_av_property_needs_a_diction;
static PyObject *__pyx_n_s_atom_name;
static PyObject *__pyx_n_s_atom_types;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_confidence;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_decrement_vlti;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_atoms_by_type;
static PyObject *__pyx_n_s_get_out;
static PyObject *__pyx_n_s_get_refreshed_types;
static PyObject *__pyx_n_s_get_type;
static PyObject *__pyx_n_s_get_type_name;
static PyObject *__pyx_n_s_hex;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_include_incoming;
static PyObject *__pyx_n_s_include_outgoing;
static PyObject *__pyx_n_s_incoming;
static PyObject *__pyx_n_s_increment_vlti;
static PyObject *__pyx_n_s_is_a;
static PyObject *__pyx_n_s_is_valid;
static PyObject *__pyx_n_s_long_string;
static PyObject *__pyx_n_s_lower_bound;
static PyObject *__pyx_n_s_lptr;
static PyObject *__pyx_n_s_lti;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mean;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_opencog_atomspace;
static PyObject *__pyx_n_s_out;
static PyObject *__pyx_n_s_outgoing;
static PyObject *__pyx_kp_s_owns;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_predicate;
static PyObject *__pyx_n_s_predicate_type;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_recursive;
static PyObject *__pyx_kp_s_root_OPENCOG_atomspace_opencog;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sti;
static PyObject *__pyx_n_s_strength;
static PyObject *__pyx_n_s_subclasses;
static PyObject *__pyx_n_s_subtype;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_t1;
static PyObject *__pyx_n_s_t2;
static PyObject *__pyx_n_s_target;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tv;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_types;
static PyObject *__pyx_n_s_upper_bound;
static PyObject *__pyx_n_s_vlti;
static PyObject *__pyx_n_s_xget_atoms_by_av;
static PyObject *__pyx_n_s_xget_atoms_by_type;
static PyObject *__pyx_n_s_xget_atoms_in_attentional_focus;
static PyObject *__pyx_n_s_xget_predicates;
static PyObject *__pyx_n_s_xget_predicates_for;
static PyObject *__pyx_n_s_xincoming_by_type;
static PyObject *__pyx_pf_7opencog_9atomspace_get_type_name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_2get_type(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4is_a(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t1, __pyx_t_7opencog_9atomspace_Type __pyx_v_t2); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_6get_refreshed_types(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_7opencog_9atomspace_10TruthValue___cinit__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self, PyObject *__pyx_v_strength, PyObject *__pyx_v_confidence); /* proto */
static void __pyx_pf_7opencog_9atomspace_10TruthValue_2__dealloc__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_4mean___get__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_10confidence___get__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_5count___get__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_4__richcmp__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_h1, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_h2, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_6truth_value_ptr_object(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_8__str__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_10__repr__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto */
static int __pyx_pf_7opencog_9atomspace_9AtomSpace___cinit__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static int __pyx_pf_7opencog_9atomspace_9AtomSpace_2__init__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, long __pyx_v_addr); /* proto */
static void __pyx_pf_7opencog_9atomspace_9AtomSpace_4__dealloc__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_6__richcmp__(PyObject *__pyx_v_as_1, PyObject *__pyx_v_as_2, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_8add(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_name, PyObject *__pyx_v_out, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_10add_node(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_atom_name, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_12add_link(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_outgoing, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_14is_valid(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, PyObject *__pyx_v_atom); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_16remove(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom, PyObject *__pyx_v_recursive); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_18clear(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static int __pyx_pf_7opencog_9atomspace_9AtomSpace_20__contains__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, PyObject *__pyx_v_atom); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_22__str__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_7opencog_9atomspace_9AtomSpace_24__len__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_26__iter__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_28size(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_30get_atoms_by_type(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_subtype); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_32xget_atoms_by_type(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_subtype); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_35get_atoms_by_av(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, PyObject *__pyx_v_lower_bound, PyObject *__pyx_v_upper_bound); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_37xget_atoms_by_av(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, PyObject *__pyx_v_lower_bound, PyObject *__pyx_v_upper_bound); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_40get_atoms_in_attentional_focus(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_42xget_atoms_in_attentional_focus(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_45get_predicates(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target, __pyx_t_7opencog_9atomspace_Type __pyx_v_predicate_type, PyObject *__pyx_v_subclasses); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_47xget_predicates(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target, __pyx_t_7opencog_9atomspace_Type __pyx_v_predicate_type, PyObject *__pyx_v_subclasses); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_50get_predicates_for(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_predicate); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_52xget_predicates_for(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_predicate); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_55include_incoming(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atoms); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_57include_outgoing(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atoms); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_59print_list(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static int __pyx_pf_7opencog_9atomspace_4Atom___cinit__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PANDLE __pyx_v_lptr, CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_a); /* proto */
static void __pyx_pf_7opencog_9atomspace_4Atom_2__dealloc__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_7opencog_9atomspace_4Atom_4__init__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, CYTHON_UNUSED PANDLE __pyx_v_lptr, struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_a); /* proto */
static int __pyx_pf_7opencog_9atomspace_4Atom_6__nonzero__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_9atomspace___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_4name___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_2tv___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_7opencog_9atomspace_4Atom_2tv_2__set__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_truth_value); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_2av___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_7opencog_9atomspace_4Atom_2av_2__set__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_av_dict); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_3sti___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_7opencog_9atomspace_4Atom_3sti_2__set__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_3lti___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_7opencog_9atomspace_4Atom_3lti_2__set__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_4vlti___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_7opencog_9atomspace_4Atom_4vlti_2__set__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_8increment_vlti(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_10decrement_vlti(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_12get_out(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_3out___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_5arity___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_8incoming___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_9xincoming___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_14incoming_by_type(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_type); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_16xincoming_by_type(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_type); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_4type___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_9type_name___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_1t___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_19truth_value(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_mean, PyObject *__pyx_v_count); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_21handle_ptr(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_23is_node(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_25is_link(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_27is_a(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_29long_string(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_31__str__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_33__repr__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_35__richcmp__(PyObject *__pyx_v_a1_, PyObject *__pyx_v_a2_, int __pyx_v_op); /* proto */
#if PY_MAJOR_VERSION < 3
static int __pyx_pf_7opencog_9atomspace_4Atom_37__cmp__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_a1_, PyObject *__pyx_v_a2_); /* proto */
#endif
static Py_hash_t __pyx_pf_7opencog_9atomspace_4Atom_39__hash__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_a1); /* proto */
static PyObject *__pyx_tp_new_7opencog_9atomspace_TruthValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace_Atom(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace_AtomSpace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_5___get__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static __pyx_t_7opencog_9atomspace_Type __pyx_k__11;
static __pyx_t_7opencog_9atomspace_Type __pyx_k__12;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__21;

/* "../../../../opencog/cython/opencog/nameserver.pyx":11
 * 
 * # Given a numeric type, look up the string name.
 * cdef c_get_type_name(Type t):             # <<<<<<<<<<<<<<
 *     # cdef cNameServer ns
 *     # ns = nameserver()
 */

static PyObject *__pyx_f_7opencog_9atomspace_c_get_type_name(__pyx_t_7opencog_9atomspace_Type __pyx_v_t) {
  std::string __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_type_name", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":15
 *     # ns = nameserver()
 *     cdef string s
 *     s = nameserver().getTypeName(t)             # <<<<<<<<<<<<<<
 * 
 *     if 0 == strcmp(s.c_str(), "*** Unknown Type! ***") :
 */
  __pyx_v_s = opencog::nameserver().getTypeName(__pyx_v_t);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":17
 *     s = nameserver().getTypeName(t)
 * 
 *     if 0 == strcmp(s.c_str(), "*** Unknown Type! ***") :             # <<<<<<<<<<<<<<
 *         s = string("")
 *     return s.c_str()
 */
  __pyx_t_1 = ((0 == strcmp(__pyx_v_s.c_str(), __pyx_k_Unknown_Type)) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/nameserver.pyx":18
 * 
 *     if 0 == strcmp(s.c_str(), "*** Unknown Type! ***") :
 *         s = string("")             # <<<<<<<<<<<<<<
 *     return s.c_str()
 * 
 */
    __pyx_v_s = std::string(__pyx_k_);

    /* "../../../../opencog/cython/opencog/nameserver.pyx":17
 *     s = nameserver().getTypeName(t)
 * 
 *     if 0 == strcmp(s.c_str(), "*** Unknown Type! ***") :             # <<<<<<<<<<<<<<
 *         s = string("")
 *     return s.c_str()
 */
  }

  /* "../../../../opencog/cython/opencog/nameserver.pyx":19
 *     if 0 == strcmp(s.c_str(), "*** Unknown Type! ***") :
 *         s = string("")
 *     return s.c_str()             # <<<<<<<<<<<<<<
 * 
 * # Given the string name, look up the numeric type.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_s.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":11
 * 
 * # Given a numeric type, look up the string name.
 * cdef c_get_type_name(Type t):             # <<<<<<<<<<<<<<
 *     # cdef cNameServer ns
 *     # ns = nameserver()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.c_get_type_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":22
 * 
 * # Given the string name, look up the numeric type.
 * cdef c_get_named_type(str type_name):             # <<<<<<<<<<<<<<
 *     return nameserver().getType(type_name.encode('UTF-8'))
 * 
 */

static PyObject *__pyx_f_7opencog_9atomspace_c_get_named_type(PyObject *__pyx_v_type_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_named_type", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":23
 * # Given the string name, look up the numeric type.
 * cdef c_get_named_type(str type_name):
 *     return nameserver().getType(type_name.encode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 * # Atom type methods.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_type_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_short(opencog::nameserver().getType(__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":22
 * 
 * # Given the string name, look up the numeric type.
 * cdef c_get_named_type(str type_name):             # <<<<<<<<<<<<<<
 *     return nameserver().getType(type_name.encode('UTF-8'))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.c_get_named_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":26
 * 
 * # Atom type methods.
 * def get_type_name(t):             # <<<<<<<<<<<<<<
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_1get_type_name(PyObject *__pyx_self, PyObject *__pyx_v_t); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_1get_type_name = {"get_type_name", (PyCFunction)__pyx_pw_7opencog_9atomspace_1get_type_name, METH_O, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_1get_type_name(PyObject *__pyx_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_get_type_name(__pyx_self, ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_get_type_name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_7opencog_9atomspace_Type __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_type_name", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":27
 * # Atom type methods.
 * def get_type_name(t):
 *     return c_get_type_name(t).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * def get_type(name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_t); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_f_7opencog_9atomspace_c_get_type_name(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":26
 * 
 * # Atom type methods.
 * def get_type_name(t):             # <<<<<<<<<<<<<<
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.get_type_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":29
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 * def get_type(name):             # <<<<<<<<<<<<<<
 *     return c_get_named_type(name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_3get_type(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_3get_type = {"get_type", (PyCFunction)__pyx_pw_7opencog_9atomspace_3get_type, METH_O, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_3get_type(PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_type (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_2get_type(__pyx_self, ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_2get_type(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_type", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":30
 * 
 * def get_type(name):
 *     return c_get_named_type(name)             # <<<<<<<<<<<<<<
 * 
 * def is_a(Type t1, Type t2):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyString_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_name)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_c_get_named_type(((PyObject*)__pyx_v_name)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":29
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 * def get_type(name):             # <<<<<<<<<<<<<<
 *     return c_get_named_type(name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.get_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":32
 *     return c_get_named_type(name)
 * 
 * def is_a(Type t1, Type t2):             # <<<<<<<<<<<<<<
 *     return nameserver().isA(t1,t2)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5is_a(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_5is_a = {"is_a", (PyCFunction)__pyx_pw_7opencog_9atomspace_5is_a, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_5is_a(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t1;
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_a (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t1,&__pyx_n_s_t2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_a", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_a") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_t1 = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t1 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_t2 = __Pyx_PyInt_As_short(values[1]); if (unlikely((__pyx_v_t2 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_a", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.is_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_4is_a(__pyx_self, __pyx_v_t1, __pyx_v_t2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4is_a(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t1, __pyx_t_7opencog_9atomspace_Type __pyx_v_t2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_a", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":33
 * 
 * def is_a(Type t1, Type t2):
 *     return nameserver().isA(t1,t2)             # <<<<<<<<<<<<<<
 * 
 * # From Roger's suggestion:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(opencog::nameserver().isA(__pyx_v_t1, __pyx_v_t2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":32
 *     return c_get_named_type(name)
 * 
 * def is_a(Type t1, Type t2):             # <<<<<<<<<<<<<<
 *     return nameserver().isA(t1,t2)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.is_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":44
 * 
 * types = {}
 * cdef generate_type_module():             # <<<<<<<<<<<<<<
 *     global types
 *     types = {}
 */

static PyObject *__pyx_f_7opencog_9atomspace_generate_type_module(void) {
  std::string __pyx_v_s;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_7opencog_9atomspace_Type __pyx_t_2;
  long __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_type_module", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":46
 * cdef generate_type_module():
 *     global types
 *     types = {}             # <<<<<<<<<<<<<<
 *     cdef string s
 *     # print "Class server has num types=", nameserver().getNumberOfClasses()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":49
 *     cdef string s
 *     # print "Class server has num types=", nameserver().getNumberOfClasses()
 *     for i in range(0, nameserver().getNumberOfClasses()):             # <<<<<<<<<<<<<<
 *         s = nameserver().getTypeName(i)
 *         assert s.size() > 0, "Got blank type name while generating types module"
 */
  __pyx_t_2 = opencog::nameserver().getNumberOfClasses();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "../../../../opencog/cython/opencog/nameserver.pyx":50
 *     # print "Class server has num types=", nameserver().getNumberOfClasses()
 *     for i in range(0, nameserver().getNumberOfClasses()):
 *         s = nameserver().getTypeName(i)             # <<<<<<<<<<<<<<
 *         assert s.size() > 0, "Got blank type name while generating types module"
 *         types[string(s.c_str()).decode('UTF-8')] = i
 */
    __pyx_v_s = opencog::nameserver().getTypeName(__pyx_v_i);

    /* "../../../../opencog/cython/opencog/nameserver.pyx":51
 *     for i in range(0, nameserver().getNumberOfClasses()):
 *         s = nameserver().getTypeName(i)
 *         assert s.size() > 0, "Got blank type name while generating types module"             # <<<<<<<<<<<<<<
 *         types[string(s.c_str()).decode('UTF-8')] = i
 *         # print "type ", i, " has name ", s
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!((__pyx_v_s.size() > 0) != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Got_blank_type_name_while_genera);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif

    /* "../../../../opencog/cython/opencog/nameserver.pyx":52
 *         s = nameserver().getTypeName(i)
 *         assert s.size() > 0, "Got blank type name while generating types module"
 *         types[string(s.c_str()).decode('UTF-8')] = i             # <<<<<<<<<<<<<<
 *         # print "type ", i, " has name ", s
 *     types["NO_TYPE"] = NOTYPE
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_decode_cpp_string(std::string(__pyx_v_s.c_str()), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyObject_SetItem(__pyx_t_4, __pyx_t_5, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../../../../opencog/cython/opencog/nameserver.pyx":54
 *         types[string(s.c_str()).decode('UTF-8')] = i
 *         # print "type ", i, " has name ", s
 *     types["NO_TYPE"] = NOTYPE             # <<<<<<<<<<<<<<
 *     return types
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_short(opencog::NOTYPE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_n_s_NO_TYPE, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":55
 *         # print "type ", i, " has name ", s
 *     types["NO_TYPE"] = NOTYPE
 *     return types             # <<<<<<<<<<<<<<
 * 
 * types = type('atom_types', (), generate_type_module())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":44
 * 
 * types = {}
 * cdef generate_type_module():             # <<<<<<<<<<<<<<
 *     global types
 *     types = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.generate_type_module", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":63
 * #And you can refresh these new types by this function
 * 
 * def get_refreshed_types():             # <<<<<<<<<<<<<<
 *     global types
 *     types = type('atom_types', (), generate_type_module())
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_7get_refreshed_types(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_7get_refreshed_types = {"get_refreshed_types", (PyCFunction)__pyx_pw_7opencog_9atomspace_7get_refreshed_types, METH_NOARGS, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_7get_refreshed_types(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_refreshed_types (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_6get_refreshed_types(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_6get_refreshed_types(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_refreshed_types", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":65
 * def get_refreshed_types():
 *     global types
 *     types = type('atom_types', (), generate_type_module())             # <<<<<<<<<<<<<<
 *     return types
 */
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_generate_type_module(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_atom_types);
  __Pyx_GIVEREF(__pyx_n_s_atom_types);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_atom_types);
  __Pyx_INCREF(__pyx_empty_tuple);
  __Pyx_GIVEREF(__pyx_empty_tuple);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_empty_tuple);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyType_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":66
 *     global types
 *     types = type('atom_types', (), generate_type_module())
 *     return types             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":63
 * #And you can refresh these new types by this function
 * 
 * def get_refreshed_types():             # <<<<<<<<<<<<<<
 *     global types
 *     types = type('atom_types', (), generate_type_module())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.get_refreshed_types", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":17
 *     # cdef tv_ptr *cobj
 * 
 *     def __cinit__(self, strength=1.0, confidence=0.0):             # <<<<<<<<<<<<<<
 *         # By default create a SimpleTruthValue
 *         self.cobj = new tv_ptr(new cSimpleTruthValue(strength, confidence))
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_10TruthValue_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opencog_9atomspace_10TruthValue_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strength = 0;
  PyObject *__pyx_v_confidence = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strength,&__pyx_n_s_confidence,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_float_1_0);
    values[1] = ((PyObject *)__pyx_float_0_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_strength);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_confidence);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_strength = values[0];
    __pyx_v_confidence = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue___cinit__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self), __pyx_v_strength, __pyx_v_confidence);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_10TruthValue___cinit__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self, PyObject *__pyx_v_strength, PyObject *__pyx_v_confidence) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":19
 *     def __cinit__(self, strength=1.0, confidence=0.0):
 *         # By default create a SimpleTruthValue
 *         self.cobj = new tv_ptr(new cSimpleTruthValue(strength, confidence))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_strength); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_confidence); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->cobj = new std::shared_ptr<const opencog::TruthValue>(new opencog::SimpleTruthValue(__pyx_t_1, __pyx_t_2));

  /* "../../../../opencog/cython/opencog/truth_value.pyx":17
 *     # cdef tv_ptr *cobj
 * 
 *     def __cinit__(self, strength=1.0, confidence=0.0):             # <<<<<<<<<<<<<<
 *         # By default create a SimpleTruthValue
 *         self.cobj = new tv_ptr(new cSimpleTruthValue(strength, confidence))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":21
 *         self.cobj = new tv_ptr(new cSimpleTruthValue(strength, confidence))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         # This deletes the *smart pointer*, not the actual pointer
 *         del self.cobj
 */

/* Python wrapper */
static void __pyx_pw_7opencog_9atomspace_10TruthValue_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7opencog_9atomspace_10TruthValue_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7opencog_9atomspace_10TruthValue_2__dealloc__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7opencog_9atomspace_10TruthValue_2__dealloc__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":23
 *     def __dealloc__(self):
 *         # This deletes the *smart pointer*, not the actual pointer
 *         del self.cobj             # <<<<<<<<<<<<<<
 * 
 *     property mean:
 */
  delete __pyx_v_self->cobj;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":21
 *         self.cobj = new tv_ptr(new cSimpleTruthValue(strength, confidence))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         # This deletes the *smart pointer*, not the actual pointer
 *         del self.cobj
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":26
 * 
 *     property mean:
 *         def __get__(self): return self._mean()             # <<<<<<<<<<<<<<
 * 
 *     property confidence:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_4mean_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_4mean_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue_4mean___get__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_4mean___get__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_vtab)->_mean(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.mean.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":29
 * 
 *     property confidence:
 *         def __get__(self): return self._confidence()             # <<<<<<<<<<<<<<
 * 
 *     property count:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_10confidence_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_10confidence_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue_10confidence___get__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_10confidence___get__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_vtab)->_confidence(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.confidence.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":32
 * 
 *     property count:
 *         def __get__(self): return self._count()             # <<<<<<<<<<<<<<
 * 
 *     cdef _mean(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_5count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_5count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue_5count___get__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_5count___get__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_vtab)->_count(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":34
 *         def __get__(self): return self._count()
 * 
 *     cdef _mean(self):             # <<<<<<<<<<<<<<
 *         return self._ptr().get_mean()
 * 
 */

static PyObject *__pyx_f_7opencog_9atomspace_10TruthValue__mean(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mean", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":35
 * 
 *     cdef _mean(self):
 *         return self._ptr().get_mean()             # <<<<<<<<<<<<<<
 * 
 *     cdef _confidence(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_vtab)->_ptr(__pyx_v_self)->get_mean()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":34
 *         def __get__(self): return self._count()
 * 
 *     cdef _mean(self):             # <<<<<<<<<<<<<<
 *         return self._ptr().get_mean()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue._mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":37
 *         return self._ptr().get_mean()
 * 
 *     cdef _confidence(self):             # <<<<<<<<<<<<<<
 *         return self._ptr().get_confidence()
 * 
 */

static PyObject *__pyx_f_7opencog_9atomspace_10TruthValue__confidence(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_confidence", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":38
 * 
 *     cdef _confidence(self):
 *         return self._ptr().get_confidence()             # <<<<<<<<<<<<<<
 * 
 *     cdef _count(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_vtab)->_ptr(__pyx_v_self)->get_confidence()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":37
 *         return self._ptr().get_mean()
 * 
 *     cdef _confidence(self):             # <<<<<<<<<<<<<<
 *         return self._ptr().get_confidence()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue._confidence", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":40
 *         return self._ptr().get_confidence()
 * 
 *     cdef _count(self):             # <<<<<<<<<<<<<<
 *         return self._ptr().get_count()
 * 
 */

static PyObject *__pyx_f_7opencog_9atomspace_10TruthValue__count(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_count", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":41
 * 
 *     cdef _count(self):
 *         return self._ptr().get_count()             # <<<<<<<<<<<<<<
 * 
 *     cdef _init(self, float mean, float confidence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_vtab)->_ptr(__pyx_v_self)->get_count()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":40
 *         return self._ptr().get_confidence()
 * 
 *     cdef _count(self):             # <<<<<<<<<<<<<<
 *         return self._ptr().get_count()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue._count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":43
 *         return self._ptr().get_count()
 * 
 *     cdef _init(self, float mean, float confidence):             # <<<<<<<<<<<<<<
 *         self.cobj = new tv_ptr(new cSimpleTruthValue(mean, confidence))
 * 
 */

static PyObject *__pyx_f_7opencog_9atomspace_10TruthValue__init(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self, float __pyx_v_mean, float __pyx_v_confidence) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":44
 * 
 *     cdef _init(self, float mean, float confidence):
 *         self.cobj = new tv_ptr(new cSimpleTruthValue(mean, confidence))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(TruthValue h1, TruthValue h2, int op):
 */
  __pyx_v_self->cobj = new std::shared_ptr<const opencog::TruthValue>(new opencog::SimpleTruthValue(__pyx_v_mean, __pyx_v_confidence));

  /* "../../../../opencog/cython/opencog/truth_value.pyx":43
 *         return self._ptr().get_count()
 * 
 *     cdef _init(self, float mean, float confidence):             # <<<<<<<<<<<<<<
 *         self.cobj = new tv_ptr(new cSimpleTruthValue(mean, confidence))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":46
 *         self.cobj = new tv_ptr(new cSimpleTruthValue(mean, confidence))
 * 
 *     def __richcmp__(TruthValue h1, TruthValue h2, int op):             # <<<<<<<<<<<<<<
 *         " @todo support the rest of the comparison operators"
 *         if op == 2: # ==
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_5__richcmp__(PyObject *__pyx_v_h1, PyObject *__pyx_v_h2, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_5__richcmp__(PyObject *__pyx_v_h1, PyObject *__pyx_v_h2, int __pyx_v_op) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_h1), __pyx_ptype_7opencog_9atomspace_TruthValue, 1, "h1", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_h2), __pyx_ptype_7opencog_9atomspace_TruthValue, 1, "h2", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue_4__richcmp__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_h1), ((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_h2), ((int)__pyx_v_op));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_4__richcmp__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_h1, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_h2, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":48
 *     def __richcmp__(TruthValue h1, TruthValue h2, int op):
 *         " @todo support the rest of the comparison operators"
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return deref(h1._ptr()) == deref(h2._ptr())
 * 
 */
  __pyx_t_1 = ((__pyx_v_op == 2) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/truth_value.pyx":49
 *         " @todo support the rest of the comparison operators"
 *         if op == 2: # ==
 *             return deref(h1._ptr()) == deref(h2._ptr())             # <<<<<<<<<<<<<<
 * 
 *         raise ValueError, "TruthValue does not yet support most comparison operators"
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(((*((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_h1->__pyx_vtab)->_ptr(__pyx_v_h1)) == (*((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_h2->__pyx_vtab)->_ptr(__pyx_v_h2)))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/truth_value.pyx":48
 *     def __richcmp__(TruthValue h1, TruthValue h2, int op):
 *         " @todo support the rest of the comparison operators"
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return deref(h1._ptr()) == deref(h2._ptr())
 * 
 */
  }

  /* "../../../../opencog/cython/opencog/truth_value.pyx":51
 *             return deref(h1._ptr()) == deref(h2._ptr())
 * 
 *         raise ValueError, "TruthValue does not yet support most comparison operators"             # <<<<<<<<<<<<<<
 * 
 *     cdef cTruthValue* _ptr(self):
 */
  __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_TruthValue_does_not_yet_support, 0, 0);
  {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "../../../../opencog/cython/opencog/truth_value.pyx":46
 *         self.cobj = new tv_ptr(new cSimpleTruthValue(mean, confidence))
 * 
 *     def __richcmp__(TruthValue h1, TruthValue h2, int op):             # <<<<<<<<<<<<<<
 *         " @todo support the rest of the comparison operators"
 *         if op == 2: # ==
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":53
 *         raise ValueError, "TruthValue does not yet support most comparison operators"
 * 
 *     cdef cTruthValue* _ptr(self):             # <<<<<<<<<<<<<<
 *         return self.cobj.get()
 * 
 */

static const opencog::TruthValue *__pyx_f_7opencog_9atomspace_10TruthValue__ptr(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  const opencog::TruthValue *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_ptr", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":54
 * 
 *     cdef cTruthValue* _ptr(self):
 *         return self.cobj.get()             # <<<<<<<<<<<<<<
 * 
 *     cdef tv_ptr* _tvptr(self):
 */
  __pyx_r = __pyx_v_self->cobj->get();
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":53
 *         raise ValueError, "TruthValue does not yet support most comparison operators"
 * 
 *     cdef cTruthValue* _ptr(self):             # <<<<<<<<<<<<<<
 *         return self.cobj.get()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":56
 *         return self.cobj.get()
 * 
 *     cdef tv_ptr* _tvptr(self):             # <<<<<<<<<<<<<<
 *         return self.cobj
 * 
 */

static std::shared_ptr<const opencog::TruthValue> *__pyx_f_7opencog_9atomspace_10TruthValue__tvptr(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  std::shared_ptr<const opencog::TruthValue> *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_tvptr", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":57
 * 
 *     cdef tv_ptr* _tvptr(self):
 *         return self.cobj             # <<<<<<<<<<<<<<
 * 
 *     def truth_value_ptr_object(self):
 */
  __pyx_r = __pyx_v_self->cobj;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":56
 *         return self.cobj.get()
 * 
 *     cdef tv_ptr* _tvptr(self):             # <<<<<<<<<<<<<<
 *         return self.cobj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":59
 *         return self.cobj
 * 
 *     def truth_value_ptr_object(self):             # <<<<<<<<<<<<<<
 *         return PyLong_FromVoidPtr(<void*>self.cobj)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_7truth_value_ptr_object(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_7truth_value_ptr_object(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("truth_value_ptr_object (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue_6truth_value_ptr_object(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_6truth_value_ptr_object(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("truth_value_ptr_object", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":60
 * 
 *     def truth_value_ptr_object(self):
 *         return PyLong_FromVoidPtr(<void*>self.cobj)             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromVoidPtr(((void *)__pyx_v_self->cobj)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":59
 *         return self.cobj
 * 
 *     def truth_value_ptr_object(self):             # <<<<<<<<<<<<<<
 *         return PyLong_FromVoidPtr(<void*>self.cobj)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.truth_value_ptr_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":62
 *         return PyLong_FromVoidPtr(<void*>self.cobj)
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         cs = string(self._ptr().to_string().c_str())
 *         return cs.decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_9__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_9__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue_8__str__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_8__str__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_v_cs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":63
 * 
 *     def __str__(self):
 *         cs = string(self._ptr().to_string().c_str())             # <<<<<<<<<<<<<<
 *         return cs.decode('UTF-8')
 * 
 */
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(std::string(((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_vtab)->_ptr(__pyx_v_self)->to_string().c_str())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":64
 *     def __str__(self):
 *         cs = string(self._ptr().to_string().c_str())
 *         return cs.decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cs, __pyx_n_s_decode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":62
 *         return PyLong_FromVoidPtr(<void*>self.cobj)
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         cs = string(self._ptr().to_string().c_str())
 *         return cs.decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":66
 *         return cs.decode('UTF-8')
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         cs = string(self._ptr().to_string().c_str())
 *         return cs.decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_11__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_11__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue_10__repr__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_10__repr__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_v_cs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":67
 * 
 *     def __repr__(self):
 *         cs = string(self._ptr().to_string().c_str())             # <<<<<<<<<<<<<<
 *         return cs.decode('UTF-8')
 * 
 */
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(std::string(((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_vtab)->_ptr(__pyx_v_self)->to_string().c_str())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":68
 *     def __repr__(self):
 *         cs = string(self._ptr().to_string().c_str())
 *         return cs.decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * #    @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cs, __pyx_n_s_decode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":66
 *         return cs.decode('UTF-8')
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         cs = string(self._ptr().to_string().c_str())
 *         return cs.decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":10
 * # http://wiki.cython.org/PackageHierarchy
 * 
 * cdef api string get_path_as_string() with gil:             # <<<<<<<<<<<<<<
 *     import sys
 *     return str(sys.path).encode('UTF-8')
 */

static std::string __pyx_f_7opencog_9atomspace_get_path_as_string(void) {
  PyObject *__pyx_v_sys = NULL;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("get_path_as_string", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":11
 * 
 * cdef api string get_path_as_string() with gil:
 *     import sys             # <<<<<<<<<<<<<<
 *     return str(sys.path).encode('UTF-8')
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sys = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":12
 * cdef api string get_path_as_string() with gil:
 *     import sys
 *     return str(sys.path).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * cdef convert_handle_seq_to_python_list(vector[cHandle] handles, AtomSpace atomspace):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sys, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":10
 * # http://wiki.cython.org/PackageHierarchy
 * 
 * cdef api string get_path_as_string() with gil:             # <<<<<<<<<<<<<<
 *     import sys
 *     return str(sys.path).encode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("opencog.atomspace.get_path_as_string", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sys);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":14
 *     return str(sys.path).encode('UTF-8')
 * 
 * cdef convert_handle_seq_to_python_list(vector[cHandle] handles, AtomSpace atomspace):             # <<<<<<<<<<<<<<
 *     cdef vector[cHandle].iterator handle_iter
 *     cdef cHandle handle
 */

static PyObject *__pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(std::vector<opencog::Handle>  __pyx_v_handles, struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_atomspace) {
  std::vector<opencog::Handle> ::iterator __pyx_v_handle_iter;
  opencog::Handle __pyx_v_handle;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_handle_seq_to_python_list", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":17
 *     cdef vector[cHandle].iterator handle_iter
 *     cdef cHandle handle
 *     result = []             # <<<<<<<<<<<<<<
 *     handle_iter = handles.begin()
 *     while handle_iter != handles.end():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":18
 *     cdef cHandle handle
 *     result = []
 *     handle_iter = handles.begin()             # <<<<<<<<<<<<<<
 *     while handle_iter != handles.end():
 *         handle = deref(handle_iter)
 */
  __pyx_v_handle_iter = __pyx_v_handles.begin();

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":19
 *     result = []
 *     handle_iter = handles.begin()
 *     while handle_iter != handles.end():             # <<<<<<<<<<<<<<
 *         handle = deref(handle_iter)
 *         result.append(Atom(void_from_candle(handle), atomspace))
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_handle_iter != __pyx_v_handles.end()) != 0);
    if (!__pyx_t_2) break;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":20
 *     handle_iter = handles.begin()
 *     while handle_iter != handles.end():
 *         handle = deref(handle_iter)             # <<<<<<<<<<<<<<
 *         result.append(Atom(void_from_candle(handle), atomspace))
 *         inc(handle_iter)
 */
    __pyx_v_handle = (*__pyx_v_handle_iter);

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":21
 *     while handle_iter != handles.end():
 *         handle = deref(handle_iter)
 *         result.append(Atom(void_from_candle(handle), atomspace))             # <<<<<<<<<<<<<<
 *         inc(handle_iter)
 *     return result
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(void_from_candle(__pyx_v_handle)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_atomspace));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_atomspace));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_atomspace));
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":22
 *         handle = deref(handle_iter)
 *         result.append(Atom(void_from_candle(handle), atomspace))
 *         inc(handle_iter)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    (++__pyx_v_handle_iter);
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":23
 *         result.append(Atom(void_from_candle(handle), atomspace))
 *         inc(handle_iter)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cdef AtomSpace_factory(cAtomSpace *to_wrap):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":14
 *     return str(sys.path).encode('UTF-8')
 * 
 * cdef convert_handle_seq_to_python_list(vector[cHandle] handles, AtomSpace atomspace):             # <<<<<<<<<<<<<<
 *     cdef vector[cHandle].iterator handle_iter
 *     cdef cHandle handle
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.convert_handle_seq_to_python_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":25
 *     return result
 * 
 * cdef AtomSpace_factory(cAtomSpace *to_wrap):             # <<<<<<<<<<<<<<
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)
 *     instance.atomspace = to_wrap
 */

static PyObject *__pyx_f_7opencog_9atomspace_AtomSpace_factory(opencog::AtomSpace *__pyx_v_to_wrap) {
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_instance = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("AtomSpace_factory", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":26
 * 
 * cdef AtomSpace_factory(cAtomSpace *to_wrap):
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)             # <<<<<<<<<<<<<<
 *     instance.atomspace = to_wrap
 *     # print "Debug: atomspace factory={0:x}".format(<long unsigned int>to_wrap)
 */
  __pyx_t_1 = __pyx_tp_new_7opencog_9atomspace_AtomSpace(((PyTypeObject *)__pyx_ptype_7opencog_9atomspace_AtomSpace), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7opencog_9atomspace_AtomSpace)))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_instance = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":27
 * cdef AtomSpace_factory(cAtomSpace *to_wrap):
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)
 *     instance.atomspace = to_wrap             # <<<<<<<<<<<<<<
 *     # print "Debug: atomspace factory={0:x}".format(<long unsigned int>to_wrap)
 *     instance.owns_atomspace = False
 */
  __pyx_v_instance->atomspace = __pyx_v_to_wrap;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":29
 *     instance.atomspace = to_wrap
 *     # print "Debug: atomspace factory={0:x}".format(<long unsigned int>to_wrap)
 *     instance.owns_atomspace = False             # <<<<<<<<<<<<<<
 *     return instance
 * 
 */
  __pyx_v_instance->owns_atomspace = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":30
 *     # print "Debug: atomspace factory={0:x}".format(<long unsigned int>to_wrap)
 *     instance.owns_atomspace = False
 *     return instance             # <<<<<<<<<<<<<<
 * 
 * cdef class AtomSpace:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":25
 *     return result
 * 
 * cdef AtomSpace_factory(cAtomSpace *to_wrap):             # <<<<<<<<<<<<<<
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)
 *     instance.atomspace = to_wrap
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace_factory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":37
 *     #cdef bint owns_atomspace
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.owns_atomspace = False
 * 
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_9AtomSpace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opencog_9atomspace_9AtomSpace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace___cinit__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_9AtomSpace___cinit__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":38
 * 
 *     def __cinit__(self):
 *         self.owns_atomspace = False             # <<<<<<<<<<<<<<
 * 
 *     # A tacky hack to pass in a pointer to an atomspace from C++-land.
 */
  __pyx_v_self->owns_atomspace = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":37
 *     #cdef bint owns_atomspace
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.owns_atomspace = False
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":44
 *     # works, but is not very safe, and has a certain feeling of "ick"
 *     # about it.  But I can't find any better way.
 *     def __init__(self, long addr = 0):             # <<<<<<<<<<<<<<
 *         if (addr == 0) :
 *             self.atomspace = new cAtomSpace()
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_9AtomSpace_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opencog_9atomspace_9AtomSpace_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_addr;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_addr,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_addr);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_addr = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_addr == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_addr = ((long)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_2__init__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_addr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_9AtomSpace_2__init__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, long __pyx_v_addr) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  opencog::AtomSpace *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":45
 *     # about it.  But I can't find any better way.
 *     def __init__(self, long addr = 0):
 *         if (addr == 0) :             # <<<<<<<<<<<<<<
 *             self.atomspace = new cAtomSpace()
 *             self.owns_atomspace = True
 */
  __pyx_t_1 = ((__pyx_v_addr == 0) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":46
 *     def __init__(self, long addr = 0):
 *         if (addr == 0) :
 *             self.atomspace = new cAtomSpace()             # <<<<<<<<<<<<<<
 *             self.owns_atomspace = True
 *             attentionbank(self.atomspace)
 */
    try {
      __pyx_t_2 = new opencog::AtomSpace();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->atomspace = __pyx_t_2;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":47
 *         if (addr == 0) :
 *             self.atomspace = new cAtomSpace()
 *             self.owns_atomspace = True             # <<<<<<<<<<<<<<
 *             attentionbank(self.atomspace)
 *         else :
 */
    __pyx_v_self->owns_atomspace = 1;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":48
 *             self.atomspace = new cAtomSpace()
 *             self.owns_atomspace = True
 *             attentionbank(self.atomspace)             # <<<<<<<<<<<<<<
 *         else :
 *             self.atomspace = <cAtomSpace*> PyLong_AsVoidPtr(addr)
 */
    opencog::attentionbank(__pyx_v_self->atomspace);

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":45
 *     # about it.  But I can't find any better way.
 *     def __init__(self, long addr = 0):
 *         if (addr == 0) :             # <<<<<<<<<<<<<<
 *             self.atomspace = new cAtomSpace()
 *             self.owns_atomspace = True
 */
    goto __pyx_L3;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":50
 *             attentionbank(self.atomspace)
 *         else :
 *             self.atomspace = <cAtomSpace*> PyLong_AsVoidPtr(addr)             # <<<<<<<<<<<<<<
 *             self.owns_atomspace = False
 *             attentionbank(self.atomspace)
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_addr); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_self->atomspace = ((opencog::AtomSpace *)PyLong_AsVoidPtr(__pyx_t_3));
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":51
 *         else :
 *             self.atomspace = <cAtomSpace*> PyLong_AsVoidPtr(addr)
 *             self.owns_atomspace = False             # <<<<<<<<<<<<<<
 *             attentionbank(self.atomspace)
 * 
 */
    __pyx_v_self->owns_atomspace = 0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":52
 *             self.atomspace = <cAtomSpace*> PyLong_AsVoidPtr(addr)
 *             self.owns_atomspace = False
 *             attentionbank(self.atomspace)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    opencog::attentionbank(__pyx_v_self->atomspace);
  }
  __pyx_L3:;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":44
 *     # works, but is not very safe, and has a certain feeling of "ick"
 *     # about it.  But I can't find any better way.
 *     def __init__(self, long addr = 0):             # <<<<<<<<<<<<<<
 *         if (addr == 0) :
 *             self.atomspace = new cAtomSpace()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":54
 *             attentionbank(self.atomspace)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.owns_atomspace:
 *             if self.atomspace:
 */

/* Python wrapper */
static void __pyx_pw_7opencog_9atomspace_9AtomSpace_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7opencog_9atomspace_9AtomSpace_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7opencog_9atomspace_9AtomSpace_4__dealloc__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7opencog_9atomspace_9AtomSpace_4__dealloc__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":55
 * 
 *     def __dealloc__(self):
 *         if self.owns_atomspace:             # <<<<<<<<<<<<<<
 *             if self.atomspace:
 *                 del self.atomspace
 */
  __pyx_t_1 = (__pyx_v_self->owns_atomspace != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":56
 *     def __dealloc__(self):
 *         if self.owns_atomspace:
 *             if self.atomspace:             # <<<<<<<<<<<<<<
 *                 del self.atomspace
 *                 attentionbank(<cAtomSpace*> PyLong_AsVoidPtr(0))
 */
    __pyx_t_1 = (__pyx_v_self->atomspace != 0);
    if (__pyx_t_1) {

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":57
 *         if self.owns_atomspace:
 *             if self.atomspace:
 *                 del self.atomspace             # <<<<<<<<<<<<<<
 *                 attentionbank(<cAtomSpace*> PyLong_AsVoidPtr(0))
 * 
 */
      delete __pyx_v_self->atomspace;

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":58
 *             if self.atomspace:
 *                 del self.atomspace
 *                 attentionbank(<cAtomSpace*> PyLong_AsVoidPtr(0))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(as_1, as_2, int op):
 */
      opencog::attentionbank(((opencog::AtomSpace *)PyLong_AsVoidPtr(__pyx_int_0)));

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":56
 *     def __dealloc__(self):
 *         if self.owns_atomspace:
 *             if self.atomspace:             # <<<<<<<<<<<<<<
 *                 del self.atomspace
 *                 attentionbank(<cAtomSpace*> PyLong_AsVoidPtr(0))
 */
    }

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":55
 * 
 *     def __dealloc__(self):
 *         if self.owns_atomspace:             # <<<<<<<<<<<<<<
 *             if self.atomspace:
 *                 del self.atomspace
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":54
 *             attentionbank(self.atomspace)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.owns_atomspace:
 *             if self.atomspace:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":60
 *                 attentionbank(<cAtomSpace*> PyLong_AsVoidPtr(0))
 * 
 *     def __richcmp__(as_1, as_2, int op):             # <<<<<<<<<<<<<<
 *         if not isinstance(as_1, AtomSpace) or not isinstance(as_2, AtomSpace):
 *             return NotImplemented
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_7__richcmp__(PyObject *__pyx_v_as_1, PyObject *__pyx_v_as_2, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_7__richcmp__(PyObject *__pyx_v_as_1, PyObject *__pyx_v_as_2, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_6__richcmp__(((PyObject *)__pyx_v_as_1), ((PyObject *)__pyx_v_as_2), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_6__richcmp__(PyObject *__pyx_v_as_1, PyObject *__pyx_v_as_2, int __pyx_v_op) {
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_atomspace_1 = 0;
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_atomspace_2 = 0;
  opencog::AtomSpace *__pyx_v_c_atomspace_1;
  opencog::AtomSpace *__pyx_v_c_atomspace_2;
  int __pyx_v_is_equal;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  opencog::AtomSpace *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":61
 * 
 *     def __richcmp__(as_1, as_2, int op):
 *         if not isinstance(as_1, AtomSpace) or not isinstance(as_2, AtomSpace):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         cdef AtomSpace atomspace_1 = <AtomSpace>as_1
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_as_1, __pyx_ptype_7opencog_9atomspace_AtomSpace); 
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_as_2, __pyx_ptype_7opencog_9atomspace_AtomSpace); 
  __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":62
 *     def __richcmp__(as_1, as_2, int op):
 *         if not isinstance(as_1, AtomSpace) or not isinstance(as_2, AtomSpace):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         cdef AtomSpace atomspace_1 = <AtomSpace>as_1
 *         cdef AtomSpace atomspace_2 = <AtomSpace>as_1
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":61
 * 
 *     def __richcmp__(as_1, as_2, int op):
 *         if not isinstance(as_1, AtomSpace) or not isinstance(as_2, AtomSpace):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         cdef AtomSpace atomspace_1 = <AtomSpace>as_1
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":63
 *         if not isinstance(as_1, AtomSpace) or not isinstance(as_2, AtomSpace):
 *             return NotImplemented
 *         cdef AtomSpace atomspace_1 = <AtomSpace>as_1             # <<<<<<<<<<<<<<
 *         cdef AtomSpace atomspace_2 = <AtomSpace>as_1
 * 
 */
  __pyx_t_4 = __pyx_v_as_1;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_atomspace_1 = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":64
 *             return NotImplemented
 *         cdef AtomSpace atomspace_1 = <AtomSpace>as_1
 *         cdef AtomSpace atomspace_2 = <AtomSpace>as_1             # <<<<<<<<<<<<<<
 * 
 *         cdef cAtomSpace* c_atomspace_1 = atomspace_1.atomspace
 */
  __pyx_t_4 = __pyx_v_as_1;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_atomspace_2 = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":66
 *         cdef AtomSpace atomspace_2 = <AtomSpace>as_1
 * 
 *         cdef cAtomSpace* c_atomspace_1 = atomspace_1.atomspace             # <<<<<<<<<<<<<<
 *         cdef cAtomSpace* c_atomspace_2 = atomspace_2.atomspace
 * 
 */
  __pyx_t_5 = __pyx_v_atomspace_1->atomspace;
  __pyx_v_c_atomspace_1 = __pyx_t_5;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":67
 * 
 *         cdef cAtomSpace* c_atomspace_1 = atomspace_1.atomspace
 *         cdef cAtomSpace* c_atomspace_2 = atomspace_2.atomspace             # <<<<<<<<<<<<<<
 * 
 *         is_equal = True
 */
  __pyx_t_5 = __pyx_v_atomspace_2->atomspace;
  __pyx_v_c_atomspace_2 = __pyx_t_5;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":69
 *         cdef cAtomSpace* c_atomspace_2 = atomspace_2.atomspace
 * 
 *         is_equal = True             # <<<<<<<<<<<<<<
 *         if c_atomspace_1 != c_atomspace_2:
 *             is_equal = False
 */
  __pyx_v_is_equal = 1;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":70
 * 
 *         is_equal = True
 *         if c_atomspace_1 != c_atomspace_2:             # <<<<<<<<<<<<<<
 *             is_equal = False
 *         if op == 2: # ==
 */
  __pyx_t_1 = ((__pyx_v_c_atomspace_1 != __pyx_v_c_atomspace_2) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":71
 *         is_equal = True
 *         if c_atomspace_1 != c_atomspace_2:
 *             is_equal = False             # <<<<<<<<<<<<<<
 *         if op == 2: # ==
 *             return is_equal
 */
    __pyx_v_is_equal = 0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":70
 * 
 *         is_equal = True
 *         if c_atomspace_1 != c_atomspace_2:             # <<<<<<<<<<<<<<
 *             is_equal = False
 *         if op == 2: # ==
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":72
 *         if c_atomspace_1 != c_atomspace_2:
 *             is_equal = False
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return is_equal
 *         elif op == 3: # !=
 */
  switch (__pyx_v_op) {
    case 2:

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":73
 *             is_equal = False
 *         if op == 2: # ==
 *             return is_equal             # <<<<<<<<<<<<<<
 *         elif op == 3: # !=
 *             return not is_equal
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_is_equal); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":72
 *         if c_atomspace_1 != c_atomspace_2:
 *             is_equal = False
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return is_equal
 *         elif op == 3: # !=
 */
    break;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":74
 *         if op == 2: # ==
 *             return is_equal
 *         elif op == 3: # !=             # <<<<<<<<<<<<<<
 *             return not is_equal
 * 
 */
    case 3:

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":75
 *             return is_equal
 *         elif op == 3: # !=
 *             return not is_equal             # <<<<<<<<<<<<<<
 * 
 *     def add(self, Type t, name=None, out=None, TruthValue tv=None):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong((!(__pyx_v_is_equal != 0))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":74
 *         if op == 2: # ==
 *             return is_equal
 *         elif op == 3: # !=             # <<<<<<<<<<<<<<
 *             return not is_equal
 * 
 */
    break;
    default: break;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":60
 *                 attentionbank(<cAtomSpace*> PyLong_AsVoidPtr(0))
 * 
 *     def __richcmp__(as_1, as_2, int op):             # <<<<<<<<<<<<<<
 *         if not isinstance(as_1, AtomSpace) or not isinstance(as_2, AtomSpace):
 *             return NotImplemented
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atomspace_1);
  __Pyx_XDECREF((PyObject *)__pyx_v_atomspace_2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":77
 *             return not is_equal
 * 
 *     def add(self, Type t, name=None, out=None, TruthValue tv=None):             # <<<<<<<<<<<<<<
 *         """ add method that determines exact method to call from type """
 *         if is_a(t, types.Node):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_9add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_8add[] = " add method that determines exact method to call from type ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_9add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_out = 0;
  struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_name,&__pyx_n_s_out,&__pyx_n_s_tv,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = (PyObject *)((struct __pyx_obj_7opencog_9atomspace_TruthValue *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_out);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tv);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_name = values[1];
    __pyx_v_out = values[2];
    __pyx_v_tv = ((struct __pyx_obj_7opencog_9atomspace_TruthValue *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tv), __pyx_ptype_7opencog_9atomspace_TruthValue, 1, "tv", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_8add(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_t, __pyx_v_name, __pyx_v_out, __pyx_v_tv);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_8add(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_name, PyObject *__pyx_v_out, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv) {
  PyObject *__pyx_v_atom = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":79
 *     def add(self, Type t, name=None, out=None, TruthValue tv=None):
 *         """ add method that determines exact method to call from type """
 *         if is_a(t, types.Node):             # <<<<<<<<<<<<<<
 *             assert out is None, "Nodes can't have outgoing sets"
 *             atom = self.add_node(t, name, tv)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_is_a); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Node); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_4) {
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":80
 *         """ add method that determines exact method to call from type """
 *         if is_a(t, types.Node):
 *             assert out is None, "Nodes can't have outgoing sets"             # <<<<<<<<<<<<<<
 *             atom = self.add_node(t, name, tv)
 *         else:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_8 = (__pyx_v_out == Py_None);
      if (unlikely(!(__pyx_t_8 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Nodes_can_t_have_outgoing_sets);
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":81
 *         if is_a(t, types.Node):
 *             assert out is None, "Nodes can't have outgoing sets"
 *             atom = self.add_node(t, name, tv)             # <<<<<<<<<<<<<<
 *         else:
 *             assert name is None, "Links can't have names"
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_node); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyInt_From_short(__pyx_v_t); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_3 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_t_7);
    __Pyx_INCREF(__pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_v_name);
    __Pyx_INCREF(((PyObject *)__pyx_v_tv));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tv));
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_6, ((PyObject *)__pyx_v_tv));
    __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_atom = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":79
 *     def add(self, Type t, name=None, out=None, TruthValue tv=None):
 *         """ add method that determines exact method to call from type """
 *         if is_a(t, types.Node):             # <<<<<<<<<<<<<<
 *             assert out is None, "Nodes can't have outgoing sets"
 *             atom = self.add_node(t, name, tv)
 */
    goto __pyx_L3;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":83
 *             atom = self.add_node(t, name, tv)
 *         else:
 *             assert name is None, "Links can't have names"             # <<<<<<<<<<<<<<
 *             atom = self.add_link(t, out, tv)
 *         return atom
 */
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_8 = (__pyx_v_name == Py_None);
      if (unlikely(!(__pyx_t_8 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Links_can_t_have_names);
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":84
 *         else:
 *             assert name is None, "Links can't have names"
 *             atom = self.add_link(t, out, tv)             # <<<<<<<<<<<<<<
 *         return atom
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_link); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_5 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_out);
    __Pyx_GIVEREF(__pyx_v_out);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_out);
    __Pyx_INCREF(((PyObject *)__pyx_v_tv));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_tv));
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_6, ((PyObject *)__pyx_v_tv));
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_atom = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":85
 *             assert name is None, "Links can't have names"
 *             atom = self.add_link(t, out, tv)
 *         return atom             # <<<<<<<<<<<<<<
 * 
 *     def add_node(self, Type t, atom_name, TruthValue tv=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_atom);
  __pyx_r = __pyx_v_atom;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":77
 *             return not is_equal
 * 
 *     def add(self, Type t, name=None, out=None, TruthValue tv=None):             # <<<<<<<<<<<<<<
 *         """ add method that determines exact method to call from type """
 *         if is_a(t, types.Node):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_atom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":87
 *         return atom
 * 
 *     def add_node(self, Type t, atom_name, TruthValue tv=None):             # <<<<<<<<<<<<<<
 *         """ Add Node to AtomSpace
 *         @todo support [0.5,0.5] format for TruthValue.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_11add_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_10add_node[] = " Add Node to AtomSpace\n        @todo support [0.5,0.5] format for TruthValue.\n        @todo support type name for type.\n        @returns the newly created Atom\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_11add_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t;
  PyObject *__pyx_v_atom_name = 0;
  struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_atom_name,&__pyx_n_s_tv,0};
    PyObject* values[3] = {0,0,0};
    values[2] = (PyObject *)((struct __pyx_obj_7opencog_9atomspace_TruthValue *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_atom_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_node", 0, 2, 3, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tv);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_node") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_atom_name = values[1];
    __pyx_v_tv = ((struct __pyx_obj_7opencog_9atomspace_TruthValue *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_node", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tv), __pyx_ptype_7opencog_9atomspace_TruthValue, 1, "tv", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_10add_node(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_t, __pyx_v_atom_name, __pyx_v_tv);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_10add_node(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_atom_name, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv) {
  std::string __pyx_v_name;
  opencog::Handle __pyx_v_result;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  opencog::Handle __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_node", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":93
 *         @returns the newly created Atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef string name = atom_name.encode('UTF-8')
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":94
 *         """
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef string name = atom_name.encode('UTF-8')
 *         cdef cHandle result = self.atomspace.add_node(t, name)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":93
 *         @returns the newly created Atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef string name = atom_name.encode('UTF-8')
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":95
 *         if self.atomspace == NULL:
 *             return None
 *         cdef string name = atom_name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         cdef cHandle result = self.atomspace.add_node(t, name)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_atom_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_name = __pyx_t_4;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":96
 *             return None
 *         cdef string name = atom_name.encode('UTF-8')
 *         cdef cHandle result = self.atomspace.add_node(t, name)             # <<<<<<<<<<<<<<
 * 
 *         if result == result.UNDEFINED: return None
 */
  try {
    __pyx_t_5 = __pyx_v_self->atomspace->add_node(__pyx_v_t, __pyx_v_name);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result = __pyx_t_5;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":98
 *         cdef cHandle result = self.atomspace.add_node(t, name)
 * 
 *         if result == result.UNDEFINED: return None             # <<<<<<<<<<<<<<
 *         atom = Atom(void_from_candle(result), self);
 *         if tv :
 */
  __pyx_t_1 = ((__pyx_v_result == __pyx_v_result.UNDEFINED) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":99
 * 
 *         if result == result.UNDEFINED: return None
 *         atom = Atom(void_from_candle(result), self);             # <<<<<<<<<<<<<<
 *         if tv :
 *             atom.tv = tv
 */
  __pyx_t_3 = __Pyx_PyInt_From_long(void_from_candle(__pyx_v_result)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_atom = ((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":100
 *         if result == result.UNDEFINED: return None
 *         atom = Atom(void_from_candle(result), self);
 *         if tv :             # <<<<<<<<<<<<<<
 *             atom.tv = tv
 *         return atom
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_tv)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":101
 *         atom = Atom(void_from_candle(result), self);
 *         if tv :
 *             atom.tv = tv             # <<<<<<<<<<<<<<
 *         return atom
 * 
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_atom), __pyx_n_s_tv, ((PyObject *)__pyx_v_tv)) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":100
 *         if result == result.UNDEFINED: return None
 *         atom = Atom(void_from_candle(result), self);
 *         if tv :             # <<<<<<<<<<<<<<
 *             atom.tv = tv
 *         return atom
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":102
 *         if tv :
 *             atom.tv = tv
 *         return atom             # <<<<<<<<<<<<<<
 * 
 *     def add_link(self, Type t, outgoing, TruthValue tv=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atom));
  __pyx_r = ((PyObject *)__pyx_v_atom);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":87
 *         return atom
 * 
 *     def add_node(self, Type t, atom_name, TruthValue tv=None):             # <<<<<<<<<<<<<<
 *         """ Add Node to AtomSpace
 *         @todo support [0.5,0.5] format for TruthValue.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":104
 *         return atom
 * 
 *     def add_link(self, Type t, outgoing, TruthValue tv=None):             # <<<<<<<<<<<<<<
 *         """ Add Link to AtomSpace
 *         @todo support [0.5,0.5] format for TruthValue.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_13add_link(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_12add_link[] = " Add Link to AtomSpace\n        @todo support [0.5,0.5] format for TruthValue.\n        @todo support type name for type.\n        @returns handle referencing the newly created Atom\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_13add_link(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t;
  PyObject *__pyx_v_outgoing = 0;
  struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_link (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_outgoing,&__pyx_n_s_tv,0};
    PyObject* values[3] = {0,0,0};
    values[2] = (PyObject *)((struct __pyx_obj_7opencog_9atomspace_TruthValue *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outgoing)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_link", 0, 2, 3, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tv);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_link") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_outgoing = values[1];
    __pyx_v_tv = ((struct __pyx_obj_7opencog_9atomspace_TruthValue *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_link", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tv), __pyx_ptype_7opencog_9atomspace_TruthValue, 1, "tv", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_12add_link(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_t, __pyx_v_outgoing, __pyx_v_tv);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_12add_link(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_outgoing, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  PyObject *__pyx_v_atom = NULL;
  opencog::Handle __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  opencog::Handle __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_link", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":110
 *         @returns handle referencing the newly created Atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         # create temporary cpp vector
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":111
 *         """
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         # create temporary cpp vector
 *         cdef vector[cHandle] handle_vector
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":110
 *         @returns handle referencing the newly created Atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         # create temporary cpp vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":114
 *         # create temporary cpp vector
 *         cdef vector[cHandle] handle_vector
 *         for atom in outgoing:             # <<<<<<<<<<<<<<
 *             if isinstance(atom, Atom):
 *                 handle_vector.push_back(deref((<Atom>(atom)).handle))
 */
  if (likely(PyList_CheckExact(__pyx_v_outgoing)) || PyTuple_CheckExact(__pyx_v_outgoing)) {
    __pyx_t_2 = __pyx_v_outgoing; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_outgoing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_atom, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":115
 *         cdef vector[cHandle] handle_vector
 *         for atom in outgoing:
 *             if isinstance(atom, Atom):             # <<<<<<<<<<<<<<
 *                 handle_vector.push_back(deref((<Atom>(atom)).handle))
 *         cdef cHandle result
 */
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_atom, __pyx_ptype_7opencog_9atomspace_Atom); 
    __pyx_t_6 = (__pyx_t_1 != 0);
    if (__pyx_t_6) {

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":116
 *         for atom in outgoing:
 *             if isinstance(atom, Atom):
 *                 handle_vector.push_back(deref((<Atom>(atom)).handle))             # <<<<<<<<<<<<<<
 *         cdef cHandle result
 *         result = self.atomspace.add_link(t, handle_vector)
 */
      try {
        __pyx_v_handle_vector.push_back((*((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_atom)->handle));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":115
 *         cdef vector[cHandle] handle_vector
 *         for atom in outgoing:
 *             if isinstance(atom, Atom):             # <<<<<<<<<<<<<<
 *                 handle_vector.push_back(deref((<Atom>(atom)).handle))
 *         cdef cHandle result
 */
    }

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":114
 *         # create temporary cpp vector
 *         cdef vector[cHandle] handle_vector
 *         for atom in outgoing:             # <<<<<<<<<<<<<<
 *             if isinstance(atom, Atom):
 *                 handle_vector.push_back(deref((<Atom>(atom)).handle))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":118
 *                 handle_vector.push_back(deref((<Atom>(atom)).handle))
 *         cdef cHandle result
 *         result = self.atomspace.add_link(t, handle_vector)             # <<<<<<<<<<<<<<
 *         if result == result.UNDEFINED: return None
 *         atom = Atom(void_from_candle(result), self);
 */
  try {
    __pyx_t_7 = __pyx_v_self->atomspace->add_link(__pyx_v_t, __pyx_v_handle_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result = __pyx_t_7;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":119
 *         cdef cHandle result
 *         result = self.atomspace.add_link(t, handle_vector)
 *         if result == result.UNDEFINED: return None             # <<<<<<<<<<<<<<
 *         atom = Atom(void_from_candle(result), self);
 *         if tv :
 */
  __pyx_t_6 = ((__pyx_v_result == __pyx_v_result.UNDEFINED) != 0);
  if (__pyx_t_6) {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":120
 *         result = self.atomspace.add_link(t, handle_vector)
 *         if result == result.UNDEFINED: return None
 *         atom = Atom(void_from_candle(result), self);             # <<<<<<<<<<<<<<
 *         if tv :
 *             atom.tv = tv
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(void_from_candle(__pyx_v_result)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_XDECREF_SET(__pyx_v_atom, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":121
 *         if result == result.UNDEFINED: return None
 *         atom = Atom(void_from_candle(result), self);
 *         if tv :             # <<<<<<<<<<<<<<
 *             atom.tv = tv
 *         return atom
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_tv)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_6) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":122
 *         atom = Atom(void_from_candle(result), self);
 *         if tv :
 *             atom.tv = tv             # <<<<<<<<<<<<<<
 *         return atom
 * 
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_atom, __pyx_n_s_tv, ((PyObject *)__pyx_v_tv)) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":121
 *         if result == result.UNDEFINED: return None
 *         atom = Atom(void_from_candle(result), self);
 *         if tv :             # <<<<<<<<<<<<<<
 *             atom.tv = tv
 *         return atom
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":123
 *         if tv :
 *             atom.tv = tv
 *         return atom             # <<<<<<<<<<<<<<
 * 
 *     def is_valid(self, atom):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_atom);
  __pyx_r = __pyx_v_atom;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":104
 *         return atom
 * 
 *     def add_link(self, Type t, outgoing, TruthValue tv=None):             # <<<<<<<<<<<<<<
 *         """ Add Link to AtomSpace
 *         @todo support [0.5,0.5] format for TruthValue.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_atom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":125
 *         return atom
 * 
 *     def is_valid(self, atom):             # <<<<<<<<<<<<<<
 *         """ Check whether the passed handle refers to an actual atom
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_15is_valid(PyObject *__pyx_v_self, PyObject *__pyx_v_atom); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_14is_valid[] = " Check whether the passed handle refers to an actual atom\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_15is_valid(PyObject *__pyx_v_self, PyObject *__pyx_v_atom) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_valid (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_14is_valid(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), ((PyObject *)__pyx_v_atom));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_14is_valid(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, PyObject *__pyx_v_atom) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_valid", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":128
 *         """ Check whether the passed handle refers to an actual atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return False
 *         try:
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":129
 *         """
 *         if self.atomspace == NULL:
 *             return False             # <<<<<<<<<<<<<<
 *         try:
 *             assert isinstance(atom, Atom)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":128
 *         """ Check whether the passed handle refers to an actual atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return False
 *         try:
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":130
 *         if self.atomspace == NULL:
 *             return False
 *         try:             # <<<<<<<<<<<<<<
 *             assert isinstance(atom, Atom)
 *         except AssertionError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":131
 *             return False
 *         try:
 *             assert isinstance(atom, Atom)             # <<<<<<<<<<<<<<
 *         except AssertionError:
 *             raise TypeError("Need Atom object")
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_atom, __pyx_ptype_7opencog_9atomspace_Atom); 
        if (unlikely(!(__pyx_t_1 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          {__pyx_filename = __pyx_f[2]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        }
      }
      #endif

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":130
 *         if self.atomspace == NULL:
 *             return False
 *         try:             # <<<<<<<<<<<<<<
 *             assert isinstance(atom, Atom)
 *         except AssertionError:
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L11_try_end;
    __pyx_L4_error:;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":132
 *         try:
 *             assert isinstance(atom, Atom)
 *         except AssertionError:             # <<<<<<<<<<<<<<
 *             raise TypeError("Need Atom object")
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):
 */
    __pyx_t_5 = PyErr_ExceptionMatches(__pyx_builtin_AssertionError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("opencog.atomspace.AtomSpace.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":133
 *             assert isinstance(atom, Atom)
 *         except AssertionError:
 *             raise TypeError("Need Atom object")             # <<<<<<<<<<<<<<
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):
 *             return True
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":130
 *         if self.atomspace == NULL:
 *             return False
 *         try:             # <<<<<<<<<<<<<<
 *             assert isinstance(atom, Atom)
 *         except AssertionError:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L11_try_end:;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":134
 *         except AssertionError:
 *             raise TypeError("Need Atom object")
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_1 = (__pyx_v_self->atomspace->is_valid_handle((*((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_atom)->handle)) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":135
 *             raise TypeError("Need Atom object")
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":134
 *         except AssertionError:
 *             raise TypeError("Need Atom object")
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":136
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def remove(self, Atom atom, recursive=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":125
 *         return atom
 * 
 *     def is_valid(self, atom):             # <<<<<<<<<<<<<<
 *         """ Check whether the passed handle refers to an actual atom
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":138
 *         return False
 * 
 *     def remove(self, Atom atom, recursive=False):             # <<<<<<<<<<<<<<
 *         """ Removes an atom from the atomspace
 *         atom --  The Atom of the atom to be removed.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_17remove(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_16remove[] = " Removes an atom from the atomspace\n        atom --  The Atom of the atom to be removed.\n        recursive -- Recursive-removal flag; if set, then all links\n            that contain this atom will be removed. If not set, the\n            incoming set of this atom must be empty, as otherwise\n            the atom cannot be removed.\n\n        Returns True if the Atom was successfully removed. False, otherwise.\n\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_17remove(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom = 0;
  PyObject *__pyx_v_recursive = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atom,&__pyx_n_s_recursive,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_atom)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_recursive);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "remove") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_atom = ((struct __pyx_obj_7opencog_9atomspace_Atom *)values[0]);
    __pyx_v_recursive = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("remove", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_atom), __pyx_ptype_7opencog_9atomspace_Atom, 1, "atom", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_16remove(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_atom, __pyx_v_recursive);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_16remove(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom, PyObject *__pyx_v_recursive) {
  int __pyx_v_recurse;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":149
 * 
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef bint recurse = recursive
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":150
 *         """
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef bint recurse = recursive
 *         return self.atomspace.remove_atom(deref(atom.handle),recurse)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":149
 * 
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef bint recurse = recursive
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":151
 *         if self.atomspace == NULL:
 *             return None
 *         cdef bint recurse = recursive             # <<<<<<<<<<<<<<
 *         return self.atomspace.remove_atom(deref(atom.handle),recurse)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_recursive); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_recurse = __pyx_t_1;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":152
 *             return None
 *         cdef bint recurse = recursive
 *         return self.atomspace.remove_atom(deref(atom.handle),recurse)             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->atomspace->remove_atom((*__pyx_v_atom->handle), __pyx_v_recurse)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":138
 *         return False
 * 
 *     def remove(self, Atom atom, recursive=False):             # <<<<<<<<<<<<<<
 *         """ Removes an atom from the atomspace
 *         atom --  The Atom of the atom to be removed.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":154
 *         return self.atomspace.remove_atom(deref(atom.handle),recurse)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         """ Remove all atoms from the AtomSpace """
 *         if self.atomspace == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_19clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_18clear[] = " Remove all atoms from the AtomSpace ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_19clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_18clear(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_18clear(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("clear", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":156
 *     def clear(self):
 *         """ Remove all atoms from the AtomSpace """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         self.atomspace.clear()
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":157
 *         """ Remove all atoms from the AtomSpace """
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         self.atomspace.clear()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":156
 *     def clear(self):
 *         """ Remove all atoms from the AtomSpace """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         self.atomspace.clear()
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":158
 *         if self.atomspace == NULL:
 *             return None
 *         self.atomspace.clear()             # <<<<<<<<<<<<<<
 * 
 *     # Methods to make the atomspace act more like a standard Python container
 */
  __pyx_v_self->atomspace->clear();

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":154
 *         return self.atomspace.remove_atom(deref(atom.handle),recurse)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         """ Remove all atoms from the AtomSpace """
 *         if self.atomspace == NULL:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":161
 * 
 *     # Methods to make the atomspace act more like a standard Python container
 *     def __contains__(self, atom):             # <<<<<<<<<<<<<<
 *         """ Custom checker to see if object is in AtomSpace """
 *         if isinstance(atom, Atom):
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_9AtomSpace_21__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_atom); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_20__contains__[] = " Custom checker to see if object is in AtomSpace ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_20__contains__;
#endif
static int __pyx_pw_7opencog_9atomspace_9AtomSpace_21__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_atom) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_20__contains__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), ((PyObject *)__pyx_v_atom));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_9AtomSpace_20__contains__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, PyObject *__pyx_v_atom) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":163
 *     def __contains__(self, atom):
 *         """ Custom checker to see if object is in AtomSpace """
 *         if isinstance(atom, Atom):             # <<<<<<<<<<<<<<
 *             return self.is_valid(atom)
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_atom, __pyx_ptype_7opencog_9atomspace_Atom); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":164
 *         """ Custom checker to see if object is in AtomSpace """
 *         if isinstance(atom, Atom):
 *             return self.is_valid(atom)             # <<<<<<<<<<<<<<
 *         else:
 *             return False
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_valid); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_atom); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_atom);
      __Pyx_GIVEREF(__pyx_v_atom);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_atom);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_7;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":163
 *     def __contains__(self, atom):
 *         """ Custom checker to see if object is in AtomSpace """
 *         if isinstance(atom, Atom):             # <<<<<<<<<<<<<<
 *             return self.is_valid(atom)
 *         else:
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":166
 *             return self.is_valid(atom)
 *         else:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     # Maybe this should be called __repr__ ???
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":161
 * 
 *     # Methods to make the atomspace act more like a standard Python container
 *     def __contains__(self, atom):             # <<<<<<<<<<<<<<
 *         """ Custom checker to see if object is in AtomSpace """
 *         if isinstance(atom, Atom):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":169
 * 
 *     # Maybe this should be called __repr__ ???
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """ Description of the atomspace """
 *         return ("<Atomspace\n" +
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_23__str__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_22__str__[] = " Description of the atomspace ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_22__str__;
#endif
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_23__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_22__str__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_22__str__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":171
 *     def __str__(self):
 *         """ Description of the atomspace """
 *         return ("<Atomspace\n" +             # <<<<<<<<<<<<<<
 *                 "   addr: " + hex(<long>self.atomspace) + "\n"
 *                 "   owns: " + str(self.owns_atomspace) + ">\n"
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_Atomspace, __pyx_kp_s_addr_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":172
 *         """ Description of the atomspace """
 *         return ("<Atomspace\n" +
 *                 "   addr: " + hex(<long>self.atomspace) + "\n"             # <<<<<<<<<<<<<<
 *                 "   owns: " + str(self.owns_atomspace) + ">\n"
 *                )
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_v_self->atomspace)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_hex, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_owns); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":173
 *         return ("<Atomspace\n" +
 *                 "   addr: " + hex(<long>self.atomspace) + "\n"
 *                 "   owns: " + str(self.owns_atomspace) + ">\n"             # <<<<<<<<<<<<<<
 *                )
 * 
 */
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->owns_atomspace); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__9); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":169
 * 
 *     # Maybe this should be called __repr__ ???
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """ Description of the atomspace """
 *         return ("<Atomspace\n" +
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":176
 *                )
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         """ Return the number of atoms in the AtomSpace """
 *         return self.size()
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_7opencog_9atomspace_9AtomSpace_25__len__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_24__len__[] = " Return the number of atoms in the AtomSpace ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_24__len__;
#endif
static Py_ssize_t __pyx_pw_7opencog_9atomspace_9AtomSpace_25__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_24__len__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_7opencog_9atomspace_9AtomSpace_24__len__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":178
 *     def __len__(self):
 *         """ Return the number of atoms in the AtomSpace """
 *         return self.size()             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":176
 *                )
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         """ Return the number of atoms in the AtomSpace """
 *         return self.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":180
 *         return self.size()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """ Support iterating across all atoms in the atomspace """
 *         if self.atomspace == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_27__iter__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_26__iter__[] = " Support iterating across all atoms in the atomspace ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_26__iter__;
#endif
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_27__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_26__iter__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_26__iter__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":182
 *     def __iter__(self):
 *         """ Support iterating across all atoms in the atomspace """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         return iter(self.get_atoms_by_type(0))
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":183
 *         """ Support iterating across all atoms in the atomspace """
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         return iter(self.get_atoms_by_type(0))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":182
 *     def __iter__(self):
 *         """ Support iterating across all atoms in the atomspace """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         return iter(self.get_atoms_by_type(0))
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":184
 *         if self.atomspace == NULL:
 *             return None
 *         return iter(self.get_atoms_by_type(0))             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_atoms_by_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":180
 *         return self.size()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """ Support iterating across all atoms in the atomspace """
 *         if self.atomspace == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":186
 *         return iter(self.get_atoms_by_type(0))
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         """ Return the number of atoms in the AtomSpace """
 *         if self.atomspace == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_29size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_28size[] = " Return the number of atoms in the AtomSpace ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_29size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_28size(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_28size(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":188
 *     def size(self):
 *         """ Return the number of atoms in the AtomSpace """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return 0
 *         return self.atomspace.get_size()
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":189
 *         """ Return the number of atoms in the AtomSpace """
 *         if self.atomspace == NULL:
 *             return 0             # <<<<<<<<<<<<<<
 *         return self.atomspace.get_size()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":188
 *     def size(self):
 *         """ Return the number of atoms in the AtomSpace """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return 0
 *         return self.atomspace.get_size()
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":190
 *         if self.atomspace == NULL:
 *             return 0
 *         return self.atomspace.get_size()             # <<<<<<<<<<<<<<
 * 
 *     # query methods
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->atomspace->get_size()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":186
 *         return iter(self.get_atoms_by_type(0))
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         """ Return the number of atoms in the AtomSpace """
 *         if self.atomspace == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":193
 * 
 *     # query methods
 *     def get_atoms_by_type(self, Type t, subtype = True):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_31get_atoms_by_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_31get_atoms_by_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t;
  PyObject *__pyx_v_subtype = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_atoms_by_type (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_subtype,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_subtype);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_atoms_by_type") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_subtype = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_atoms_by_type", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.get_atoms_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_30get_atoms_by_type(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_t, __pyx_v_subtype);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_30get_atoms_by_type(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_subtype) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  int __pyx_v_subt;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_atoms_by_type", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":194
 *     # query methods
 *     def get_atoms_by_type(self, Type t, subtype = True):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":195
 *     def get_atoms_by_type(self, Type t, subtype = True):
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef bint subt = subtype
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":194
 *     # query methods
 *     def get_atoms_by_type(self, Type t, subtype = True):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":197
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         cdef bint subt = subtype             # <<<<<<<<<<<<<<
 *         self.atomspace.get_handles_by_type(back_inserter(handle_vector),t,subt)
 *         return convert_handle_seq_to_python_list(handle_vector,self)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_subtype); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_subt = __pyx_t_1;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":198
 *         cdef vector[cHandle] handle_vector
 *         cdef bint subt = subtype
 *         self.atomspace.get_handles_by_type(back_inserter(handle_vector),t,subt)             # <<<<<<<<<<<<<<
 *         return convert_handle_seq_to_python_list(handle_vector,self)
 * 
 */
  __pyx_v_self->atomspace->get_handles_by_type(std::back_inserter(__pyx_v_handle_vector), __pyx_v_t, __pyx_v_subt);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":199
 *         cdef bint subt = subtype
 *         self.atomspace.get_handles_by_type(back_inserter(handle_vector),t,subt)
 *         return convert_handle_seq_to_python_list(handle_vector,self)             # <<<<<<<<<<<<<<
 * 
 *     def xget_atoms_by_type(self, Type t, subtype = True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(__pyx_v_handle_vector, __pyx_v_self); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":193
 * 
 *     # query methods
 *     def get_atoms_by_type(self, Type t, subtype = True):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.get_atoms_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7opencog_9atomspace_9AtomSpace_34generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":201
 *         return convert_handle_seq_to_python_list(handle_vector,self)
 * 
 *     def xget_atoms_by_type(self, Type t, subtype = True):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_33xget_atoms_by_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_33xget_atoms_by_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t;
  PyObject *__pyx_v_subtype = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xget_atoms_by_type (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_subtype,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_subtype);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "xget_atoms_by_type") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_subtype = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("xget_atoms_by_type", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.xget_atoms_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_32xget_atoms_by_type(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_t, __pyx_v_subtype);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_32xget_atoms_by_type(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_subtype) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("xget_atoms_by_type", 0);
  __pyx_cur_scope = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *)__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type(__pyx_ptype_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_t = __pyx_v_t;
  __pyx_cur_scope->__pyx_v_subtype = __pyx_v_subtype;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_subtype);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_subtype);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7opencog_9atomspace_9AtomSpace_34generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_xget_atoms_by_type, __pyx_n_s_AtomSpace_xget_atoms_by_type); if (unlikely(!gen)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.xget_atoms_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7opencog_9atomspace_9AtomSpace_34generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *__pyx_cur_scope = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":202
 * 
 *     def xget_atoms_by_type(self, Type t, subtype = True):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":203
 *     def xget_atoms_by_type(self, Type t, subtype = True):
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef bint subt = subtype
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":202
 * 
 *     def xget_atoms_by_type(self, Type t, subtype = True):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":205
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         cdef bint subt = subtype             # <<<<<<<<<<<<<<
 *         self.atomspace.get_handles_by_type(back_inserter(handle_vector),t,subt)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_subtype); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_cur_scope->__pyx_v_subt = __pyx_t_1;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":206
 *         cdef vector[cHandle] handle_vector
 *         cdef bint subt = subtype
 *         self.atomspace.get_handles_by_type(back_inserter(handle_vector),t,subt)             # <<<<<<<<<<<<<<
 * 
 *         # This code is the same for all the x iterators but there is no
 */
  __pyx_cur_scope->__pyx_v_self->atomspace->get_handles_by_type(std::back_inserter(__pyx_cur_scope->__pyx_v_handle_vector), __pyx_cur_scope->__pyx_v_t, __pyx_cur_scope->__pyx_v_subt);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":213
 *         cdef vector[cHandle].iterator c_handle_iter
 *         cdef cHandle current_c_handle
 *         c_handle_iter = handle_vector.begin()             # <<<<<<<<<<<<<<
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)
 */
  __pyx_cur_scope->__pyx_v_c_handle_iter = __pyx_cur_scope->__pyx_v_handle_vector.begin();

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":214
 *         cdef cHandle current_c_handle
 *         c_handle_iter = handle_vector.begin()
 *         while c_handle_iter != handle_vector.end():             # <<<<<<<<<<<<<<
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_c_handle_iter != __pyx_cur_scope->__pyx_v_handle_vector.end()) != 0);
    if (!__pyx_t_1) break;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":215
 *         c_handle_iter = handle_vector.begin()
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)             # <<<<<<<<<<<<<<
 *             yield Atom(void_from_candle(current_c_handle), self)
 *             inc(c_handle_iter)
 */
    __pyx_cur_scope->__pyx_v_current_c_handle = (*__pyx_cur_scope->__pyx_v_c_handle_iter);

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":216
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self)             # <<<<<<<<<<<<<<
 *             inc(c_handle_iter)
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(void_from_candle(__pyx_cur_scope->__pyx_v_current_c_handle)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":217
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self)
 *             inc(c_handle_iter)             # <<<<<<<<<<<<<<
 * 
 *     def get_atoms_by_av(self, lower_bound, upper_bound=None):
 */
    (++__pyx_cur_scope->__pyx_v_c_handle_iter);
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":201
 *         return convert_handle_seq_to_python_list(handle_vector,self)
 * 
 *     def xget_atoms_by_type(self, Type t, subtype = True):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xget_atoms_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":219
 *             inc(c_handle_iter)
 * 
 *     def get_atoms_by_av(self, lower_bound, upper_bound=None):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_36get_atoms_by_av(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_36get_atoms_by_av(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lower_bound = 0;
  PyObject *__pyx_v_upper_bound = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_atoms_by_av (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lower_bound,&__pyx_n_s_upper_bound,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lower_bound)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_upper_bound);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_atoms_by_av") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_lower_bound = values[0];
    __pyx_v_upper_bound = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_atoms_by_av", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.get_atoms_by_av", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_35get_atoms_by_av(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_lower_bound, __pyx_v_upper_bound);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_35get_atoms_by_av(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, PyObject *__pyx_v_lower_bound, PyObject *__pyx_v_upper_bound) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  short __pyx_t_3;
  short __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_atoms_by_av", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":220
 * 
 *     def get_atoms_by_av(self, lower_bound, upper_bound=None):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":221
 *     def get_atoms_by_av(self, lower_bound, upper_bound=None):
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         if upper_bound is not None:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":220
 * 
 *     def get_atoms_by_av(self, lower_bound, upper_bound=None):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":223
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         if upper_bound is not None:             # <<<<<<<<<<<<<<
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),
 *                     lower_bound, upper_bound)
 */
  __pyx_t_1 = (__pyx_v_upper_bound != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":225
 *         if upper_bound is not None:
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),
 *                     lower_bound, upper_bound)             # <<<<<<<<<<<<<<
 *         else:
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),
 */
    __pyx_t_3 = __Pyx_PyInt_As_short(__pyx_v_lower_bound); if (unlikely((__pyx_t_3 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyInt_As_short(__pyx_v_upper_bound); if (unlikely((__pyx_t_4 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":224
 *         cdef vector[cHandle] handle_vector
 *         if upper_bound is not None:
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),             # <<<<<<<<<<<<<<
 *                     lower_bound, upper_bound)
 *         else:
 */
    opencog::attentionbank(__pyx_v_self->atomspace).get_handles_by_AV(std::back_inserter(__pyx_v_handle_vector), __pyx_t_3, __pyx_t_4);

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":223
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         if upper_bound is not None:             # <<<<<<<<<<<<<<
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),
 *                     lower_bound, upper_bound)
 */
    goto __pyx_L4;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":227
 *                     lower_bound, upper_bound)
 *         else:
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),             # <<<<<<<<<<<<<<
 *                     lower_bound)
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 */
  /*else*/ {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":228
 *         else:
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),
 *                     lower_bound)             # <<<<<<<<<<<<<<
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_As_short(__pyx_v_lower_bound); if (unlikely((__pyx_t_4 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":227
 *                     lower_bound, upper_bound)
 *         else:
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),             # <<<<<<<<<<<<<<
 *                     lower_bound)
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 */
    opencog::attentionbank(__pyx_v_self->atomspace).get_handles_by_AV(std::back_inserter(__pyx_v_handle_vector), __pyx_t_4);
  }
  __pyx_L4:;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":229
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),
 *                     lower_bound)
 *         return convert_handle_seq_to_python_list(handle_vector, self)             # <<<<<<<<<<<<<<
 * 
 *     def xget_atoms_by_av(self, lower_bound, upper_bound=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(__pyx_v_handle_vector, __pyx_v_self); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":219
 *             inc(c_handle_iter)
 * 
 *     def get_atoms_by_av(self, lower_bound, upper_bound=None):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.get_atoms_by_av", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7opencog_9atomspace_9AtomSpace_39generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":231
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_atoms_by_av(self, lower_bound, upper_bound=None):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_38xget_atoms_by_av(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_38xget_atoms_by_av(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lower_bound = 0;
  PyObject *__pyx_v_upper_bound = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xget_atoms_by_av (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lower_bound,&__pyx_n_s_upper_bound,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lower_bound)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_upper_bound);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "xget_atoms_by_av") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_lower_bound = values[0];
    __pyx_v_upper_bound = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("xget_atoms_by_av", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.xget_atoms_by_av", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_37xget_atoms_by_av(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_lower_bound, __pyx_v_upper_bound);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_37xget_atoms_by_av(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, PyObject *__pyx_v_lower_bound, PyObject *__pyx_v_upper_bound) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("xget_atoms_by_av", 0);
  __pyx_cur_scope = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *)__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av(__pyx_ptype_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_lower_bound = __pyx_v_lower_bound;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_lower_bound);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_lower_bound);
  __pyx_cur_scope->__pyx_v_upper_bound = __pyx_v_upper_bound;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_upper_bound);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_upper_bound);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7opencog_9atomspace_9AtomSpace_39generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_xget_atoms_by_av, __pyx_n_s_AtomSpace_xget_atoms_by_av); if (unlikely(!gen)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.xget_atoms_by_av", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7opencog_9atomspace_9AtomSpace_39generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *__pyx_cur_scope = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  short __pyx_t_3;
  short __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":232
 * 
 *     def xget_atoms_by_av(self, lower_bound, upper_bound=None):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":233
 *     def xget_atoms_by_av(self, lower_bound, upper_bound=None):
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         if upper_bound is not None:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":232
 * 
 *     def xget_atoms_by_av(self, lower_bound, upper_bound=None):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":235
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         if upper_bound is not None:             # <<<<<<<<<<<<<<
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),
 *                     lower_bound, upper_bound)
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_upper_bound != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":237
 *         if upper_bound is not None:
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),
 *                     lower_bound, upper_bound)             # <<<<<<<<<<<<<<
 *         else:
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),
 */
    __pyx_t_3 = __Pyx_PyInt_As_short(__pyx_cur_scope->__pyx_v_lower_bound); if (unlikely((__pyx_t_3 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyInt_As_short(__pyx_cur_scope->__pyx_v_upper_bound); if (unlikely((__pyx_t_4 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":236
 *         cdef vector[cHandle] handle_vector
 *         if upper_bound is not None:
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),             # <<<<<<<<<<<<<<
 *                     lower_bound, upper_bound)
 *         else:
 */
    opencog::attentionbank(__pyx_cur_scope->__pyx_v_self->atomspace).get_handles_by_AV(std::back_inserter(__pyx_cur_scope->__pyx_v_handle_vector), __pyx_t_3, __pyx_t_4);

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":235
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         if upper_bound is not None:             # <<<<<<<<<<<<<<
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),
 *                     lower_bound, upper_bound)
 */
    goto __pyx_L5;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":239
 *                     lower_bound, upper_bound)
 *         else:
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),             # <<<<<<<<<<<<<<
 *                     lower_bound)
 * 
 */
  /*else*/ {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":240
 *         else:
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),
 *                     lower_bound)             # <<<<<<<<<<<<<<
 * 
 *         # This code is the same for all the x iterators but there is no
 */
    __pyx_t_4 = __Pyx_PyInt_As_short(__pyx_cur_scope->__pyx_v_lower_bound); if (unlikely((__pyx_t_4 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":239
 *                     lower_bound, upper_bound)
 *         else:
 *             attentionbank(self.atomspace).get_handles_by_AV(back_inserter(handle_vector),             # <<<<<<<<<<<<<<
 *                     lower_bound)
 * 
 */
    opencog::attentionbank(__pyx_cur_scope->__pyx_v_self->atomspace).get_handles_by_AV(std::back_inserter(__pyx_cur_scope->__pyx_v_handle_vector), __pyx_t_4);
  }
  __pyx_L5:;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":247
 *         cdef vector[cHandle].iterator c_handle_iter
 *         cdef cHandle current_c_handle
 *         c_handle_iter = handle_vector.begin()             # <<<<<<<<<<<<<<
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)
 */
  __pyx_cur_scope->__pyx_v_c_handle_iter = __pyx_cur_scope->__pyx_v_handle_vector.begin();

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":248
 *         cdef cHandle current_c_handle
 *         c_handle_iter = handle_vector.begin()
 *         while c_handle_iter != handle_vector.end():             # <<<<<<<<<<<<<<
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_c_handle_iter != __pyx_cur_scope->__pyx_v_handle_vector.end()) != 0);
    if (!__pyx_t_2) break;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":249
 *         c_handle_iter = handle_vector.begin()
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)             # <<<<<<<<<<<<<<
 *             yield Atom(void_from_candle(current_c_handle), self)
 *             inc(c_handle_iter)
 */
    __pyx_cur_scope->__pyx_v_current_c_handle = (*__pyx_cur_scope->__pyx_v_c_handle_iter);

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":250
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self)             # <<<<<<<<<<<<<<
 *             inc(c_handle_iter)
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_From_long(void_from_candle(__pyx_cur_scope->__pyx_v_current_c_handle)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":251
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self)
 *             inc(c_handle_iter)             # <<<<<<<<<<<<<<
 * 
 *     def get_atoms_in_attentional_focus(self):
 */
    (++__pyx_cur_scope->__pyx_v_c_handle_iter);
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":231
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_atoms_by_av(self, lower_bound, upper_bound=None):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("xget_atoms_by_av", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":253
 *             inc(c_handle_iter)
 * 
 *     def get_atoms_in_attentional_focus(self):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_41get_atoms_in_attentional_focus(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_41get_atoms_in_attentional_focus(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_atoms_in_attentional_focus (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_40get_atoms_in_attentional_focus(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_40get_atoms_in_attentional_focus(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_atoms_in_attentional_focus", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":254
 * 
 *     def get_atoms_in_attentional_focus(self):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":255
 *     def get_atoms_in_attentional_focus(self):
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         attentionbank(self.atomspace).get_handle_set_in_attentional_focus(back_inserter(handle_vector))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":254
 * 
 *     def get_atoms_in_attentional_focus(self):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":257
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         attentionbank(self.atomspace).get_handle_set_in_attentional_focus(back_inserter(handle_vector))             # <<<<<<<<<<<<<<
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 */
  opencog::attentionbank(__pyx_v_self->atomspace).get_handle_set_in_attentional_focus(std::back_inserter(__pyx_v_handle_vector));

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":258
 *         cdef vector[cHandle] handle_vector
 *         attentionbank(self.atomspace).get_handle_set_in_attentional_focus(back_inserter(handle_vector))
 *         return convert_handle_seq_to_python_list(handle_vector, self)             # <<<<<<<<<<<<<<
 * 
 *     def xget_atoms_in_attentional_focus(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(__pyx_v_handle_vector, __pyx_v_self); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":253
 *             inc(c_handle_iter)
 * 
 *     def get_atoms_in_attentional_focus(self):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.get_atoms_in_attentional_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7opencog_9atomspace_9AtomSpace_44generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":260
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_atoms_in_attentional_focus(self):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_43xget_atoms_in_attentional_focus(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_43xget_atoms_in_attentional_focus(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xget_atoms_in_attentional_focus (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_42xget_atoms_in_attentional_focus(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_42xget_atoms_in_attentional_focus(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("xget_atoms_in_attentional_focus", 0);
  __pyx_cur_scope = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *)__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus(__pyx_ptype_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7opencog_9atomspace_9AtomSpace_44generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_xget_atoms_in_attentional_focus, __pyx_n_s_AtomSpace_xget_atoms_in_attentio); if (unlikely(!gen)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.xget_atoms_in_attentional_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7opencog_9atomspace_9AtomSpace_44generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *__pyx_cur_scope = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":261
 * 
 *     def xget_atoms_in_attentional_focus(self):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":262
 *     def xget_atoms_in_attentional_focus(self):
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         attentionbank(self.atomspace).get_handle_set_in_attentional_focus(back_inserter(handle_vector))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":261
 * 
 *     def xget_atoms_in_attentional_focus(self):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":264
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         attentionbank(self.atomspace).get_handle_set_in_attentional_focus(back_inserter(handle_vector))             # <<<<<<<<<<<<<<
 * 
 *         # This code is the same for all the x iterators but there is no
 */
  opencog::attentionbank(__pyx_cur_scope->__pyx_v_self->atomspace).get_handle_set_in_attentional_focus(std::back_inserter(__pyx_cur_scope->__pyx_v_handle_vector));

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":271
 *         cdef vector[cHandle].iterator c_handle_iter
 *         cdef cHandle current_c_handle
 *         c_handle_iter = handle_vector.begin()             # <<<<<<<<<<<<<<
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)
 */
  __pyx_cur_scope->__pyx_v_c_handle_iter = __pyx_cur_scope->__pyx_v_handle_vector.begin();

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":272
 *         cdef cHandle current_c_handle
 *         c_handle_iter = handle_vector.begin()
 *         while c_handle_iter != handle_vector.end():             # <<<<<<<<<<<<<<
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_c_handle_iter != __pyx_cur_scope->__pyx_v_handle_vector.end()) != 0);
    if (!__pyx_t_1) break;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":273
 *         c_handle_iter = handle_vector.begin()
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)             # <<<<<<<<<<<<<<
 *             yield Atom(void_from_candle(current_c_handle), self)
 *             inc(c_handle_iter)
 */
    __pyx_cur_scope->__pyx_v_current_c_handle = (*__pyx_cur_scope->__pyx_v_c_handle_iter);

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":274
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self)             # <<<<<<<<<<<<<<
 *             inc(c_handle_iter)
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(void_from_candle(__pyx_cur_scope->__pyx_v_current_c_handle)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":275
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self)
 *             inc(c_handle_iter)             # <<<<<<<<<<<<<<
 * 
 *     def get_predicates(self,
 */
    (++__pyx_cur_scope->__pyx_v_c_handle_iter);
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":260
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_atoms_in_attentional_focus(self):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xget_atoms_in_attentional_focus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":277
 *             inc(c_handle_iter)
 * 
 *     def get_predicates(self,             # <<<<<<<<<<<<<<
 *                        Atom target,
 *                        Type predicate_type = types.PredicateNode,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_46get_predicates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_46get_predicates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target = 0;
  __pyx_t_7opencog_9atomspace_Type __pyx_v_predicate_type;
  PyObject *__pyx_v_subclasses = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_predicates (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_target,&__pyx_n_s_predicate_type,&__pyx_n_s_subclasses,0};
    PyObject* values[3] = {0,0,0};

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":280
 *                        Atom target,
 *                        Type predicate_type = types.PredicateNode,
 *                        subclasses=True):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_predicate_type);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_subclasses);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_predicates") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_target = ((struct __pyx_obj_7opencog_9atomspace_Atom *)values[0]);
    if (values[1]) {
      __pyx_v_predicate_type = __Pyx_PyInt_As_short(values[1]); if (unlikely((__pyx_v_predicate_type == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_predicate_type = __pyx_k__11;
    }
    __pyx_v_subclasses = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_predicates", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.get_predicates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target), __pyx_ptype_7opencog_9atomspace_Atom, 1, "target", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_45get_predicates(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_target, __pyx_v_predicate_type, __pyx_v_subclasses);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":277
 *             inc(c_handle_iter)
 * 
 *     def get_predicates(self,             # <<<<<<<<<<<<<<
 *                        Atom target,
 *                        Type predicate_type = types.PredicateNode,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_45get_predicates(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target, __pyx_t_7opencog_9atomspace_Type __pyx_v_predicate_type, PyObject *__pyx_v_subclasses) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  int __pyx_v_want_subclasses;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_predicates", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":281
 *                        Type predicate_type = types.PredicateNode,
 *                        subclasses=True):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":282
 *                        subclasses=True):
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef bint want_subclasses = subclasses
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":281
 *                        Type predicate_type = types.PredicateNode,
 *                        subclasses=True):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":284
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         cdef bint want_subclasses = subclasses             # <<<<<<<<<<<<<<
 *         handle_vector = c_get_predicates(deref(target.handle), predicate_type,
 *                                          want_subclasses)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_subclasses); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_want_subclasses = __pyx_t_1;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":285
 *         cdef vector[cHandle] handle_vector
 *         cdef bint want_subclasses = subclasses
 *         handle_vector = c_get_predicates(deref(target.handle), predicate_type,             # <<<<<<<<<<<<<<
 *                                          want_subclasses)
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 */
  __pyx_v_handle_vector = get_predicates((*__pyx_v_target->handle), __pyx_v_predicate_type, __pyx_v_want_subclasses);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":287
 *         handle_vector = c_get_predicates(deref(target.handle), predicate_type,
 *                                          want_subclasses)
 *         return convert_handle_seq_to_python_list(handle_vector, self)             # <<<<<<<<<<<<<<
 * 
 *     def xget_predicates(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(__pyx_v_handle_vector, __pyx_v_self); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":277
 *             inc(c_handle_iter)
 * 
 *     def get_predicates(self,             # <<<<<<<<<<<<<<
 *                        Atom target,
 *                        Type predicate_type = types.PredicateNode,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.get_predicates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7opencog_9atomspace_9AtomSpace_49generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":289
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_predicates(self,             # <<<<<<<<<<<<<<
 *                         Atom target,
 *                         Type predicate_type = types.PredicateNode,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_48xget_predicates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_48xget_predicates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target = 0;
  __pyx_t_7opencog_9atomspace_Type __pyx_v_predicate_type;
  PyObject *__pyx_v_subclasses = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xget_predicates (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_target,&__pyx_n_s_predicate_type,&__pyx_n_s_subclasses,0};
    PyObject* values[3] = {0,0,0};

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":292
 *                         Atom target,
 *                         Type predicate_type = types.PredicateNode,
 *                         subclasses=True):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_predicate_type);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_subclasses);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "xget_predicates") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_target = ((struct __pyx_obj_7opencog_9atomspace_Atom *)values[0]);
    if (values[1]) {
      __pyx_v_predicate_type = __Pyx_PyInt_As_short(values[1]); if (unlikely((__pyx_v_predicate_type == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_predicate_type = __pyx_k__12;
    }
    __pyx_v_subclasses = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("xget_predicates", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.xget_predicates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target), __pyx_ptype_7opencog_9atomspace_Atom, 1, "target", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_47xget_predicates(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_target, __pyx_v_predicate_type, __pyx_v_subclasses);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":289
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_predicates(self,             # <<<<<<<<<<<<<<
 *                         Atom target,
 *                         Type predicate_type = types.PredicateNode,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_47xget_predicates(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target, __pyx_t_7opencog_9atomspace_Type __pyx_v_predicate_type, PyObject *__pyx_v_subclasses) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("xget_predicates", 0);
  __pyx_cur_scope = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *)__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates(__pyx_ptype_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_target = __pyx_v_target;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_target);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_target);
  __pyx_cur_scope->__pyx_v_predicate_type = __pyx_v_predicate_type;
  __pyx_cur_scope->__pyx_v_subclasses = __pyx_v_subclasses;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_subclasses);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_subclasses);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7opencog_9atomspace_9AtomSpace_49generator3, (PyObject *) __pyx_cur_scope, __pyx_n_s_xget_predicates, __pyx_n_s_AtomSpace_xget_predicates); if (unlikely(!gen)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.xget_predicates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7opencog_9atomspace_9AtomSpace_49generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *__pyx_cur_scope = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":293
 *                         Type predicate_type = types.PredicateNode,
 *                         subclasses=True):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":294
 *                         subclasses=True):
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef bint want_subclasses = subclasses
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":293
 *                         Type predicate_type = types.PredicateNode,
 *                         subclasses=True):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":296
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         cdef bint want_subclasses = subclasses             # <<<<<<<<<<<<<<
 *         handle_vector = c_get_predicates(deref(target.handle), predicate_type,
 *                                          want_subclasses)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_subclasses); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_cur_scope->__pyx_v_want_subclasses = __pyx_t_1;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":297
 *         cdef vector[cHandle] handle_vector
 *         cdef bint want_subclasses = subclasses
 *         handle_vector = c_get_predicates(deref(target.handle), predicate_type,             # <<<<<<<<<<<<<<
 *                                          want_subclasses)
 * 
 */
  __pyx_cur_scope->__pyx_v_handle_vector = get_predicates((*__pyx_cur_scope->__pyx_v_target->handle), __pyx_cur_scope->__pyx_v_predicate_type, __pyx_cur_scope->__pyx_v_want_subclasses);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":305
 *         cdef vector[cHandle].iterator c_handle_iter
 *         cdef cHandle current_c_handle
 *         c_handle_iter = handle_vector.begin()             # <<<<<<<<<<<<<<
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)
 */
  __pyx_cur_scope->__pyx_v_c_handle_iter = __pyx_cur_scope->__pyx_v_handle_vector.begin();

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":306
 *         cdef cHandle current_c_handle
 *         c_handle_iter = handle_vector.begin()
 *         while c_handle_iter != handle_vector.end():             # <<<<<<<<<<<<<<
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_c_handle_iter != __pyx_cur_scope->__pyx_v_handle_vector.end()) != 0);
    if (!__pyx_t_1) break;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":307
 *         c_handle_iter = handle_vector.begin()
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)             # <<<<<<<<<<<<<<
 *             yield Atom(void_from_candle(current_c_handle), self)
 *             inc(c_handle_iter)
 */
    __pyx_cur_scope->__pyx_v_current_c_handle = (*__pyx_cur_scope->__pyx_v_c_handle_iter);

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":308
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self)             # <<<<<<<<<<<<<<
 *             inc(c_handle_iter)
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(void_from_candle(__pyx_cur_scope->__pyx_v_current_c_handle)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":309
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self)
 *             inc(c_handle_iter)             # <<<<<<<<<<<<<<
 * 
 *     def get_predicates_for(self, Atom target, Atom predicate):
 */
    (++__pyx_cur_scope->__pyx_v_c_handle_iter);
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":289
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_predicates(self,             # <<<<<<<<<<<<<<
 *                         Atom target,
 *                         Type predicate_type = types.PredicateNode,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xget_predicates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":311
 *             inc(c_handle_iter)
 * 
 *     def get_predicates_for(self, Atom target, Atom predicate):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_51get_predicates_for(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_51get_predicates_for(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target = 0;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_predicate = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_predicates_for (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_target,&__pyx_n_s_predicate,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_predicate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_predicates_for", 1, 2, 2, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_predicates_for") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_target = ((struct __pyx_obj_7opencog_9atomspace_Atom *)values[0]);
    __pyx_v_predicate = ((struct __pyx_obj_7opencog_9atomspace_Atom *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_predicates_for", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.get_predicates_for", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target), __pyx_ptype_7opencog_9atomspace_Atom, 1, "target", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_predicate), __pyx_ptype_7opencog_9atomspace_Atom, 1, "predicate", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_50get_predicates_for(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_target, __pyx_v_predicate);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_50get_predicates_for(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_predicate) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_predicates_for", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":312
 * 
 *     def get_predicates_for(self, Atom target, Atom predicate):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":313
 *     def get_predicates_for(self, Atom target, Atom predicate):
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         handle_vector = c_get_predicates_for(deref(target.handle),
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":312
 * 
 *     def get_predicates_for(self, Atom target, Atom predicate):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":315
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         handle_vector = c_get_predicates_for(deref(target.handle),             # <<<<<<<<<<<<<<
 *                                              deref(predicate.handle))
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 */
  __pyx_v_handle_vector = get_predicates_for((*__pyx_v_target->handle), (*__pyx_v_predicate->handle));

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":317
 *         handle_vector = c_get_predicates_for(deref(target.handle),
 *                                              deref(predicate.handle))
 *         return convert_handle_seq_to_python_list(handle_vector, self)             # <<<<<<<<<<<<<<
 * 
 *     def xget_predicates_for(self, Atom target, Atom predicate):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(__pyx_v_handle_vector, __pyx_v_self); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":311
 *             inc(c_handle_iter)
 * 
 *     def get_predicates_for(self, Atom target, Atom predicate):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.get_predicates_for", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7opencog_9atomspace_9AtomSpace_54generator4(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":319
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_predicates_for(self, Atom target, Atom predicate):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_53xget_predicates_for(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_53xget_predicates_for(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target = 0;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_predicate = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xget_predicates_for (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_target,&__pyx_n_s_predicate,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_predicate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("xget_predicates_for", 1, 2, 2, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "xget_predicates_for") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_target = ((struct __pyx_obj_7opencog_9atomspace_Atom *)values[0]);
    __pyx_v_predicate = ((struct __pyx_obj_7opencog_9atomspace_Atom *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("xget_predicates_for", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.xget_predicates_for", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target), __pyx_ptype_7opencog_9atomspace_Atom, 1, "target", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_predicate), __pyx_ptype_7opencog_9atomspace_Atom, 1, "predicate", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_52xget_predicates_for(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_target, __pyx_v_predicate);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_52xget_predicates_for(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_target, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_predicate) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("xget_predicates_for", 0);
  __pyx_cur_scope = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *)__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for(__pyx_ptype_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_target = __pyx_v_target;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_target);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_target);
  __pyx_cur_scope->__pyx_v_predicate = __pyx_v_predicate;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_predicate);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_predicate);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7opencog_9atomspace_9AtomSpace_54generator4, (PyObject *) __pyx_cur_scope, __pyx_n_s_xget_predicates_for, __pyx_n_s_AtomSpace_xget_predicates_for); if (unlikely(!gen)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.xget_predicates_for", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7opencog_9atomspace_9AtomSpace_54generator4(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *__pyx_cur_scope = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":320
 * 
 *     def xget_predicates_for(self, Atom target, Atom predicate):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":321
 *     def xget_predicates_for(self, Atom target, Atom predicate):
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         handle_vector = c_get_predicates_for(deref(target.handle),
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":320
 * 
 *     def xget_predicates_for(self, Atom target, Atom predicate):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":323
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         handle_vector = c_get_predicates_for(deref(target.handle),             # <<<<<<<<<<<<<<
 *                                              deref(predicate.handle))
 * 
 */
  __pyx_cur_scope->__pyx_v_handle_vector = get_predicates_for((*__pyx_cur_scope->__pyx_v_target->handle), (*__pyx_cur_scope->__pyx_v_predicate->handle));

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":331
 *         cdef vector[cHandle].iterator c_handle_iter
 *         cdef cHandle current_c_handle
 *         c_handle_iter = handle_vector.begin()             # <<<<<<<<<<<<<<
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)
 */
  __pyx_cur_scope->__pyx_v_c_handle_iter = __pyx_cur_scope->__pyx_v_handle_vector.begin();

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":332
 *         cdef cHandle current_c_handle
 *         c_handle_iter = handle_vector.begin()
 *         while c_handle_iter != handle_vector.end():             # <<<<<<<<<<<<<<
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle),self)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_c_handle_iter != __pyx_cur_scope->__pyx_v_handle_vector.end()) != 0);
    if (!__pyx_t_1) break;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":333
 *         c_handle_iter = handle_vector.begin()
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)             # <<<<<<<<<<<<<<
 *             yield Atom(void_from_candle(current_c_handle),self)
 *             inc(c_handle_iter)
 */
    __pyx_cur_scope->__pyx_v_current_c_handle = (*__pyx_cur_scope->__pyx_v_c_handle_iter);

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":334
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle),self)             # <<<<<<<<<<<<<<
 *             inc(c_handle_iter)
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(void_from_candle(__pyx_cur_scope->__pyx_v_current_c_handle)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":335
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle),self)
 *             inc(c_handle_iter)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
    (++__pyx_cur_scope->__pyx_v_c_handle_iter);
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":319
 *         return convert_handle_seq_to_python_list(handle_vector, self)
 * 
 *     def xget_predicates_for(self, Atom target, Atom predicate):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xget_predicates_for", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":338
 * 
 *     @classmethod
 *     def include_incoming(cls, atoms):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the conjunction of a set of atoms and their incoming sets.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_56include_incoming(PyObject *__pyx_v_cls, PyObject *__pyx_v_atoms); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_55include_incoming[] = "\n        Returns the conjunction of a set of atoms and their incoming sets.\n\n        Example:\n        self.atomspace.include_incoming(self.atomspace.get_atoms_by_type(types.ConceptNode))\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_56include_incoming(PyObject *__pyx_v_cls, PyObject *__pyx_v_atoms) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("include_incoming (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_55include_incoming(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_atoms));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_55include_incoming(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atoms) {
  PyObject *__pyx_v_sublist = NULL;
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_v_atom = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("include_incoming", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":345
 *         self.atomspace.include_incoming(self.atomspace.get_atoms_by_type(types.ConceptNode))
 *         """
 *         return list(set(atoms +             # <<<<<<<<<<<<<<
 *                 [item for sublist in [atom.incoming for atom in atoms if len(atom.incoming) > 0] for item in sublist]))
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":346
 *         """
 *         return list(set(atoms +
 *                 [item for sublist in [atom.incoming for atom in atoms if len(atom.incoming) > 0] for item in sublist]))             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_v_atoms)) || PyTuple_CheckExact(__pyx_v_atoms)) {
    __pyx_t_3 = __pyx_v_atoms; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_atoms); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_atom, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_atom, __pyx_n_s_incoming); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = ((__pyx_t_7 > 0) != 0);
    if (__pyx_t_8) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_atom, __pyx_n_s_incoming); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_sublist, __pyx_t_2);
    __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_v_sublist)) || PyTuple_CheckExact(__pyx_v_sublist)) {
      __pyx_t_2 = __pyx_v_sublist; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_sublist); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_6);
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_item))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":345
 *         self.atomspace.include_incoming(self.atomspace.get_atoms_by_type(types.ConceptNode))
 *         """
 *         return list(set(atoms +             # <<<<<<<<<<<<<<
 *                 [item for sublist in [atom.incoming for atom in atoms if len(atom.incoming) > 0] for item in sublist]))
 * 
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_atoms, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":338
 * 
 *     @classmethod
 *     def include_incoming(cls, atoms):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the conjunction of a set of atoms and their incoming sets.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.include_incoming", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sublist);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XDECREF(__pyx_v_atom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":349
 * 
 *     @classmethod
 *     def include_outgoing(cls, atoms):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the conjunction of a set of atoms and their outgoing sets.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_58include_outgoing(PyObject *__pyx_v_cls, PyObject *__pyx_v_atoms); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_57include_outgoing[] = "\n        Returns the conjunction of a set of atoms and their outgoing sets.\n        Useful when used in combination with include_incoming.\n\n        Example:\n        self.atomspace.include_outgoing(\n            self.atomspace.include_incoming(self.atomspace.get_atoms_by_type(types.ConceptNode)))\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_58include_outgoing(PyObject *__pyx_v_cls, PyObject *__pyx_v_atoms) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("include_outgoing (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_57include_outgoing(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_atoms));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_57include_outgoing(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atoms) {
  PyObject *__pyx_v_sublist = NULL;
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_v_atom = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("include_outgoing", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":358
 *             self.atomspace.include_incoming(self.atomspace.get_atoms_by_type(types.ConceptNode)))
 *         """
 *         return list(set(atoms +             # <<<<<<<<<<<<<<
 *                 [item for sublist in [atom.out for atom in atoms if len(atom.out) > 0] for item in sublist]))
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":359
 *         """
 *         return list(set(atoms +
 *                 [item for sublist in [atom.out for atom in atoms if len(atom.out) > 0] for item in sublist]))             # <<<<<<<<<<<<<<
 * 
 *     def print_list(self):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_v_atoms)) || PyTuple_CheckExact(__pyx_v_atoms)) {
    __pyx_t_3 = __pyx_v_atoms; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_atoms); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_atom, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_atom, __pyx_n_s_out); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = ((__pyx_t_7 > 0) != 0);
    if (__pyx_t_8) {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_atom, __pyx_n_s_out); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_sublist, __pyx_t_2);
    __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_v_sublist)) || PyTuple_CheckExact(__pyx_v_sublist)) {
      __pyx_t_2 = __pyx_v_sublist; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_sublist); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_6);
      __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_item))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":358
 *             self.atomspace.include_incoming(self.atomspace.get_atoms_by_type(types.ConceptNode)))
 *         """
 *         return list(set(atoms +             # <<<<<<<<<<<<<<
 *                 [item for sublist in [atom.out for atom in atoms if len(atom.out) > 0] for item in sublist]))
 * 
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_atoms, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":349
 * 
 *     @classmethod
 *     def include_outgoing(cls, atoms):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the conjunction of a set of atoms and their outgoing sets.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.include_outgoing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sublist);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XDECREF(__pyx_v_atom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":361
 *                 [item for sublist in [atom.out for atom in atoms if len(atom.out) > 0] for item in sublist]))
 * 
 *     def print_list(self):             # <<<<<<<<<<<<<<
 *     #    self.atomspace.print_list()
 *          pass
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_60print_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_60print_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_list (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_59print_list(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_59print_list(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_list", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":365
 *          pass
 * 
 * cdef api object py_atomspace(cAtomSpace *c_atomspace) with gil:             # <<<<<<<<<<<<<<
 *     cdef AtomSpace atomspace = AtomSpace_factory(c_atomspace)
 *     return atomspace
 */

static PyObject *__pyx_f_7opencog_9atomspace_py_atomspace(opencog::AtomSpace *__pyx_v_c_atomspace) {
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_atomspace = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("py_atomspace", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":366
 * 
 * cdef api object py_atomspace(cAtomSpace *c_atomspace) with gil:
 *     cdef AtomSpace atomspace = AtomSpace_factory(c_atomspace)             # <<<<<<<<<<<<<<
 *     return atomspace
 * 
 */
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_AtomSpace_factory(__pyx_v_c_atomspace); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7opencog_9atomspace_AtomSpace))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_atomspace = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":367
 * cdef api object py_atomspace(cAtomSpace *c_atomspace) with gil:
 *     cdef AtomSpace atomspace = AtomSpace_factory(c_atomspace)
 *     return atomspace             # <<<<<<<<<<<<<<
 * 
 * cdef api object py_atom(PANDLE lptr, object atomspace):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atomspace));
  __pyx_r = ((PyObject *)__pyx_v_atomspace);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":365
 *          pass
 * 
 * cdef api object py_atomspace(cAtomSpace *c_atomspace) with gil:             # <<<<<<<<<<<<<<
 *     cdef AtomSpace atomspace = AtomSpace_factory(c_atomspace)
 *     return atomspace
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.py_atomspace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atomspace);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":369
 *     return atomspace
 * 
 * cdef api object py_atom(PANDLE lptr, object atomspace):             # <<<<<<<<<<<<<<
 *     cdef Atom atom = Atom(lptr, atomspace)
 *     return atom
 */

static PyObject *__pyx_f_7opencog_9atomspace_py_atom(PANDLE __pyx_v_lptr, PyObject *__pyx_v_atomspace) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_atom", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":370
 * 
 * cdef api object py_atom(PANDLE lptr, object atomspace):
 *     cdef Atom atom = Atom(lptr, atomspace)             # <<<<<<<<<<<<<<
 *     return atom
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_lptr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_atomspace);
  __Pyx_GIVEREF(__pyx_v_atomspace);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_atomspace);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_atom = ((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":371
 * cdef api object py_atom(PANDLE lptr, object atomspace):
 *     cdef Atom atom = Atom(lptr, atomspace)
 *     return atom             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atom));
  __pyx_r = ((PyObject *)__pyx_v_atom);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":369
 *     return atomspace
 * 
 * cdef api object py_atom(PANDLE lptr, object atomspace):             # <<<<<<<<<<<<<<
 *     cdef Atom atom = Atom(lptr, atomspace)
 *     return atom
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.py_atom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":5
 * cdef class Atom(object):
 * 
 *     def __cinit__(self, PANDLE lptr, AtomSpace a):             # <<<<<<<<<<<<<<
 *         atomo = atom_from_the_void(lptr)
 *         self.handle = new cHandle(atomo)
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_4Atom_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opencog_9atomspace_4Atom_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PANDLE __pyx_v_lptr;
  CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_a = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lptr,&__pyx_n_s_a,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lptr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lptr = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_lptr == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_a = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.Atom.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7opencog_9atomspace_AtomSpace, 1, "a", 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom___cinit__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), __pyx_v_lptr, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_4Atom___cinit__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PANDLE __pyx_v_lptr, CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_a) {
  opencog::Handle __pyx_v_atomo;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":6
 * 
 *     def __cinit__(self, PANDLE lptr, AtomSpace a):
 *         atomo = atom_from_the_void(lptr)             # <<<<<<<<<<<<<<
 *         self.handle = new cHandle(atomo)
 * 
 */
  __pyx_v_atomo = atom_from_the_void(__pyx_v_lptr);

  /* "../../../../opencog/cython/opencog/atom.pyx":7
 *     def __cinit__(self, PANDLE lptr, AtomSpace a):
 *         atomo = atom_from_the_void(lptr)
 *         self.handle = new cHandle(atomo)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->handle = new opencog::Handle(__pyx_v_atomo);

  /* "../../../../opencog/cython/opencog/atom.pyx":5
 * cdef class Atom(object):
 * 
 *     def __cinit__(self, PANDLE lptr, AtomSpace a):             # <<<<<<<<<<<<<<
 *         atomo = atom_from_the_void(lptr)
 *         self.handle = new cHandle(atomo)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":9
 *         self.handle = new cHandle(atomo)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.handle
 * 
 */

/* Python wrapper */
static void __pyx_pw_7opencog_9atomspace_4Atom_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7opencog_9atomspace_4Atom_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7opencog_9atomspace_4Atom_2__dealloc__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7opencog_9atomspace_4Atom_2__dealloc__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":10
 * 
 *     def __dealloc__(self):
 *         del self.handle             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, PANDLE lptr, AtomSpace a):
 */
  delete __pyx_v_self->handle;

  /* "../../../../opencog/cython/opencog/atom.pyx":9
 *         self.handle = new cHandle(atomo)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.handle
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../opencog/cython/opencog/atom.pyx":12
 *         del self.handle
 * 
 *     def __init__(self, PANDLE lptr, AtomSpace a):             # <<<<<<<<<<<<<<
 *         # self.handle = h is set in __cinit__ above
 * 
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_4Atom_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opencog_9atomspace_4Atom_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PANDLE __pyx_v_lptr;
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_a = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lptr,&__pyx_n_s_a,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lptr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lptr = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_lptr == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_a = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.Atom.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7opencog_9atomspace_AtomSpace, 1, "a", 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_4__init__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), __pyx_v_lptr, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_4Atom_4__init__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, CYTHON_UNUSED PANDLE __pyx_v_lptr, struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_a) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":17
 *         # cache the results after first retrieval of
 *         # immutable properties
 *         self._atom_type = None             # <<<<<<<<<<<<<<
 *         self._name = None
 *         self._outgoing = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_atom_type);
  __Pyx_DECREF(__pyx_v_self->_atom_type);
  __pyx_v_self->_atom_type = Py_None;

  /* "../../../../opencog/cython/opencog/atom.pyx":18
 *         # immutable properties
 *         self._atom_type = None
 *         self._name = None             # <<<<<<<<<<<<<<
 *         self._outgoing = None
 *         self.atomspace = a
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_name);
  __Pyx_DECREF(__pyx_v_self->_name);
  __pyx_v_self->_name = Py_None;

  /* "../../../../opencog/cython/opencog/atom.pyx":19
 *         self._atom_type = None
 *         self._name = None
 *         self._outgoing = None             # <<<<<<<<<<<<<<
 *         self.atomspace = a
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_outgoing);
  __Pyx_DECREF(__pyx_v_self->_outgoing);
  __pyx_v_self->_outgoing = Py_None;

  /* "../../../../opencog/cython/opencog/atom.pyx":20
 *         self._name = None
 *         self._outgoing = None
 *         self.atomspace = a             # <<<<<<<<<<<<<<
 * 
 *     def __nonzero__(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_a));
  __Pyx_GOTREF(__pyx_v_self->atomspace);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->atomspace));
  __pyx_v_self->atomspace = __pyx_v_a;

  /* "../../../../opencog/cython/opencog/atom.pyx":12
 *         del self.handle
 * 
 *     def __init__(self, PANDLE lptr, AtomSpace a):             # <<<<<<<<<<<<<<
 *         # self.handle = h is set in __cinit__ above
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":22
 *         self.atomspace = a
 * 
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         """ Allows boolean comparison, return false is handle is
 *         UNDEFINED or doesn't exist in AtomSpace """
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_4Atom_7__nonzero__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7opencog_9atomspace_4Atom_7__nonzero__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__nonzero__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_6__nonzero__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_4Atom_6__nonzero__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__nonzero__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":25
 *         """ Allows boolean comparison, return false is handle is
 *         UNDEFINED or doesn't exist in AtomSpace """
 *         if self.handle:             # <<<<<<<<<<<<<<
 *             return self.atomspace.is_valid(self)
 *         else: return False
 */
  __pyx_t_1 = (__pyx_v_self->handle != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":26
 *         UNDEFINED or doesn't exist in AtomSpace """
 *         if self.handle:
 *             return self.atomspace.is_valid(self)             # <<<<<<<<<<<<<<
 *         else: return False
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->atomspace), __pyx_n_s_is_valid); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_self));
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":25
 *         """ Allows boolean comparison, return false is handle is
 *         UNDEFINED or doesn't exist in AtomSpace """
 *         if self.handle:             # <<<<<<<<<<<<<<
 *             return self.atomspace.is_valid(self)
 *         else: return False
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":27
 *         if self.handle:
 *             return self.atomspace.is_valid(self)
 *         else: return False             # <<<<<<<<<<<<<<
 * 
 *     property atomspace:
 */
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":22
 *         self.atomspace = a
 * 
 *     def __nonzero__(self):             # <<<<<<<<<<<<<<
 *         """ Allows boolean comparison, return false is handle is
 *         UNDEFINED or doesn't exist in AtomSpace """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.Atom.__nonzero__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":30
 * 
 *     property atomspace:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.atomspace
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_9atomspace_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_9atomspace_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_9atomspace___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_9atomspace___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":31
 *     property atomspace:
 *         def __get__(self):
 *             return self.atomspace             # <<<<<<<<<<<<<<
 * 
 *     property name:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->atomspace));
  __pyx_r = ((PyObject *)__pyx_v_self->atomspace);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":30
 * 
 *     property atomspace:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.atomspace
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":34
 * 
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr
 *             if self._name is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_4name___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_4name___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":36
 *         def __get__(self):
 *             cdef cAtom* atom_ptr
 *             if self._name is None:             # <<<<<<<<<<<<<<
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 */
  __pyx_t_1 = (__pyx_v_self->_name == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/atom.pyx":37
 *             cdef cAtom* atom_ptr
 *             if self._name is None:
 *                 atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 *                     return None
 */
    __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

    /* "../../../../opencog/cython/opencog/atom.pyx":38
 *             if self._name is None:
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                     return None
 *                 if atom_ptr.is_node():
 */
    __pyx_t_2 = ((__pyx_v_atom_ptr == NULL) != 0);
    if (__pyx_t_2) {

      /* "../../../../opencog/cython/opencog/atom.pyx":39
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 *                     return None             # <<<<<<<<<<<<<<
 *                 if atom_ptr.is_node():
 *                     self._name = atom_ptr.get_name().decode('UTF-8')
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;

      /* "../../../../opencog/cython/opencog/atom.pyx":38
 *             if self._name is None:
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                     return None
 *                 if atom_ptr.is_node():
 */
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":40
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 *                     return None
 *                 if atom_ptr.is_node():             # <<<<<<<<<<<<<<
 *                     self._name = atom_ptr.get_name().decode('UTF-8')
 *                 else:
 */
    __pyx_t_2 = (__pyx_v_atom_ptr->is_node() != 0);
    if (__pyx_t_2) {

      /* "../../../../opencog/cython/opencog/atom.pyx":41
 *                     return None
 *                 if atom_ptr.is_node():
 *                     self._name = atom_ptr.get_name().decode('UTF-8')             # <<<<<<<<<<<<<<
 *                 else:
 *                     self._name = ""
 */
      __pyx_t_3 = __Pyx_decode_cpp_string(__pyx_v_atom_ptr->get_name(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->_name);
      __Pyx_DECREF(__pyx_v_self->_name);
      __pyx_v_self->_name = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "../../../../opencog/cython/opencog/atom.pyx":40
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 *                     return None
 *                 if atom_ptr.is_node():             # <<<<<<<<<<<<<<
 *                     self._name = atom_ptr.get_name().decode('UTF-8')
 *                 else:
 */
      goto __pyx_L5;
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":43
 *                     self._name = atom_ptr.get_name().decode('UTF-8')
 *                 else:
 *                     self._name = ""             # <<<<<<<<<<<<<<
 *             return self._name
 * 
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_kp_s_);
      __Pyx_GIVEREF(__pyx_kp_s_);
      __Pyx_GOTREF(__pyx_v_self->_name);
      __Pyx_DECREF(__pyx_v_self->_name);
      __pyx_v_self->_name = __pyx_kp_s_;
    }
    __pyx_L5:;

    /* "../../../../opencog/cython/opencog/atom.pyx":36
 *         def __get__(self):
 *             cdef cAtom* atom_ptr
 *             if self._name is None:             # <<<<<<<<<<<<<<
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":44
 *                 else:
 *                     self._name = ""
 *             return self._name             # <<<<<<<<<<<<<<
 * 
 *     property tv:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_name);
  __pyx_r = __pyx_v_self->_name;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":34
 * 
 *     property name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr
 *             if self._name is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.Atom.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":47
 * 
 *     property tv:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             cdef tv_ptr tvp
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_2tv_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_2tv_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_2tv___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_2tv___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  std::shared_ptr<const opencog::TruthValue> __pyx_v_tvp;
  struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_pytv = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":48
 *     property tv:
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             cdef tv_ptr tvp
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":50
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             cdef tv_ptr tvp
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             tvp = atom_ptr.getTruthValue()
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":51
 *             cdef tv_ptr tvp
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None             # <<<<<<<<<<<<<<
 *             tvp = atom_ptr.getTruthValue()
 *             if (not tvp.get()):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":50
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             cdef tv_ptr tvp
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             tvp = atom_ptr.getTruthValue()
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":52
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 *             tvp = atom_ptr.getTruthValue()             # <<<<<<<<<<<<<<
 *             if (not tvp.get()):
 *                 pytv = TruthValue()
 */
  __pyx_v_tvp = __pyx_v_atom_ptr->getTruthValue();

  /* "../../../../opencog/cython/opencog/atom.pyx":53
 *                 return None
 *             tvp = atom_ptr.getTruthValue()
 *             if (not tvp.get()):             # <<<<<<<<<<<<<<
 *                 pytv = TruthValue()
 *                 pytv.cobj = new tv_ptr(tvp) # make copy of smart pointer
 */
  __pyx_t_1 = ((!(__pyx_v_tvp.get() != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":54
 *             tvp = atom_ptr.getTruthValue()
 *             if (not tvp.get()):
 *                 pytv = TruthValue()             # <<<<<<<<<<<<<<
 *                 pytv.cobj = new tv_ptr(tvp) # make copy of smart pointer
 *                 return pytv
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_TruthValue), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_pytv = ((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "../../../../opencog/cython/opencog/atom.pyx":55
 *             if (not tvp.get()):
 *                 pytv = TruthValue()
 *                 pytv.cobj = new tv_ptr(tvp) # make copy of smart pointer             # <<<<<<<<<<<<<<
 *                 return pytv
 *             return TruthValue(tvp.get().get_mean(), tvp.get().get_confidence())
 */
    __pyx_v_pytv->cobj = new std::shared_ptr<const opencog::TruthValue>(__pyx_v_tvp);

    /* "../../../../opencog/cython/opencog/atom.pyx":56
 *                 pytv = TruthValue()
 *                 pytv.cobj = new tv_ptr(tvp) # make copy of smart pointer
 *                 return pytv             # <<<<<<<<<<<<<<
 *             return TruthValue(tvp.get().get_mean(), tvp.get().get_confidence())
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_pytv));
    __pyx_r = ((PyObject *)__pyx_v_pytv);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":53
 *                 return None
 *             tvp = atom_ptr.getTruthValue()
 *             if (not tvp.get()):             # <<<<<<<<<<<<<<
 *                 pytv = TruthValue()
 *                 pytv.cobj = new tv_ptr(tvp) # make copy of smart pointer
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":57
 *                 pytv.cobj = new tv_ptr(tvp) # make copy of smart pointer
 *                 return pytv
 *             return TruthValue(tvp.get().get_mean(), tvp.get().get_confidence())             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, truth_value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_tvp.get()->get_mean()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_tvp.get()->get_confidence()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_TruthValue), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":47
 * 
 *     property tv:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             cdef tv_ptr tvp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opencog.atomspace.Atom.tv.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pytv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":59
 *             return TruthValue(tvp.get().get_mean(), tvp.get().get_confidence())
 * 
 *         def __set__(self, truth_value):             # <<<<<<<<<<<<<<
 *             try:
 *                 assert isinstance(truth_value, TruthValue)
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_4Atom_2tv_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_truth_value); /*proto*/
static int __pyx_pw_7opencog_9atomspace_4Atom_2tv_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_truth_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_2tv_2__set__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_truth_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_4Atom_2tv_2__set__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_truth_value) {
  opencog::Atom *__pyx_v_atom_ptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":60
 * 
 *         def __set__(self, truth_value):
 *             try:             # <<<<<<<<<<<<<<
 *                 assert isinstance(truth_value, TruthValue)
 *             except AssertionError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../opencog/cython/opencog/atom.pyx":61
 *         def __set__(self, truth_value):
 *             try:
 *                 assert isinstance(truth_value, TruthValue)             # <<<<<<<<<<<<<<
 *             except AssertionError:
 *                 raise TypeError("atom.av property needs a TruthValue object")
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_truth_value, __pyx_ptype_7opencog_9atomspace_TruthValue); 
        if (unlikely(!(__pyx_t_4 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          {__pyx_filename = __pyx_f[3]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      #endif

      /* "../../../../opencog/cython/opencog/atom.pyx":60
 * 
 *         def __set__(self, truth_value):
 *             try:             # <<<<<<<<<<<<<<
 *                 assert isinstance(truth_value, TruthValue)
 *             except AssertionError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;

    /* "../../../../opencog/cython/opencog/atom.pyx":62
 *             try:
 *                 assert isinstance(truth_value, TruthValue)
 *             except AssertionError:             # <<<<<<<<<<<<<<
 *                 raise TypeError("atom.av property needs a TruthValue object")
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */
    __pyx_t_5 = PyErr_ExceptionMatches(__pyx_builtin_AssertionError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("opencog.atomspace.Atom.tv.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "../../../../opencog/cython/opencog/atom.pyx":63
 *                 assert isinstance(truth_value, TruthValue)
 *             except AssertionError:
 *                 raise TypeError("atom.av property needs a TruthValue object")             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../opencog/cython/opencog/atom.pyx":60
 * 
 *         def __set__(self, truth_value):
 *             try:             # <<<<<<<<<<<<<<
 *                 assert isinstance(truth_value, TruthValue)
 *             except AssertionError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":64
 *             except AssertionError:
 *                 raise TypeError("atom.av property needs a TruthValue object")
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":65
 *                 raise TypeError("atom.av property needs a TruthValue object")
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return
 *             atom_ptr.setTruthValue(deref((<TruthValue>truth_value)._tvptr()))
 */
  __pyx_t_4 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_4) {

    /* "../../../../opencog/cython/opencog/atom.pyx":66
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return             # <<<<<<<<<<<<<<
 *             atom_ptr.setTruthValue(deref((<TruthValue>truth_value)._tvptr()))
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":65
 *                 raise TypeError("atom.av property needs a TruthValue object")
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return
 *             atom_ptr.setTruthValue(deref((<TruthValue>truth_value)._tvptr()))
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":67
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return
 *             atom_ptr.setTruthValue(deref((<TruthValue>truth_value)._tvptr()))             # <<<<<<<<<<<<<<
 * 
 *     property av:
 */
  __pyx_v_atom_ptr->setTruthValue((*((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_truth_value)->__pyx_vtab)->_tvptr(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_truth_value))));

  /* "../../../../opencog/cython/opencog/atom.pyx":59
 *             return TruthValue(tvp.get().get_mean(), tvp.get().get_confidence())
 * 
 *         def __set__(self, truth_value):             # <<<<<<<<<<<<<<
 *             try:
 *                 assert isinstance(truth_value, TruthValue)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("opencog.atomspace.Atom.tv.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":70
 * 
 *     property av:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_2av_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_2av_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_2av___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_2av___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  av_type __pyx_v_sti;
  av_type __pyx_v_lti;
  av_type __pyx_v_vlti;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":71
 *     property av:
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":72
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             sti = get_sti(self.handle[0])
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":73
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None             # <<<<<<<<<<<<<<
 *             sti = get_sti(self.handle[0])
 *             lti = get_lti(self.handle[0])
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":72
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             sti = get_sti(self.handle[0])
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":74
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 *             sti = get_sti(self.handle[0])             # <<<<<<<<<<<<<<
 *             lti = get_lti(self.handle[0])
 *             vlti = get_vlti(self.handle[0])
 */
  __pyx_v_sti = opencog::get_sti((__pyx_v_self->handle[0]));

  /* "../../../../opencog/cython/opencog/atom.pyx":75
 *                 return None
 *             sti = get_sti(self.handle[0])
 *             lti = get_lti(self.handle[0])             # <<<<<<<<<<<<<<
 *             vlti = get_vlti(self.handle[0])
 *             return { "sti": sti, "lti": lti, "vlti": vlti }
 */
  __pyx_v_lti = opencog::get_lti((__pyx_v_self->handle[0]));

  /* "../../../../opencog/cython/opencog/atom.pyx":76
 *             sti = get_sti(self.handle[0])
 *             lti = get_lti(self.handle[0])
 *             vlti = get_vlti(self.handle[0])             # <<<<<<<<<<<<<<
 *             return { "sti": sti, "lti": lti, "vlti": vlti }
 *         def __set__(self, av_dict):
 */
  __pyx_v_vlti = opencog::get_vlti((__pyx_v_self->handle[0]));

  /* "../../../../opencog/cython/opencog/atom.pyx":77
 *             lti = get_lti(self.handle[0])
 *             vlti = get_vlti(self.handle[0])
 *             return { "sti": sti, "lti": lti, "vlti": vlti }             # <<<<<<<<<<<<<<
 *         def __set__(self, av_dict):
 *             try:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_sti); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_sti, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_lti); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_lti, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_vlti); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_vlti, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":70
 * 
 *     property av:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.Atom.av.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":78
 *             vlti = get_vlti(self.handle[0])
 *             return { "sti": sti, "lti": lti, "vlti": vlti }
 *         def __set__(self, av_dict):             # <<<<<<<<<<<<<<
 *             try:
 *                 assert isinstance(av_dict, dict)
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_4Atom_2av_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_av_dict); /*proto*/
static int __pyx_pw_7opencog_9atomspace_4Atom_2av_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_av_dict) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_2av_2__set__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_av_dict));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_4Atom_2av_2__set__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_av_dict) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_v_sti = NULL;
  PyObject *__pyx_v_lti = NULL;
  PyObject *__pyx_v_vlti = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  av_type __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":79
 *             return { "sti": sti, "lti": lti, "vlti": vlti }
 *         def __set__(self, av_dict):
 *             try:             # <<<<<<<<<<<<<<
 *                 assert isinstance(av_dict, dict)
 *             except AssertionError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../opencog/cython/opencog/atom.pyx":80
 *         def __set__(self, av_dict):
 *             try:
 *                 assert isinstance(av_dict, dict)             # <<<<<<<<<<<<<<
 *             except AssertionError:
 *                 raise TypeError("atom.av property needs a dictionary object")
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_4 = PyDict_Check(__pyx_v_av_dict); 
        if (unlikely(!(__pyx_t_4 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          {__pyx_filename = __pyx_f[3]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      #endif

      /* "../../../../opencog/cython/opencog/atom.pyx":79
 *             return { "sti": sti, "lti": lti, "vlti": vlti }
 *         def __set__(self, av_dict):
 *             try:             # <<<<<<<<<<<<<<
 *                 assert isinstance(av_dict, dict)
 *             except AssertionError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;

    /* "../../../../opencog/cython/opencog/atom.pyx":81
 *             try:
 *                 assert isinstance(av_dict, dict)
 *             except AssertionError:             # <<<<<<<<<<<<<<
 *                 raise TypeError("atom.av property needs a dictionary object")
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */
    __pyx_t_5 = PyErr_ExceptionMatches(__pyx_builtin_AssertionError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("opencog.atomspace.Atom.av.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "../../../../opencog/cython/opencog/atom.pyx":82
 *                 assert isinstance(av_dict, dict)
 *             except AssertionError:
 *                 raise TypeError("atom.av property needs a dictionary object")             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../opencog/cython/opencog/atom.pyx":79
 *             return { "sti": sti, "lti": lti, "vlti": vlti }
 *         def __set__(self, av_dict):
 *             try:             # <<<<<<<<<<<<<<
 *                 assert isinstance(av_dict, dict)
 *             except AssertionError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":83
 *             except AssertionError:
 *                 raise TypeError("atom.av property needs a dictionary object")
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":84
 *                 raise TypeError("atom.av property needs a dictionary object")
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return
 *             if av_dict:
 */
  __pyx_t_4 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_4) {

    /* "../../../../opencog/cython/opencog/atom.pyx":85
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return             # <<<<<<<<<<<<<<
 *             if av_dict:
 *                 if "sti" in av_dict: sti = av_dict["sti"]
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":84
 *                 raise TypeError("atom.av property needs a dictionary object")
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return
 *             if av_dict:
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":86
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return
 *             if av_dict:             # <<<<<<<<<<<<<<
 *                 if "sti" in av_dict: sti = av_dict["sti"]
 *                 if "lti" in av_dict: lti = av_dict["lti"]
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_av_dict); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "../../../../opencog/cython/opencog/atom.pyx":87
 *                 return
 *             if av_dict:
 *                 if "sti" in av_dict: sti = av_dict["sti"]             # <<<<<<<<<<<<<<
 *                 if "lti" in av_dict: lti = av_dict["lti"]
 *                 if "vlti" in av_dict: vlti = av_dict["vlti"]
 */
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_sti, __pyx_v_av_dict, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = (__pyx_t_4 != 0);
    if (__pyx_t_10) {
      __pyx_t_8 = PyObject_GetItem(__pyx_v_av_dict, __pyx_n_s_sti); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_v_sti = __pyx_t_8;
      __pyx_t_8 = 0;
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":88
 *             if av_dict:
 *                 if "sti" in av_dict: sti = av_dict["sti"]
 *                 if "lti" in av_dict: lti = av_dict["lti"]             # <<<<<<<<<<<<<<
 *                 if "vlti" in av_dict: vlti = av_dict["vlti"]
 *             if sti:
 */
    __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_lti, __pyx_v_av_dict, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = (__pyx_t_10 != 0);
    if (__pyx_t_4) {
      __pyx_t_8 = PyObject_GetItem(__pyx_v_av_dict, __pyx_n_s_lti); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_v_lti = __pyx_t_8;
      __pyx_t_8 = 0;
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":89
 *                 if "sti" in av_dict: sti = av_dict["sti"]
 *                 if "lti" in av_dict: lti = av_dict["lti"]
 *                 if "vlti" in av_dict: vlti = av_dict["vlti"]             # <<<<<<<<<<<<<<
 *             if sti:
 *                 attentionbank(self.atomspace.atomspace).set_sti(self.handle[0], sti)
 */
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_vlti, __pyx_v_av_dict, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = (__pyx_t_4 != 0);
    if (__pyx_t_10) {
      __pyx_t_8 = PyObject_GetItem(__pyx_v_av_dict, __pyx_n_s_vlti); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_v_vlti = __pyx_t_8;
      __pyx_t_8 = 0;
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":86
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return
 *             if av_dict:             # <<<<<<<<<<<<<<
 *                 if "sti" in av_dict: sti = av_dict["sti"]
 *                 if "lti" in av_dict: lti = av_dict["lti"]
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":90
 *                 if "lti" in av_dict: lti = av_dict["lti"]
 *                 if "vlti" in av_dict: vlti = av_dict["vlti"]
 *             if sti:             # <<<<<<<<<<<<<<
 *                 attentionbank(self.atomspace.atomspace).set_sti(self.handle[0], sti)
 *             if lti:
 */
  if (unlikely(!__pyx_v_sti)) { __Pyx_RaiseUnboundLocalError("sti"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_sti); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_10) {

    /* "../../../../opencog/cython/opencog/atom.pyx":91
 *                 if "vlti" in av_dict: vlti = av_dict["vlti"]
 *             if sti:
 *                 attentionbank(self.atomspace.atomspace).set_sti(self.handle[0], sti)             # <<<<<<<<<<<<<<
 *             if lti:
 *                 attentionbank(self.atomspace.atomspace).set_lti(self.handle[0], lti)
 */
    if (unlikely(!__pyx_v_sti)) { __Pyx_RaiseUnboundLocalError("sti"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_11 = __Pyx_PyInt_As_short(__pyx_v_sti); if (unlikely((__pyx_t_11 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    opencog::attentionbank(__pyx_v_self->atomspace->atomspace).set_sti((__pyx_v_self->handle[0]), __pyx_t_11);

    /* "../../../../opencog/cython/opencog/atom.pyx":90
 *                 if "lti" in av_dict: lti = av_dict["lti"]
 *                 if "vlti" in av_dict: vlti = av_dict["vlti"]
 *             if sti:             # <<<<<<<<<<<<<<
 *                 attentionbank(self.atomspace.atomspace).set_sti(self.handle[0], sti)
 *             if lti:
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":92
 *             if sti:
 *                 attentionbank(self.atomspace.atomspace).set_sti(self.handle[0], sti)
 *             if lti:             # <<<<<<<<<<<<<<
 *                 attentionbank(self.atomspace.atomspace).set_lti(self.handle[0], lti)
 *             if vlti:
 */
  if (unlikely(!__pyx_v_lti)) { __Pyx_RaiseUnboundLocalError("lti"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_lti); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_10) {

    /* "../../../../opencog/cython/opencog/atom.pyx":93
 *                 attentionbank(self.atomspace.atomspace).set_sti(self.handle[0], sti)
 *             if lti:
 *                 attentionbank(self.atomspace.atomspace).set_lti(self.handle[0], lti)             # <<<<<<<<<<<<<<
 *             if vlti:
 *                 vlti = vlti - get_vlti(self.handle[0])
 */
    if (unlikely(!__pyx_v_lti)) { __Pyx_RaiseUnboundLocalError("lti"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_11 = __Pyx_PyInt_As_short(__pyx_v_lti); if (unlikely((__pyx_t_11 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    opencog::attentionbank(__pyx_v_self->atomspace->atomspace).set_lti((__pyx_v_self->handle[0]), __pyx_t_11);

    /* "../../../../opencog/cython/opencog/atom.pyx":92
 *             if sti:
 *                 attentionbank(self.atomspace.atomspace).set_sti(self.handle[0], sti)
 *             if lti:             # <<<<<<<<<<<<<<
 *                 attentionbank(self.atomspace.atomspace).set_lti(self.handle[0], lti)
 *             if vlti:
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":94
 *             if lti:
 *                 attentionbank(self.atomspace.atomspace).set_lti(self.handle[0], lti)
 *             if vlti:             # <<<<<<<<<<<<<<
 *                 vlti = vlti - get_vlti(self.handle[0])
 *                 if vlti > 0:
 */
  if (unlikely(!__pyx_v_vlti)) { __Pyx_RaiseUnboundLocalError("vlti"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_vlti); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_10) {

    /* "../../../../opencog/cython/opencog/atom.pyx":95
 *                 attentionbank(self.atomspace.atomspace).set_lti(self.handle[0], lti)
 *             if vlti:
 *                 vlti = vlti - get_vlti(self.handle[0])             # <<<<<<<<<<<<<<
 *                 if vlti > 0:
 *                     while vlti > 0:
 */
    if (unlikely(!__pyx_v_vlti)) { __Pyx_RaiseUnboundLocalError("vlti"); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_8 = __Pyx_PyInt_From_short(opencog::get_vlti((__pyx_v_self->handle[0]))); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyNumber_Subtract(__pyx_v_vlti, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_vlti, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "../../../../opencog/cython/opencog/atom.pyx":96
 *             if vlti:
 *                 vlti = vlti - get_vlti(self.handle[0])
 *                 if vlti > 0:             # <<<<<<<<<<<<<<
 *                     while vlti > 0:
 *                         self.increment_vlti()
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_vlti, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_10) {

      /* "../../../../opencog/cython/opencog/atom.pyx":97
 *                 vlti = vlti - get_vlti(self.handle[0])
 *                 if vlti > 0:
 *                     while vlti > 0:             # <<<<<<<<<<<<<<
 *                         self.increment_vlti()
 *                         vlti = vlti - 1
 */
      while (1) {
        __pyx_t_7 = PyObject_RichCompare(__pyx_v_vlti, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (!__pyx_t_10) break;

        /* "../../../../opencog/cython/opencog/atom.pyx":98
 *                 if vlti > 0:
 *                     while vlti > 0:
 *                         self.increment_vlti()             # <<<<<<<<<<<<<<
 *                         vlti = vlti - 1
 *                 if vlti < 0:
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_increment_vlti); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        if (__pyx_t_6) {
          __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else {
          __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "../../../../opencog/cython/opencog/atom.pyx":99
 *                     while vlti > 0:
 *                         self.increment_vlti()
 *                         vlti = vlti - 1             # <<<<<<<<<<<<<<
 *                 if vlti < 0:
 *                     while vlti < 0:
 */
        __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_v_vlti, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF_SET(__pyx_v_vlti, __pyx_t_7);
        __pyx_t_7 = 0;
      }

      /* "../../../../opencog/cython/opencog/atom.pyx":96
 *             if vlti:
 *                 vlti = vlti - get_vlti(self.handle[0])
 *                 if vlti > 0:             # <<<<<<<<<<<<<<
 *                     while vlti > 0:
 *                         self.increment_vlti()
 */
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":100
 *                         self.increment_vlti()
 *                         vlti = vlti - 1
 *                 if vlti < 0:             # <<<<<<<<<<<<<<
 *                     while vlti < 0:
 *                         self.decrement_vlti()
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_vlti, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_10) {

      /* "../../../../opencog/cython/opencog/atom.pyx":101
 *                         vlti = vlti - 1
 *                 if vlti < 0:
 *                     while vlti < 0:             # <<<<<<<<<<<<<<
 *                         self.decrement_vlti()
 *                         vlti = vlti + 1
 */
      while (1) {
        __pyx_t_7 = PyObject_RichCompare(__pyx_v_vlti, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (!__pyx_t_10) break;

        /* "../../../../opencog/cython/opencog/atom.pyx":102
 *                 if vlti < 0:
 *                     while vlti < 0:
 *                         self.decrement_vlti()             # <<<<<<<<<<<<<<
 *                         vlti = vlti + 1
 * 
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_decrement_vlti); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        if (__pyx_t_6) {
          __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else {
          __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "../../../../opencog/cython/opencog/atom.pyx":103
 *                     while vlti < 0:
 *                         self.decrement_vlti()
 *                         vlti = vlti + 1             # <<<<<<<<<<<<<<
 * 
 *     property sti:
 */
        __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_vlti, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF_SET(__pyx_v_vlti, __pyx_t_7);
        __pyx_t_7 = 0;
      }

      /* "../../../../opencog/cython/opencog/atom.pyx":100
 *                         self.increment_vlti()
 *                         vlti = vlti - 1
 *                 if vlti < 0:             # <<<<<<<<<<<<<<
 *                     while vlti < 0:
 *                         self.decrement_vlti()
 */
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":94
 *             if lti:
 *                 attentionbank(self.atomspace.atomspace).set_lti(self.handle[0], lti)
 *             if vlti:             # <<<<<<<<<<<<<<
 *                 vlti = vlti - get_vlti(self.handle[0])
 *                 if vlti > 0:
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":78
 *             vlti = get_vlti(self.handle[0])
 *             return { "sti": sti, "lti": lti, "vlti": vlti }
 *         def __set__(self, av_dict):             # <<<<<<<<<<<<<<
 *             try:
 *                 assert isinstance(av_dict, dict)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("opencog.atomspace.Atom.av.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sti);
  __Pyx_XDECREF(__pyx_v_lti);
  __Pyx_XDECREF(__pyx_v_vlti);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":106
 * 
 *     property sti:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_3sti_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_3sti_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_3sti___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_3sti___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":107
 *     property sti:
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":108
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             return get_sti(self.handle[0])
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":109
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None             # <<<<<<<<<<<<<<
 *             return get_sti(self.handle[0])
 *         def __set__(self,val):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":108
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             return get_sti(self.handle[0])
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":110
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 *             return get_sti(self.handle[0])             # <<<<<<<<<<<<<<
 *         def __set__(self,val):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_short(opencog::get_sti((__pyx_v_self->handle[0]))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":106
 * 
 *     property sti:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Atom.sti.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":111
 *                 return None
 *             return get_sti(self.handle[0])
 *         def __set__(self,val):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_4Atom_3sti_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_7opencog_9atomspace_4Atom_3sti_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_3sti_2__set__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_4Atom_3sti_2__set__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_val) {
  opencog::Atom *__pyx_v_atom_ptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  av_type __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":112
 *             return get_sti(self.handle[0])
 *         def __set__(self,val):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":113
 *         def __set__(self,val):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return
 *             attentionbank(self.atomspace.atomspace).set_sti(self.handle[0], val)
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":114
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return             # <<<<<<<<<<<<<<
 *             attentionbank(self.atomspace.atomspace).set_sti(self.handle[0], val)
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":113
 *         def __set__(self,val):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return
 *             attentionbank(self.atomspace.atomspace).set_sti(self.handle[0], val)
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":115
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return
 *             attentionbank(self.atomspace.atomspace).set_sti(self.handle[0], val)             # <<<<<<<<<<<<<<
 * 
 *     property lti:
 */
  __pyx_t_2 = __Pyx_PyInt_As_short(__pyx_v_val); if (unlikely((__pyx_t_2 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  opencog::attentionbank(__pyx_v_self->atomspace->atomspace).set_sti((__pyx_v_self->handle[0]), __pyx_t_2);

  /* "../../../../opencog/cython/opencog/atom.pyx":111
 *                 return None
 *             return get_sti(self.handle[0])
 *         def __set__(self,val):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opencog.atomspace.Atom.sti.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":118
 * 
 *     property lti:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_3lti_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_3lti_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_3lti___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_3lti___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":119
 *     property lti:
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":120
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             return get_lti(self.handle[0])
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":121
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None             # <<<<<<<<<<<<<<
 *             return get_lti(self.handle[0])
 *         def __set__(self,val):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":120
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             return get_lti(self.handle[0])
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":122
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 *             return get_lti(self.handle[0])             # <<<<<<<<<<<<<<
 *         def __set__(self,val):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_short(opencog::get_lti((__pyx_v_self->handle[0]))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":118
 * 
 *     property lti:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Atom.lti.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":123
 *                 return None
 *             return get_lti(self.handle[0])
 *         def __set__(self,val):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_4Atom_3lti_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_7opencog_9atomspace_4Atom_3lti_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_3lti_2__set__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_4Atom_3lti_2__set__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_val) {
  opencog::Atom *__pyx_v_atom_ptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  av_type __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":124
 *             return get_lti(self.handle[0])
 *         def __set__(self,val):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":125
 *         def __set__(self,val):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return
 *             attentionbank(self.atomspace.atomspace).set_lti(self.handle[0], val)
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":126
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return             # <<<<<<<<<<<<<<
 *             attentionbank(self.atomspace.atomspace).set_lti(self.handle[0], val)
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":125
 *         def __set__(self,val):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return
 *             attentionbank(self.atomspace.atomspace).set_lti(self.handle[0], val)
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":127
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return
 *             attentionbank(self.atomspace.atomspace).set_lti(self.handle[0], val)             # <<<<<<<<<<<<<<
 * 
 *     property vlti:
 */
  __pyx_t_2 = __Pyx_PyInt_As_short(__pyx_v_val); if (unlikely((__pyx_t_2 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  opencog::attentionbank(__pyx_v_self->atomspace->atomspace).set_lti((__pyx_v_self->handle[0]), __pyx_t_2);

  /* "../../../../opencog/cython/opencog/atom.pyx":123
 *                 return None
 *             return get_lti(self.handle[0])
 *         def __set__(self,val):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("opencog.atomspace.Atom.lti.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":130
 * 
 *     property vlti:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_4vlti_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_4vlti_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_4vlti___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_4vlti___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":131
 *     property vlti:
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":132
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             return get_vlti(self.handle[0])
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":133
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None             # <<<<<<<<<<<<<<
 *             return get_vlti(self.handle[0])
 *         def __set__(self, val):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":132
 *         def __get__(self):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             return get_vlti(self.handle[0])
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":134
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 *             return get_vlti(self.handle[0])             # <<<<<<<<<<<<<<
 *         def __set__(self, val):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_short(opencog::get_vlti((__pyx_v_self->handle[0]))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":130
 * 
 *     property vlti:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Atom.vlti.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":135
 *                 return None
 *             return get_vlti(self.handle[0])
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_4Atom_4vlti_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_7opencog_9atomspace_4Atom_4vlti_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_4vlti_2__set__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_4Atom_4vlti_2__set__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_val) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_v_vlti = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":136
 *             return get_vlti(self.handle[0])
 *         def __set__(self, val):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":137
 *         def __set__(self, val):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return
 *             vlti = val - get_vlti(self.handle[0])
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":138
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return             # <<<<<<<<<<<<<<
 *             vlti = val - get_vlti(self.handle[0])
 *             if vlti > 0:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":137
 *         def __set__(self, val):
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return
 *             vlti = val - get_vlti(self.handle[0])
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":139
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return
 *             vlti = val - get_vlti(self.handle[0])             # <<<<<<<<<<<<<<
 *             if vlti > 0:
 *                 while vlti > 0:
 */
  __pyx_t_2 = __Pyx_PyInt_From_short(opencog::get_vlti((__pyx_v_self->handle[0]))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_val, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_vlti = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "../../../../opencog/cython/opencog/atom.pyx":140
 *                 return
 *             vlti = val - get_vlti(self.handle[0])
 *             if vlti > 0:             # <<<<<<<<<<<<<<
 *                 while vlti > 0:
 *                     self.increment_vlti()
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_vlti, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":141
 *             vlti = val - get_vlti(self.handle[0])
 *             if vlti > 0:
 *                 while vlti > 0:             # <<<<<<<<<<<<<<
 *                     self.increment_vlti()
 *                     vlti = vlti - 1
 */
    while (1) {
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_vlti, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_1) break;

      /* "../../../../opencog/cython/opencog/atom.pyx":142
 *             if vlti > 0:
 *                 while vlti > 0:
 *                     self.increment_vlti()             # <<<<<<<<<<<<<<
 *                     vlti = vlti - 1
 *             if vlti < 0:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_increment_vlti); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "../../../../opencog/cython/opencog/atom.pyx":143
 *                 while vlti > 0:
 *                     self.increment_vlti()
 *                     vlti = vlti - 1             # <<<<<<<<<<<<<<
 *             if vlti < 0:
 *                 while vlti < 0:
 */
      __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_v_vlti, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_vlti, __pyx_t_3);
      __pyx_t_3 = 0;
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":140
 *                 return
 *             vlti = val - get_vlti(self.handle[0])
 *             if vlti > 0:             # <<<<<<<<<<<<<<
 *                 while vlti > 0:
 *                     self.increment_vlti()
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":144
 *                     self.increment_vlti()
 *                     vlti = vlti - 1
 *             if vlti < 0:             # <<<<<<<<<<<<<<
 *                 while vlti < 0:
 *                     self.decrement_vlti()
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_vlti, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":145
 *                     vlti = vlti - 1
 *             if vlti < 0:
 *                 while vlti < 0:             # <<<<<<<<<<<<<<
 *                     self.decrement_vlti()
 *                     vlti = vlti + 1
 */
    while (1) {
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_vlti, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_1) break;

      /* "../../../../opencog/cython/opencog/atom.pyx":146
 *             if vlti < 0:
 *                 while vlti < 0:
 *                     self.decrement_vlti()             # <<<<<<<<<<<<<<
 *                     vlti = vlti + 1
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_decrement_vlti); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "../../../../opencog/cython/opencog/atom.pyx":147
 *                 while vlti < 0:
 *                     self.decrement_vlti()
 *                     vlti = vlti + 1             # <<<<<<<<<<<<<<
 * 
 *     def increment_vlti(self):
 */
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_vlti, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_vlti, __pyx_t_3);
      __pyx_t_3 = 0;
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":144
 *                     self.increment_vlti()
 *                     vlti = vlti - 1
 *             if vlti < 0:             # <<<<<<<<<<<<<<
 *                 while vlti < 0:
 *                     self.decrement_vlti()
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":135
 *                 return None
 *             return get_vlti(self.handle[0])
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opencog.atomspace.Atom.vlti.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vlti);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":149
 *                     vlti = vlti + 1
 * 
 *     def increment_vlti(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_9increment_vlti(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_9increment_vlti(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("increment_vlti (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_8increment_vlti(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_8increment_vlti(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("increment_vlti", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":150
 * 
 *     def increment_vlti(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":151
 *     def increment_vlti(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return
 *         attentionbank(self.atomspace.atomspace).inc_vlti(self.handle[0])
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":152
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return             # <<<<<<<<<<<<<<
 *         attentionbank(self.atomspace.atomspace).inc_vlti(self.handle[0])
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":151
 *     def increment_vlti(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return
 *         attentionbank(self.atomspace.atomspace).inc_vlti(self.handle[0])
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":153
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return
 *         attentionbank(self.atomspace.atomspace).inc_vlti(self.handle[0])             # <<<<<<<<<<<<<<
 * 
 *     def decrement_vlti(self):
 */
  opencog::attentionbank(__pyx_v_self->atomspace->atomspace).inc_vlti((__pyx_v_self->handle[0]));

  /* "../../../../opencog/cython/opencog/atom.pyx":149
 *                     vlti = vlti + 1
 * 
 *     def increment_vlti(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":155
 *         attentionbank(self.atomspace.atomspace).inc_vlti(self.handle[0])
 * 
 *     def decrement_vlti(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_11decrement_vlti(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_11decrement_vlti(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decrement_vlti (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_10decrement_vlti(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_10decrement_vlti(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("decrement_vlti", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":156
 * 
 *     def decrement_vlti(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":157
 *     def decrement_vlti(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return
 *         attentionbank(self.atomspace.atomspace).dec_vlti(self.handle[0])
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":158
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return             # <<<<<<<<<<<<<<
 *         attentionbank(self.atomspace.atomspace).dec_vlti(self.handle[0])
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":157
 *     def decrement_vlti(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return
 *         attentionbank(self.atomspace.atomspace).dec_vlti(self.handle[0])
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":159
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return
 *         attentionbank(self.atomspace.atomspace).dec_vlti(self.handle[0])             # <<<<<<<<<<<<<<
 * 
 *     def get_out(self):
 */
  opencog::attentionbank(__pyx_v_self->atomspace->atomspace).dec_vlti((__pyx_v_self->handle[0]));

  /* "../../../../opencog/cython/opencog/atom.pyx":155
 *         attentionbank(self.atomspace.atomspace).inc_vlti(self.handle[0])
 * 
 *     def decrement_vlti(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":161
 *         attentionbank(self.atomspace.atomspace).dec_vlti(self.handle[0])
 * 
 *     def get_out(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_13get_out(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_13get_out(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_out (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_12get_out(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_12get_out(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_out", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":162
 * 
 *     def get_out(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":163
 *     def get_out(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector = atom_ptr.getOutgoingSet()
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":164
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector = atom_ptr.getOutgoingSet()
 *         return convert_handle_seq_to_python_list(handle_vector, self.atomspace)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":163
 *     def get_out(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector = atom_ptr.getOutgoingSet()
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":165
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 *         cdef vector[cHandle] handle_vector = atom_ptr.getOutgoingSet()             # <<<<<<<<<<<<<<
 *         return convert_handle_seq_to_python_list(handle_vector, self.atomspace)
 * 
 */
  __pyx_v_handle_vector = __pyx_v_atom_ptr->getOutgoingSet();

  /* "../../../../opencog/cython/opencog/atom.pyx":166
 *             return None
 *         cdef vector[cHandle] handle_vector = atom_ptr.getOutgoingSet()
 *         return convert_handle_seq_to_python_list(handle_vector, self.atomspace)             # <<<<<<<<<<<<<<
 * 
 *     property out:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->atomspace);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(__pyx_v_handle_vector, ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":161
 *         attentionbank(self.atomspace.atomspace).dec_vlti(self.handle[0])
 * 
 *     def get_out(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.Atom.get_out", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":169
 * 
 *     property out:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._outgoing is None:
 *                 atom_ptr = self.handle.atom_ptr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_3out_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_3out_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_3out___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_3out___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":170
 *     property out:
 *         def __get__(self):
 *             if self._outgoing is None:             # <<<<<<<<<<<<<<
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 */
  __pyx_t_1 = (__pyx_v_self->_outgoing == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/atom.pyx":171
 *         def __get__(self):
 *             if self._outgoing is None:
 *                 atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 *                     return None
 */
    __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

    /* "../../../../opencog/cython/opencog/atom.pyx":172
 *             if self._outgoing is None:
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                     return None
 *                 if atom_ptr.is_link():
 */
    __pyx_t_2 = ((__pyx_v_atom_ptr == NULL) != 0);
    if (__pyx_t_2) {

      /* "../../../../opencog/cython/opencog/atom.pyx":173
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 *                     return None             # <<<<<<<<<<<<<<
 *                 if atom_ptr.is_link():
 *                     self._outgoing = self.get_out()
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;

      /* "../../../../opencog/cython/opencog/atom.pyx":172
 *             if self._outgoing is None:
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                     return None
 *                 if atom_ptr.is_link():
 */
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":174
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 *                     return None
 *                 if atom_ptr.is_link():             # <<<<<<<<<<<<<<
 *                     self._outgoing = self.get_out()
 *                 else:
 */
    __pyx_t_2 = (__pyx_v_atom_ptr->is_link() != 0);
    if (__pyx_t_2) {

      /* "../../../../opencog/cython/opencog/atom.pyx":175
 *                     return None
 *                 if atom_ptr.is_link():
 *                     self._outgoing = self.get_out()             # <<<<<<<<<<<<<<
 *                 else:
 *                     self._outgoing = []
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_out); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (__pyx_t_5) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->_outgoing);
      __Pyx_DECREF(__pyx_v_self->_outgoing);
      __pyx_v_self->_outgoing = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "../../../../opencog/cython/opencog/atom.pyx":174
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 *                     return None
 *                 if atom_ptr.is_link():             # <<<<<<<<<<<<<<
 *                     self._outgoing = self.get_out()
 *                 else:
 */
      goto __pyx_L5;
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":177
 *                     self._outgoing = self.get_out()
 *                 else:
 *                     self._outgoing = []             # <<<<<<<<<<<<<<
 *             return self._outgoing
 * 
 */
    /*else*/ {
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->_outgoing);
      __Pyx_DECREF(__pyx_v_self->_outgoing);
      __pyx_v_self->_outgoing = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __pyx_L5:;

    /* "../../../../opencog/cython/opencog/atom.pyx":170
 *     property out:
 *         def __get__(self):
 *             if self._outgoing is None:             # <<<<<<<<<<<<<<
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":178
 *                 else:
 *                     self._outgoing = []
 *             return self._outgoing             # <<<<<<<<<<<<<<
 * 
 *     property arity:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_outgoing);
  __pyx_r = __pyx_v_self->_outgoing;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":169
 * 
 *     property out:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._outgoing is None:
 *                 atom_ptr = self.handle.atom_ptr()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.Atom.out.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":181
 * 
 *     property arity:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return len(self.out)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_5arity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_5arity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_5arity___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_5arity___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":182
 *     property arity:
 *         def __get__(self):
 *             return len(self.out)             # <<<<<<<<<<<<<<
 * 
 *     property incoming:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_out); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":181
 * 
 *     property arity:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return len(self.out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Atom.arity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":185
 * 
 *     property incoming:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[cHandle] handle_vector
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_8incoming_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_8incoming_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_8incoming___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_8incoming___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":187
 *         def __get__(self):
 *             cdef vector[cHandle] handle_vector
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":188
 *             cdef vector[cHandle] handle_vector
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             atom_ptr.getIncomingSet(back_inserter(handle_vector))
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":189
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None             # <<<<<<<<<<<<<<
 *             atom_ptr.getIncomingSet(back_inserter(handle_vector))
 *             return convert_handle_seq_to_python_list(handle_vector, self.atomspace)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":188
 *             cdef vector[cHandle] handle_vector
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             atom_ptr.getIncomingSet(back_inserter(handle_vector))
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":190
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 *             atom_ptr.getIncomingSet(back_inserter(handle_vector))             # <<<<<<<<<<<<<<
 *             return convert_handle_seq_to_python_list(handle_vector, self.atomspace)
 * 
 */
  __pyx_v_atom_ptr->getIncomingSet(std::back_inserter(__pyx_v_handle_vector));

  /* "../../../../opencog/cython/opencog/atom.pyx":191
 *                 return None
 *             atom_ptr.getIncomingSet(back_inserter(handle_vector))
 *             return convert_handle_seq_to_python_list(handle_vector, self.atomspace)             # <<<<<<<<<<<<<<
 * 
 *     property xincoming:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->atomspace);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(__pyx_v_handle_vector, ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":185
 * 
 *     property incoming:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[cHandle] handle_vector
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.Atom.incoming.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7opencog_9atomspace_4Atom_9xincoming_2generator5(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "../../../../opencog/cython/opencog/atom.pyx":194
 * 
 *     property xincoming:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[cHandle] handle_vector
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_9xincoming_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_9xincoming_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_9xincoming___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_9xincoming___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_cur_scope = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *)__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_5___get__(__pyx_ptype_7opencog_9atomspace___pyx_scope_struct_5___get__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7opencog_9atomspace_4Atom_9xincoming_2generator5, (PyObject *) __pyx_cur_scope, __pyx_n_s_get, __pyx_n_s_Atom___get); if (unlikely(!gen)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("opencog.atomspace.Atom.xincoming.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7opencog_9atomspace_4Atom_9xincoming_2generator5(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *__pyx_cur_scope = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "../../../../opencog/cython/opencog/atom.pyx":196
 *         def __get__(self):
 *             cdef vector[cHandle] handle_vector
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 */
  __pyx_cur_scope->__pyx_v_atom_ptr = __pyx_cur_scope->__pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":197
 *             cdef vector[cHandle] handle_vector
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             atom_ptr.getIncomingSet(back_inserter(handle_vector))
 */
  __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":198
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None             # <<<<<<<<<<<<<<
 *             atom_ptr.getIncomingSet(back_inserter(handle_vector))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":197
 *             cdef vector[cHandle] handle_vector
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             atom_ptr.getIncomingSet(back_inserter(handle_vector))
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":199
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 *             atom_ptr.getIncomingSet(back_inserter(handle_vector))             # <<<<<<<<<<<<<<
 * 
 *             # This code is the same for all the x iterators but there is no
 */
  __pyx_cur_scope->__pyx_v_atom_ptr->getIncomingSet(std::back_inserter(__pyx_cur_scope->__pyx_v_handle_vector));

  /* "../../../../opencog/cython/opencog/atom.pyx":206
 *             cdef vector[cHandle].iterator c_handle_iter
 *             cdef cHandle current_c_handle
 *             c_handle_iter = handle_vector.begin()             # <<<<<<<<<<<<<<
 *             while c_handle_iter != handle_vector.end():
 *                 current_c_handle = deref(c_handle_iter)
 */
  __pyx_cur_scope->__pyx_v_c_handle_iter = __pyx_cur_scope->__pyx_v_handle_vector.begin();

  /* "../../../../opencog/cython/opencog/atom.pyx":207
 *             cdef cHandle current_c_handle
 *             c_handle_iter = handle_vector.begin()
 *             while c_handle_iter != handle_vector.end():             # <<<<<<<<<<<<<<
 *                 current_c_handle = deref(c_handle_iter)
 *                 yield Atom(void_from_candle(current_c_handle),self)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_c_handle_iter != __pyx_cur_scope->__pyx_v_handle_vector.end()) != 0);
    if (!__pyx_t_1) break;

    /* "../../../../opencog/cython/opencog/atom.pyx":208
 *             c_handle_iter = handle_vector.begin()
 *             while c_handle_iter != handle_vector.end():
 *                 current_c_handle = deref(c_handle_iter)             # <<<<<<<<<<<<<<
 *                 yield Atom(void_from_candle(current_c_handle),self)
 *                 inc(c_handle_iter)
 */
    __pyx_cur_scope->__pyx_v_current_c_handle = (*__pyx_cur_scope->__pyx_v_c_handle_iter);

    /* "../../../../opencog/cython/opencog/atom.pyx":209
 *             while c_handle_iter != handle_vector.end():
 *                 current_c_handle = deref(c_handle_iter)
 *                 yield Atom(void_from_candle(current_c_handle),self)             # <<<<<<<<<<<<<<
 *                 inc(c_handle_iter)
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(void_from_candle(__pyx_cur_scope->__pyx_v_current_c_handle)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atom.pyx":210
 *                 current_c_handle = deref(c_handle_iter)
 *                 yield Atom(void_from_candle(current_c_handle),self)
 *                 inc(c_handle_iter)             # <<<<<<<<<<<<<<
 * 
 *     def incoming_by_type(self, Type type):
 */
    (++__pyx_cur_scope->__pyx_v_c_handle_iter);
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":194
 * 
 *     property xincoming:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[cHandle] handle_vector
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":212
 *                 inc(c_handle_iter)
 * 
 *     def incoming_by_type(self, Type type):             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_15incoming_by_type(PyObject *__pyx_v_self, PyObject *__pyx_arg_type); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_15incoming_by_type(PyObject *__pyx_v_self, PyObject *__pyx_arg_type) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_type;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("incoming_by_type (wrapper)", 0);
  assert(__pyx_arg_type); {
    __pyx_v_type = __Pyx_PyInt_As_short(__pyx_arg_type); if (unlikely((__pyx_v_type == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.Atom.incoming_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_14incoming_by_type(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((__pyx_t_7opencog_9atomspace_Type)__pyx_v_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_14incoming_by_type(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_type) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("incoming_by_type", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":214
 *     def incoming_by_type(self, Type type):
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":215
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":216
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None             # <<<<<<<<<<<<<<
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)
 *         return convert_handle_seq_to_python_list(handle_vector, self.atomspace)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":215
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":217
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)             # <<<<<<<<<<<<<<
 *         return convert_handle_seq_to_python_list(handle_vector, self.atomspace)
 * 
 */
  __pyx_v_atom_ptr->getIncomingSetByType(std::back_inserter(__pyx_v_handle_vector), __pyx_v_type);

  /* "../../../../opencog/cython/opencog/atom.pyx":218
 *             return None
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)
 *         return convert_handle_seq_to_python_list(handle_vector, self.atomspace)             # <<<<<<<<<<<<<<
 * 
 *     def xincoming_by_type(self, Type type):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->atomspace);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(__pyx_v_handle_vector, ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":212
 *                 inc(c_handle_iter)
 * 
 *     def incoming_by_type(self, Type type):             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.Atom.incoming_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7opencog_9atomspace_4Atom_18generator6(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "../../../../opencog/cython/opencog/atom.pyx":220
 *         return convert_handle_seq_to_python_list(handle_vector, self.atomspace)
 * 
 *     def xincoming_by_type(self, Type type):             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_17xincoming_by_type(PyObject *__pyx_v_self, PyObject *__pyx_arg_type); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_17xincoming_by_type(PyObject *__pyx_v_self, PyObject *__pyx_arg_type) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_type;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xincoming_by_type (wrapper)", 0);
  assert(__pyx_arg_type); {
    __pyx_v_type = __Pyx_PyInt_As_short(__pyx_arg_type); if (unlikely((__pyx_v_type == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.Atom.xincoming_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_16xincoming_by_type(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((__pyx_t_7opencog_9atomspace_Type)__pyx_v_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_16xincoming_by_type(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_type) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("xincoming_by_type", 0);
  __pyx_cur_scope = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *)__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type(__pyx_ptype_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_type = __pyx_v_type;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7opencog_9atomspace_4Atom_18generator6, (PyObject *) __pyx_cur_scope, __pyx_n_s_xincoming_by_type, __pyx_n_s_Atom_xincoming_by_type); if (unlikely(!gen)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("opencog.atomspace.Atom.xincoming_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7opencog_9atomspace_4Atom_18generator6(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *__pyx_cur_scope = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "../../../../opencog/cython/opencog/atom.pyx":222
 *     def xincoming_by_type(self, Type type):
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 */
  __pyx_cur_scope->__pyx_v_atom_ptr = __pyx_cur_scope->__pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":223
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)
 */
  __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":224
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None             # <<<<<<<<<<<<<<
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL; __Pyx_ReturnWithStopIteration(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":223
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":225
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)             # <<<<<<<<<<<<<<
 * 
 *         # This code is the same for all the x iterators but there is no
 */
  __pyx_cur_scope->__pyx_v_atom_ptr->getIncomingSetByType(std::back_inserter(__pyx_cur_scope->__pyx_v_handle_vector), __pyx_cur_scope->__pyx_v_type);

  /* "../../../../opencog/cython/opencog/atom.pyx":232
 *         cdef vector[cHandle].iterator c_handle_iter
 *         cdef cHandle current_c_handle
 *         c_handle_iter = handle_vector.begin()             # <<<<<<<<<<<<<<
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)
 */
  __pyx_cur_scope->__pyx_v_c_handle_iter = __pyx_cur_scope->__pyx_v_handle_vector.begin();

  /* "../../../../opencog/cython/opencog/atom.pyx":233
 *         cdef cHandle current_c_handle
 *         c_handle_iter = handle_vector.begin()
 *         while c_handle_iter != handle_vector.end():             # <<<<<<<<<<<<<<
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self.atomspace)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_c_handle_iter != __pyx_cur_scope->__pyx_v_handle_vector.end()) != 0);
    if (!__pyx_t_1) break;

    /* "../../../../opencog/cython/opencog/atom.pyx":234
 *         c_handle_iter = handle_vector.begin()
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)             # <<<<<<<<<<<<<<
 *             yield Atom(void_from_candle(current_c_handle), self.atomspace)
 *             inc(c_handle_iter)
 */
    __pyx_cur_scope->__pyx_v_current_c_handle = (*__pyx_cur_scope->__pyx_v_c_handle_iter);

    /* "../../../../opencog/cython/opencog/atom.pyx":235
 *         while c_handle_iter != handle_vector.end():
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self.atomspace)             # <<<<<<<<<<<<<<
 *             inc(c_handle_iter)
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(void_from_candle(__pyx_cur_scope->__pyx_v_current_c_handle)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self->atomspace));
    __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_self->atomspace));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_cur_scope->__pyx_v_self->atomspace));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../../../opencog/cython/opencog/atom.pyx":236
 *             current_c_handle = deref(c_handle_iter)
 *             yield Atom(void_from_candle(current_c_handle), self.atomspace)
 *             inc(c_handle_iter)             # <<<<<<<<<<<<<<
 * 
 *     property type:
 */
    (++__pyx_cur_scope->__pyx_v_c_handle_iter);
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":220
 *         return convert_handle_seq_to_python_list(handle_vector, self.atomspace)
 * 
 *     def xincoming_by_type(self, Type type):             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xincoming_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":239
 * 
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr
 *             if self._atom_type is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_4type___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_4type___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":241
 *         def __get__(self):
 *             cdef cAtom* atom_ptr
 *             if self._atom_type is None:             # <<<<<<<<<<<<<<
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 */
  __pyx_t_1 = (__pyx_v_self->_atom_type == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/atom.pyx":242
 *             cdef cAtom* atom_ptr
 *             if self._atom_type is None:
 *                 atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 *                     return None
 */
    __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

    /* "../../../../opencog/cython/opencog/atom.pyx":243
 *             if self._atom_type is None:
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                     return None
 *                 self._atom_type = atom_ptr.get_type()
 */
    __pyx_t_2 = ((__pyx_v_atom_ptr == NULL) != 0);
    if (__pyx_t_2) {

      /* "../../../../opencog/cython/opencog/atom.pyx":244
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 *                     return None             # <<<<<<<<<<<<<<
 *                 self._atom_type = atom_ptr.get_type()
 *             return self._atom_type
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;

      /* "../../../../opencog/cython/opencog/atom.pyx":243
 *             if self._atom_type is None:
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                     return None
 *                 self._atom_type = atom_ptr.get_type()
 */
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":245
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 *                     return None
 *                 self._atom_type = atom_ptr.get_type()             # <<<<<<<<<<<<<<
 *             return self._atom_type
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_atom_ptr->get_type()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_atom_type);
    __Pyx_DECREF(__pyx_v_self->_atom_type);
    __pyx_v_self->_atom_type = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "../../../../opencog/cython/opencog/atom.pyx":241
 *         def __get__(self):
 *             cdef cAtom* atom_ptr
 *             if self._atom_type is None:             # <<<<<<<<<<<<<<
 *                 atom_ptr = self.handle.atom_ptr()
 *                 if atom_ptr == NULL:   # avoid null-pointer deref
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":246
 *                     return None
 *                 self._atom_type = atom_ptr.get_type()
 *             return self._atom_type             # <<<<<<<<<<<<<<
 * 
 *     property type_name:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_atom_type);
  __pyx_r = __pyx_v_self->_atom_type;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":239
 * 
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr
 *             if self._atom_type is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.Atom.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":249
 * 
 *     property type_name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return get_type_name(self.type)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_9type_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_9type_name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_9type_name___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_9type_name___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":250
 *     property type_name:
 *         def __get__(self):
 *             return get_type_name(self.type)             # <<<<<<<<<<<<<<
 * 
 *     property t:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_get_type_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":249
 * 
 *     property type_name:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return get_type_name(self.type)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.Atom.type_name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":253
 * 
 *     property t:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.type
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_1t_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_1t_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_1t___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_1t___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":254
 *     property t:
 *         def __get__(self):
 *             return self.type             # <<<<<<<<<<<<<<
 * 
 *     def truth_value(self, mean, count):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":253
 * 
 *     property t:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.type
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Atom.t.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":256
 *             return self.type
 * 
 *     def truth_value(self, mean, count):             # <<<<<<<<<<<<<<
 *         self.tv = TruthValue(mean, count)
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_20truth_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_20truth_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mean = 0;
  PyObject *__pyx_v_count = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("truth_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mean,&__pyx_n_s_count,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mean)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("truth_value", 1, 2, 2, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "truth_value") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_mean = values[0];
    __pyx_v_count = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("truth_value", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.Atom.truth_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_19truth_value(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), __pyx_v_mean, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_19truth_value(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_mean, PyObject *__pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("truth_value", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":257
 * 
 *     def truth_value(self, mean, count):
 *         self.tv = TruthValue(mean, count)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_mean);
  __Pyx_GIVEREF(__pyx_v_mean);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_mean);
  __Pyx_INCREF(__pyx_v_count);
  __Pyx_GIVEREF(__pyx_v_count);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_count);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_TruthValue), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tv, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/atom.pyx":258
 *     def truth_value(self, mean, count):
 *         self.tv = TruthValue(mean, count)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def handle_ptr(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":256
 *             return self.type
 * 
 *     def truth_value(self, mean, count):             # <<<<<<<<<<<<<<
 *         self.tv = TruthValue(mean, count)
 *         return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Atom.truth_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":260
 *         return self
 * 
 *     def handle_ptr(self):             # <<<<<<<<<<<<<<
 *         return PyLong_FromVoidPtr(self.handle)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_22handle_ptr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_22handle_ptr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("handle_ptr (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_21handle_ptr(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_21handle_ptr(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("handle_ptr", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":261
 * 
 *     def handle_ptr(self):
 *         return PyLong_FromVoidPtr(self.handle)             # <<<<<<<<<<<<<<
 * 
 *     def is_node(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromVoidPtr(__pyx_v_self->handle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":260
 *         return self
 * 
 *     def handle_ptr(self):             # <<<<<<<<<<<<<<
 *         return PyLong_FromVoidPtr(self.handle)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Atom.handle_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":263
 *         return PyLong_FromVoidPtr(self.handle)
 * 
 *     def is_node(self):             # <<<<<<<<<<<<<<
 *         return is_a(self.t, types.Node)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_24is_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_24is_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_node (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_23is_node(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_23is_node(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_node", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":264
 * 
 *     def is_node(self):
 *         return is_a(self.t, types.Node)             # <<<<<<<<<<<<<<
 * 
 *     def is_link(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_is_a); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Node); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_4) {
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":263
 *         return PyLong_FromVoidPtr(self.handle)
 * 
 *     def is_node(self):             # <<<<<<<<<<<<<<
 *         return is_a(self.t, types.Node)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("opencog.atomspace.Atom.is_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":266
 *         return is_a(self.t, types.Node)
 * 
 *     def is_link(self):             # <<<<<<<<<<<<<<
 *         return is_a(self.t, types.Link)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_26is_link(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_26is_link(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_link (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_25is_link(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_25is_link(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_link", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":267
 * 
 *     def is_link(self):
 *         return is_a(self.t, types.Link)             # <<<<<<<<<<<<<<
 * 
 *     def is_a(self,t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_is_a); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Link); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_4) {
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":266
 *         return is_a(self.t, types.Node)
 * 
 *     def is_link(self):             # <<<<<<<<<<<<<<
 *         return is_a(self.t, types.Link)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("opencog.atomspace.Atom.is_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":269
 *         return is_a(self.t, types.Link)
 * 
 *     def is_a(self,t):             # <<<<<<<<<<<<<<
 *         return is_a(self.t, t)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_28is_a(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_28is_a(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_a (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_27is_a(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_27is_a(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_a", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":270
 * 
 *     def is_a(self,t):
 *         return is_a(self.t, t)             # <<<<<<<<<<<<<<
 * 
 *     def long_string(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_is_a); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_4) {
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_t);
  __Pyx_GIVEREF(__pyx_v_t);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_t);
  __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":269
 *         return is_a(self.t, types.Link)
 * 
 *     def is_a(self,t):             # <<<<<<<<<<<<<<
 *         return is_a(self.t, t)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.Atom.is_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":272
 *         return is_a(self.t, t)
 * 
 *     def long_string(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr != NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_30long_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_30long_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("long_string (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_29long_string(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_29long_string(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("long_string", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":273
 * 
 *     def long_string(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *         if atom_ptr != NULL:
 *             return atom_ptr.to_string()
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":274
 *     def long_string(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr != NULL:             # <<<<<<<<<<<<<<
 *             return atom_ptr.to_string()
 *         return ""
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":275
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr != NULL:
 *             return atom_ptr.to_string()             # <<<<<<<<<<<<<<
 *         return ""
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_atom_ptr->to_string()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":274
 *     def long_string(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr != NULL:             # <<<<<<<<<<<<<<
 *             return atom_ptr.to_string()
 *         return ""
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":276
 *         if atom_ptr != NULL:
 *             return atom_ptr.to_string()
 *         return ""             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_s_);
  __pyx_r = __pyx_kp_s_;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":272
 *         return is_a(self.t, t)
 * 
 *     def long_string(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr != NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Atom.long_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":278
 *         return ""
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr != NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_32__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_32__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_31__str__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_31__str__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  std::string __pyx_v_cs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":279
 * 
 *     def __str__(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *         if atom_ptr != NULL:
 *             cs = atom_ptr.to_short_string()
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":280
 *     def __str__(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr != NULL:             # <<<<<<<<<<<<<<
 *             cs = atom_ptr.to_short_string()
 *             return cs.decode('UTF-8')
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":281
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr != NULL:
 *             cs = atom_ptr.to_short_string()             # <<<<<<<<<<<<<<
 *             return cs.decode('UTF-8')
 *         return ""
 */
    __pyx_v_cs = __pyx_v_atom_ptr->to_short_string();

    /* "../../../../opencog/cython/opencog/atom.pyx":282
 *         if atom_ptr != NULL:
 *             cs = atom_ptr.to_short_string()
 *             return cs.decode('UTF-8')             # <<<<<<<<<<<<<<
 *         return ""
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_cs, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":280
 *     def __str__(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr != NULL:             # <<<<<<<<<<<<<<
 *             cs = atom_ptr.to_short_string()
 *             return cs.decode('UTF-8')
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":283
 *             cs = atom_ptr.to_short_string()
 *             return cs.decode('UTF-8')
 *         return ""             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_s_);
  __pyx_r = __pyx_kp_s_;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":278
 *         return ""
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr != NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Atom.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":285
 *         return ""
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         cs = self.long_string()
 *         return string(cs).decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_34__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_34__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_33__repr__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_33__repr__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  PyObject *__pyx_v_cs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":286
 * 
 *     def __repr__(self):
 *         cs = self.long_string()             # <<<<<<<<<<<<<<
 *         return string(cs).decode('UTF-8')
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_long_string); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atom.pyx":287
 *     def __repr__(self):
 *         cs = self.long_string()
 *         return string(cs).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(a1_, a2_, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_cs); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_decode_cpp_string(std::string(__pyx_t_4), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":285
 *         return ""
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         cs = self.long_string()
 *         return string(cs).decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.Atom.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":289
 *         return string(cs).decode('UTF-8')
 * 
 *     def __richcmp__(a1_, a2_, int op):             # <<<<<<<<<<<<<<
 *         if not isinstance(a1_, Atom) or not isinstance(a2_, Atom):
 *             return NotImplemented
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_36__richcmp__(PyObject *__pyx_v_a1_, PyObject *__pyx_v_a2_, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_36__richcmp__(PyObject *__pyx_v_a1_, PyObject *__pyx_v_a2_, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_35__richcmp__(((PyObject *)__pyx_v_a1_), ((PyObject *)__pyx_v_a2_), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_35__richcmp__(PyObject *__pyx_v_a1_, PyObject *__pyx_v_a2_, int __pyx_v_op) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_a1 = 0;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_a2 = 0;
  PyObject *__pyx_v_is_equal = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":290
 * 
 *     def __richcmp__(a1_, a2_, int op):
 *         if not isinstance(a1_, Atom) or not isinstance(a2_, Atom):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         cdef Atom a1 = a1_
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_a1_, __pyx_ptype_7opencog_9atomspace_Atom); 
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_a2_, __pyx_ptype_7opencog_9atomspace_Atom); 
  __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":291
 *     def __richcmp__(a1_, a2_, int op):
 *         if not isinstance(a1_, Atom) or not isinstance(a2_, Atom):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         cdef Atom a1 = a1_
 *         cdef Atom a2 = a2_
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":290
 * 
 *     def __richcmp__(a1_, a2_, int op):
 *         if not isinstance(a1_, Atom) or not isinstance(a2_, Atom):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         cdef Atom a1 = a1_
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":292
 *         if not isinstance(a1_, Atom) or not isinstance(a2_, Atom):
 *             return NotImplemented
 *         cdef Atom a1 = a1_             # <<<<<<<<<<<<<<
 *         cdef Atom a2 = a2_
 * 
 */
  if (!(likely(((__pyx_v_a1_) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_a1_, __pyx_ptype_7opencog_9atomspace_Atom))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __pyx_v_a1_;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_a1 = ((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "../../../../opencog/cython/opencog/atom.pyx":293
 *             return NotImplemented
 *         cdef Atom a1 = a1_
 *         cdef Atom a2 = a2_             # <<<<<<<<<<<<<<
 * 
 *         is_equal = (a1.atomspace == a2.atomspace and
 */
  if (!(likely(((__pyx_v_a2_) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_a2_, __pyx_ptype_7opencog_9atomspace_Atom))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __pyx_v_a2_;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_a2 = ((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "../../../../opencog/cython/opencog/atom.pyx":295
 *         cdef Atom a2 = a2_
 * 
 *         is_equal = (a1.atomspace == a2.atomspace and             # <<<<<<<<<<<<<<
 *                      deref(a1.handle) == deref(a2.handle))
 *         if op == 2: # ==
 */
  __pyx_t_5 = PyObject_RichCompare(((PyObject *)__pyx_v_a1->atomspace), ((PyObject *)__pyx_v_a2->atomspace), Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_4 = __pyx_t_5;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":296
 * 
 *         is_equal = (a1.atomspace == a2.atomspace and
 *                      deref(a1.handle) == deref(a2.handle))             # <<<<<<<<<<<<<<
 *         if op == 2: # ==
 *             return is_equal
 */
  __pyx_t_1 = ((*__pyx_v_a1->handle) == (*__pyx_v_a2->handle));
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_L6_bool_binop_done:;
  __pyx_v_is_equal = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "../../../../opencog/cython/opencog/atom.pyx":297
 *         is_equal = (a1.atomspace == a2.atomspace and
 *                      deref(a1.handle) == deref(a2.handle))
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return is_equal
 *         elif op == 3: # !=
 */
  switch (__pyx_v_op) {
    case 2:

    /* "../../../../opencog/cython/opencog/atom.pyx":298
 *                      deref(a1.handle) == deref(a2.handle))
 *         if op == 2: # ==
 *             return is_equal             # <<<<<<<<<<<<<<
 *         elif op == 3: # !=
 *             return not is_equal
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_is_equal);
    __pyx_r = __pyx_v_is_equal;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":297
 *         is_equal = (a1.atomspace == a2.atomspace and
 *                      deref(a1.handle) == deref(a2.handle))
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return is_equal
 *         elif op == 3: # !=
 */
    break;

    /* "../../../../opencog/cython/opencog/atom.pyx":299
 *         if op == 2: # ==
 *             return is_equal
 *         elif op == 3: # !=             # <<<<<<<<<<<<<<
 *             return not is_equal
 * 
 */
    case 3:

    /* "../../../../opencog/cython/opencog/atom.pyx":300
 *             return is_equal
 *         elif op == 3: # !=
 *             return not is_equal             # <<<<<<<<<<<<<<
 * 
 *     # Necessary to prevent weirdness with RPyC
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_equal); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":299
 *         if op == 2: # ==
 *             return is_equal
 *         elif op == 3: # !=             # <<<<<<<<<<<<<<
 *             return not is_equal
 * 
 */
    break;
    default: break;
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":289
 *         return string(cs).decode('UTF-8')
 * 
 *     def __richcmp__(a1_, a2_, int op):             # <<<<<<<<<<<<<<
 *         if not isinstance(a1_, Atom) or not isinstance(a2_, Atom):
 *             return NotImplemented
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.Atom.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a1);
  __Pyx_XDECREF((PyObject *)__pyx_v_a2);
  __Pyx_XDECREF(__pyx_v_is_equal);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":303
 * 
 *     # Necessary to prevent weirdness with RPyC
 *     def __cmp__(a1_, a2_):             # <<<<<<<<<<<<<<
 *         if not isinstance(a1_, Atom) or not isinstance(a2_, Atom):
 *             return NotImplemented
 */

/* Python wrapper */
#if PY_MAJOR_VERSION < 3
static int __pyx_pw_7opencog_9atomspace_4Atom_38__cmp__(PyObject *__pyx_v_a1_, PyObject *__pyx_v_a2_); /*proto*/
static int __pyx_pw_7opencog_9atomspace_4Atom_38__cmp__(PyObject *__pyx_v_a1_, PyObject *__pyx_v_a2_) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_37__cmp__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_a1_), ((PyObject *)__pyx_v_a2_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

#if PY_MAJOR_VERSION < 3
static int __pyx_pf_7opencog_9atomspace_4Atom_37__cmp__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_a1_, PyObject *__pyx_v_a2_) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_a1 = 0;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_a2 = 0;
  PyObject *__pyx_v_is_equal = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cmp__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":304
 *     # Necessary to prevent weirdness with RPyC
 *     def __cmp__(a1_, a2_):
 *         if not isinstance(a1_, Atom) or not isinstance(a2_, Atom):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         cdef Atom a1 = a1_
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_a1_), __pyx_ptype_7opencog_9atomspace_Atom); 
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_a2_, __pyx_ptype_7opencog_9atomspace_Atom); 
  __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":305
 *     def __cmp__(a1_, a2_):
 *         if not isinstance(a1_, Atom) or not isinstance(a2_, Atom):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         cdef Atom a1 = a1_
 *         cdef Atom a2 = a2_
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_builtin_NotImplemented); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = __pyx_t_4;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":304
 *     # Necessary to prevent weirdness with RPyC
 *     def __cmp__(a1_, a2_):
 *         if not isinstance(a1_, Atom) or not isinstance(a2_, Atom):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         cdef Atom a1 = a1_
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":306
 *         if not isinstance(a1_, Atom) or not isinstance(a2_, Atom):
 *             return NotImplemented
 *         cdef Atom a1 = a1_             # <<<<<<<<<<<<<<
 *         cdef Atom a2 = a2_
 *         is_equal = (a1.atomspace == a2.atomspace and
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_a1_));
  __pyx_v_a1 = __pyx_v_a1_;

  /* "../../../../opencog/cython/opencog/atom.pyx":307
 *             return NotImplemented
 *         cdef Atom a1 = a1_
 *         cdef Atom a2 = a2_             # <<<<<<<<<<<<<<
 *         is_equal = (a1.atomspace == a2.atomspace and
 *                      deref(a1.handle) == deref(a2.handle))
 */
  if (!(likely(((__pyx_v_a2_) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_a2_, __pyx_ptype_7opencog_9atomspace_Atom))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __pyx_v_a2_;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_a2 = ((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "../../../../opencog/cython/opencog/atom.pyx":308
 *         cdef Atom a1 = a1_
 *         cdef Atom a2 = a2_
 *         is_equal = (a1.atomspace == a2.atomspace and             # <<<<<<<<<<<<<<
 *                      deref(a1.handle) == deref(a2.handle))
 *         if is_equal:
 */
  __pyx_t_6 = PyObject_RichCompare(((PyObject *)__pyx_v_a1->atomspace), ((PyObject *)__pyx_v_a2->atomspace), Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_5 = __pyx_t_6;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":309
 *         cdef Atom a2 = a2_
 *         is_equal = (a1.atomspace == a2.atomspace and
 *                      deref(a1.handle) == deref(a2.handle))             # <<<<<<<<<<<<<<
 *         if is_equal:
 *             return 0
 */
  __pyx_t_1 = ((*__pyx_v_a1->handle) == (*__pyx_v_a2->handle));
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_L6_bool_binop_done:;
  __pyx_v_is_equal = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "../../../../opencog/cython/opencog/atom.pyx":310
 *         is_equal = (a1.atomspace == a2.atomspace and
 *                      deref(a1.handle) == deref(a2.handle))
 *         if is_equal:             # <<<<<<<<<<<<<<
 *             return 0
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_equal); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":311
 *                      deref(a1.handle) == deref(a2.handle))
 *         if is_equal:
 *             return 0             # <<<<<<<<<<<<<<
 *         else:
 *             return -1
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":310
 *         is_equal = (a1.atomspace == a2.atomspace and
 *                      deref(a1.handle) == deref(a2.handle))
 *         if is_equal:             # <<<<<<<<<<<<<<
 *             return 0
 *         else:
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":313
 *             return 0
 *         else:
 *             return -1             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(a1):
 */
  /*else*/ {
    __pyx_r = -1;
    goto __pyx_L0;
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":303
 * 
 *     # Necessary to prevent weirdness with RPyC
 *     def __cmp__(a1_, a2_):             # <<<<<<<<<<<<<<
 *         if not isinstance(a1_, Atom) or not isinstance(a2_, Atom):
 *             return NotImplemented
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.Atom.__cmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a1);
  __Pyx_XDECREF((PyObject *)__pyx_v_a2);
  __Pyx_XDECREF(__pyx_v_is_equal);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3)*/

/* "../../../../opencog/cython/opencog/atom.pyx":315
 *             return -1
 * 
 *     def __hash__(a1):             # <<<<<<<<<<<<<<
 *         # Use the address of the atom in memory as the hash.
 *         # This should be globally unique, because the atomspace
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_7opencog_9atomspace_4Atom_40__hash__(PyObject *__pyx_v_a1); /*proto*/
static Py_hash_t __pyx_pw_7opencog_9atomspace_4Atom_40__hash__(PyObject *__pyx_v_a1) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_39__hash__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_a1));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_7opencog_9atomspace_4Atom_39__hash__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_a1) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":319
 *         # This should be globally unique, because the atomspace
 *         # does not allow more than one, ever.
 *         return hash(PyLong_FromVoidPtr(a1.handle.atom_ptr()))             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = PyLong_FromVoidPtr(__pyx_v_a1->handle->atom_ptr()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Hash(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":315
 *             return -1
 * 
 *     def __hash__(a1):             # <<<<<<<<<<<<<<
 *         # Use the address of the atom in memory as the hash.
 *         # This should be globally unique, because the atomspace
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Atom.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue __pyx_vtable_7opencog_9atomspace_TruthValue;

static PyObject *__pyx_tp_new_7opencog_9atomspace_TruthValue(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace_TruthValue *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opencog_9atomspace_TruthValue *)o);
  p->__pyx_vtab = __pyx_vtabptr_7opencog_9atomspace_TruthValue;
  if (unlikely(__pyx_pw_7opencog_9atomspace_10TruthValue_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace_TruthValue(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7opencog_9atomspace_10TruthValue_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_10TruthValue_mean(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_10TruthValue_4mean_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_10TruthValue_confidence(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_10TruthValue_10confidence_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_10TruthValue_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_10TruthValue_5count_1__get__(o);
}

static PyMethodDef __pyx_methods_7opencog_9atomspace_TruthValue[] = {
  {"truth_value_ptr_object", (PyCFunction)__pyx_pw_7opencog_9atomspace_10TruthValue_7truth_value_ptr_object, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7opencog_9atomspace_TruthValue[] = {
  {(char *)"mean", __pyx_getprop_7opencog_9atomspace_10TruthValue_mean, 0, 0, 0},
  {(char *)"confidence", __pyx_getprop_7opencog_9atomspace_10TruthValue_confidence, 0, 0, 0},
  {(char *)"count", __pyx_getprop_7opencog_9atomspace_10TruthValue_count, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opencog_9atomspace_TruthValue = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.TruthValue", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace_TruthValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace_TruthValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_7opencog_9atomspace_10TruthValue_11__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opencog_9atomspace_10TruthValue_9__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  " The truth value represents the strength and confidence of\n        a relationship or term. In OpenCog there are a number of TruthValue\n        types, but as these involve additional complexity we focus primarily on\n        the SimpleTruthValue type which allows strength and count\n\n        @todo Support IndefiniteTruthValue, DistributionalTV, NullTV etc\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_7opencog_9atomspace_10TruthValue_5__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opencog_9atomspace_TruthValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7opencog_9atomspace_TruthValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace_TruthValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opencog_9atomspace_Atom(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace_Atom *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opencog_9atomspace_Atom *)o);
  p->atomspace = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)Py_None); Py_INCREF(Py_None);
  p->_atom_type = Py_None; Py_INCREF(Py_None);
  p->_name = Py_None; Py_INCREF(Py_None);
  p->_outgoing = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7opencog_9atomspace_4Atom_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace_Atom(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace_Atom *p = (struct __pyx_obj_7opencog_9atomspace_Atom *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7opencog_9atomspace_4Atom_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->atomspace);
  Py_CLEAR(p->_atom_type);
  Py_CLEAR(p->_name);
  Py_CLEAR(p->_outgoing);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7opencog_9atomspace_Atom(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opencog_9atomspace_Atom *p = (struct __pyx_obj_7opencog_9atomspace_Atom *)o;
  if (p->atomspace) {
    e = (*v)(((PyObject*)p->atomspace), a); if (e) return e;
  }
  if (p->_atom_type) {
    e = (*v)(p->_atom_type, a); if (e) return e;
  }
  if (p->_name) {
    e = (*v)(p->_name, a); if (e) return e;
  }
  if (p->_outgoing) {
    e = (*v)(p->_outgoing, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opencog_9atomspace_Atom(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opencog_9atomspace_Atom *p = (struct __pyx_obj_7opencog_9atomspace_Atom *)o;
  tmp = ((PyObject*)p->atomspace);
  p->atomspace = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_atom_type);
  p->_atom_type = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_name);
  p->_name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_outgoing);
  p->_outgoing = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_atomspace(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_9atomspace_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_4name_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_tv(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_2tv_1__get__(o);
}

static int __pyx_setprop_7opencog_9atomspace_4Atom_tv(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7opencog_9atomspace_4Atom_2tv_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_av(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_2av_1__get__(o);
}

static int __pyx_setprop_7opencog_9atomspace_4Atom_av(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7opencog_9atomspace_4Atom_2av_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_sti(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_3sti_1__get__(o);
}

static int __pyx_setprop_7opencog_9atomspace_4Atom_sti(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7opencog_9atomspace_4Atom_3sti_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_lti(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_3lti_1__get__(o);
}

static int __pyx_setprop_7opencog_9atomspace_4Atom_lti(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7opencog_9atomspace_4Atom_3lti_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_vlti(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_4vlti_1__get__(o);
}

static int __pyx_setprop_7opencog_9atomspace_4Atom_vlti(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7opencog_9atomspace_4Atom_4vlti_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_out(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_3out_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_arity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_5arity_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_incoming(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_8incoming_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_xincoming(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_9xincoming_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_4type_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_type_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_9type_name_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_t(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_1t_1__get__(o);
}

static PyMethodDef __pyx_methods_7opencog_9atomspace_Atom[] = {
  {"increment_vlti", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_9increment_vlti, METH_NOARGS, 0},
  {"decrement_vlti", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_11decrement_vlti, METH_NOARGS, 0},
  {"get_out", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_13get_out, METH_NOARGS, 0},
  {"incoming_by_type", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_15incoming_by_type, METH_O, 0},
  {"xincoming_by_type", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_17xincoming_by_type, METH_O, 0},
  {"truth_value", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_20truth_value, METH_VARARGS|METH_KEYWORDS, 0},
  {"handle_ptr", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_22handle_ptr, METH_NOARGS, 0},
  {"is_node", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_24is_node, METH_NOARGS, 0},
  {"is_link", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_26is_link, METH_NOARGS, 0},
  {"is_a", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_28is_a, METH_O, 0},
  {"long_string", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_30long_string, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7opencog_9atomspace_Atom[] = {
  {(char *)"atomspace", __pyx_getprop_7opencog_9atomspace_4Atom_atomspace, 0, 0, 0},
  {(char *)"name", __pyx_getprop_7opencog_9atomspace_4Atom_name, 0, 0, 0},
  {(char *)"tv", __pyx_getprop_7opencog_9atomspace_4Atom_tv, __pyx_setprop_7opencog_9atomspace_4Atom_tv, 0, 0},
  {(char *)"av", __pyx_getprop_7opencog_9atomspace_4Atom_av, __pyx_setprop_7opencog_9atomspace_4Atom_av, 0, 0},
  {(char *)"sti", __pyx_getprop_7opencog_9atomspace_4Atom_sti, __pyx_setprop_7opencog_9atomspace_4Atom_sti, 0, 0},
  {(char *)"lti", __pyx_getprop_7opencog_9atomspace_4Atom_lti, __pyx_setprop_7opencog_9atomspace_4Atom_lti, 0, 0},
  {(char *)"vlti", __pyx_getprop_7opencog_9atomspace_4Atom_vlti, __pyx_setprop_7opencog_9atomspace_4Atom_vlti, 0, 0},
  {(char *)"out", __pyx_getprop_7opencog_9atomspace_4Atom_out, 0, 0, 0},
  {(char *)"arity", __pyx_getprop_7opencog_9atomspace_4Atom_arity, 0, 0, 0},
  {(char *)"incoming", __pyx_getprop_7opencog_9atomspace_4Atom_incoming, 0, 0, 0},
  {(char *)"xincoming", __pyx_getprop_7opencog_9atomspace_4Atom_xincoming, 0, 0, 0},
  {(char *)"type", __pyx_getprop_7opencog_9atomspace_4Atom_type, 0, 0, 0},
  {(char *)"type_name", __pyx_getprop_7opencog_9atomspace_4Atom_type_name, 0, 0, 0},
  {(char *)"t", __pyx_getprop_7opencog_9atomspace_4Atom_t, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Atom = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  __pyx_pw_7opencog_9atomspace_4Atom_7__nonzero__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_7opencog_9atomspace_Atom = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.Atom", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace_Atom), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace_Atom, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pw_7opencog_9atomspace_4Atom_38__cmp__, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_7opencog_9atomspace_4Atom_34__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Atom, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_7opencog_9atomspace_4Atom_40__hash__, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opencog_9atomspace_4Atom_32__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace_Atom, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace_Atom, /*tp_clear*/
  __pyx_pw_7opencog_9atomspace_4Atom_36__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opencog_9atomspace_Atom, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7opencog_9atomspace_Atom, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7opencog_9atomspace_4Atom_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace_Atom, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7opencog_9atomspace_AtomSpace(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7opencog_9atomspace_9AtomSpace_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace_AtomSpace(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7opencog_9atomspace_9AtomSpace_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opencog_9atomspace_AtomSpace[] = {
  {"add", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_9add, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opencog_9atomspace_9AtomSpace_8add},
  {"add_node", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_11add_node, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opencog_9atomspace_9AtomSpace_10add_node},
  {"add_link", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_13add_link, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opencog_9atomspace_9AtomSpace_12add_link},
  {"is_valid", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_15is_valid, METH_O, __pyx_doc_7opencog_9atomspace_9AtomSpace_14is_valid},
  {"remove", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_17remove, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opencog_9atomspace_9AtomSpace_16remove},
  {"clear", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_19clear, METH_NOARGS, __pyx_doc_7opencog_9atomspace_9AtomSpace_18clear},
  {"size", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_29size, METH_NOARGS, __pyx_doc_7opencog_9atomspace_9AtomSpace_28size},
  {"get_atoms_by_type", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_31get_atoms_by_type, METH_VARARGS|METH_KEYWORDS, 0},
  {"xget_atoms_by_type", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_33xget_atoms_by_type, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_atoms_by_av", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_36get_atoms_by_av, METH_VARARGS|METH_KEYWORDS, 0},
  {"xget_atoms_by_av", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_38xget_atoms_by_av, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_atoms_in_attentional_focus", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_41get_atoms_in_attentional_focus, METH_NOARGS, 0},
  {"xget_atoms_in_attentional_focus", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_43xget_atoms_in_attentional_focus, METH_NOARGS, 0},
  {"get_predicates", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_46get_predicates, METH_VARARGS|METH_KEYWORDS, 0},
  {"xget_predicates", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_48xget_predicates, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_predicates_for", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_51get_predicates_for, METH_VARARGS|METH_KEYWORDS, 0},
  {"xget_predicates_for", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_53xget_predicates_for, METH_VARARGS|METH_KEYWORDS, 0},
  {"include_incoming", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_56include_incoming, METH_O, __pyx_doc_7opencog_9atomspace_9AtomSpace_55include_incoming},
  {"include_outgoing", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_58include_outgoing, METH_O, __pyx_doc_7opencog_9atomspace_9AtomSpace_57include_outgoing},
  {"print_list", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_60print_list, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_AtomSpace = {
  __pyx_pw_7opencog_9atomspace_9AtomSpace_25__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_7opencog_9atomspace_9AtomSpace_21__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_AtomSpace = {
  __pyx_pw_7opencog_9atomspace_9AtomSpace_25__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7opencog_9atomspace_AtomSpace = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.AtomSpace", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace_AtomSpace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace_AtomSpace, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_AtomSpace, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_AtomSpace, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opencog_9atomspace_9AtomSpace_23__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_7opencog_9atomspace_9AtomSpace_7__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7opencog_9atomspace_9AtomSpace_27__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opencog_9atomspace_AtomSpace, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7opencog_9atomspace_9AtomSpace_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace_AtomSpace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *__pyx_freelist_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type[8];
static int __pyx_freecount_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type = 0;

static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type)))) {
    o = (PyObject*)__pyx_freelist_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type[--__pyx_freecount_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type];
    memset(o, 0, sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *)o);
  new((void*)&(p->__pyx_v_c_handle_iter)) std::vector<opencog::Handle> ::iterator();
  new((void*)&(p->__pyx_v_current_c_handle)) opencog::Handle();
  new((void*)&(p->__pyx_v_handle_vector)) std::vector<opencog::Handle> ();
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_c_handle_iter);
  __Pyx_call_destructor(p->__pyx_v_current_c_handle);
  __Pyx_call_destructor(p->__pyx_v_handle_vector);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_subtype);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type)))) {
    __pyx_freelist_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type[__pyx_freecount_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type++] = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_subtype) {
    e = (*v)(p->__pyx_v_subtype, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_subtype);
  p->__pyx_v_subtype = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.__pyx_scope_struct__xget_atoms_by_type", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *__pyx_freelist_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av[8];
static int __pyx_freecount_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av = 0;

static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av)))) {
    o = (PyObject*)__pyx_freelist_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av[--__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av];
    memset(o, 0, sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *)o);
  new((void*)&(p->__pyx_v_c_handle_iter)) std::vector<opencog::Handle> ::iterator();
  new((void*)&(p->__pyx_v_current_c_handle)) opencog::Handle();
  new((void*)&(p->__pyx_v_handle_vector)) std::vector<opencog::Handle> ();
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_c_handle_iter);
  __Pyx_call_destructor(p->__pyx_v_current_c_handle);
  __Pyx_call_destructor(p->__pyx_v_handle_vector);
  Py_CLEAR(p->__pyx_v_lower_bound);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_upper_bound);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av)))) {
    __pyx_freelist_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av[__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av++] = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *)o;
  if (p->__pyx_v_lower_bound) {
    e = (*v)(p->__pyx_v_lower_bound, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_upper_bound) {
    e = (*v)(p->__pyx_v_upper_bound, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av *)o;
  tmp = ((PyObject*)p->__pyx_v_lower_bound);
  p->__pyx_v_lower_bound = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_upper_bound);
  p->__pyx_v_upper_bound = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.__pyx_scope_struct_1_xget_atoms_by_av", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *__pyx_freelist_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus[8];
static int __pyx_freecount_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus = 0;

static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus)))) {
    o = (PyObject*)__pyx_freelist_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus[--__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus];
    memset(o, 0, sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *)o);
  new((void*)&(p->__pyx_v_c_handle_iter)) std::vector<opencog::Handle> ::iterator();
  new((void*)&(p->__pyx_v_current_c_handle)) opencog::Handle();
  new((void*)&(p->__pyx_v_handle_vector)) std::vector<opencog::Handle> ();
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_c_handle_iter);
  __Pyx_call_destructor(p->__pyx_v_current_c_handle);
  __Pyx_call_destructor(p->__pyx_v_handle_vector);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus)))) {
    __pyx_freelist_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus[__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus++] = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.__pyx_scope_struct_2_xget_atoms_in_attentional_focus", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *__pyx_freelist_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates[8];
static int __pyx_freecount_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates = 0;

static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates)))) {
    o = (PyObject*)__pyx_freelist_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates[--__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates];
    memset(o, 0, sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *)o);
  new((void*)&(p->__pyx_v_c_handle_iter)) std::vector<opencog::Handle> ::iterator();
  new((void*)&(p->__pyx_v_current_c_handle)) opencog::Handle();
  new((void*)&(p->__pyx_v_handle_vector)) std::vector<opencog::Handle> ();
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_c_handle_iter);
  __Pyx_call_destructor(p->__pyx_v_current_c_handle);
  __Pyx_call_destructor(p->__pyx_v_handle_vector);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_subclasses);
  Py_CLEAR(p->__pyx_v_target);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates)))) {
    __pyx_freelist_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates[__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates++] = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_subclasses) {
    e = (*v)(p->__pyx_v_subclasses, a); if (e) return e;
  }
  if (p->__pyx_v_target) {
    e = (*v)(((PyObject*)p->__pyx_v_target), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_subclasses);
  p->__pyx_v_subclasses = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_target);
  p->__pyx_v_target = ((struct __pyx_obj_7opencog_9atomspace_Atom *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.__pyx_scope_struct_3_xget_predicates", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *__pyx_freelist_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for[8];
static int __pyx_freecount_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for = 0;

static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for)))) {
    o = (PyObject*)__pyx_freelist_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for[--__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for];
    memset(o, 0, sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *)o);
  new((void*)&(p->__pyx_v_c_handle_iter)) std::vector<opencog::Handle> ::iterator();
  new((void*)&(p->__pyx_v_current_c_handle)) opencog::Handle();
  new((void*)&(p->__pyx_v_handle_vector)) std::vector<opencog::Handle> ();
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_c_handle_iter);
  __Pyx_call_destructor(p->__pyx_v_current_c_handle);
  __Pyx_call_destructor(p->__pyx_v_handle_vector);
  Py_CLEAR(p->__pyx_v_predicate);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_target);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for)))) {
    __pyx_freelist_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for[__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for++] = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *)o;
  if (p->__pyx_v_predicate) {
    e = (*v)(((PyObject*)p->__pyx_v_predicate), a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_target) {
    e = (*v)(((PyObject*)p->__pyx_v_target), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for *)o;
  tmp = ((PyObject*)p->__pyx_v_predicate);
  p->__pyx_v_predicate = ((struct __pyx_obj_7opencog_9atomspace_Atom *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_target);
  p->__pyx_v_target = ((struct __pyx_obj_7opencog_9atomspace_Atom *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.__pyx_scope_struct_4_xget_predicates_for", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *__pyx_freelist_7opencog_9atomspace___pyx_scope_struct_5___get__[8];
static int __pyx_freecount_7opencog_9atomspace___pyx_scope_struct_5___get__ = 0;

static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_5___get__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_5___get__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__)))) {
    o = (PyObject*)__pyx_freelist_7opencog_9atomspace___pyx_scope_struct_5___get__[--__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_5___get__];
    memset(o, 0, sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *)o);
  new((void*)&(p->__pyx_v_c_handle_iter)) std::vector<opencog::Handle> ::iterator();
  new((void*)&(p->__pyx_v_current_c_handle)) opencog::Handle();
  new((void*)&(p->__pyx_v_handle_vector)) std::vector<opencog::Handle> ();
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct_5___get__(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_c_handle_iter);
  __Pyx_call_destructor(p->__pyx_v_current_c_handle);
  __Pyx_call_destructor(p->__pyx_v_handle_vector);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_5___get__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__)))) {
    __pyx_freelist_7opencog_9atomspace___pyx_scope_struct_5___get__[__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_5___get__++] = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct_5___get__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct_5___get__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_7opencog_9atomspace_Atom *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7opencog_9atomspace___pyx_scope_struct_5___get__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.__pyx_scope_struct_5___get__", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_5___get__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct_5___get__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct_5___get__, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct_5___get__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_5___get__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *__pyx_freelist_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type[8];
static int __pyx_freecount_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type = 0;

static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type)))) {
    o = (PyObject*)__pyx_freelist_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type[--__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type];
    memset(o, 0, sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *)o);
  new((void*)&(p->__pyx_v_c_handle_iter)) std::vector<opencog::Handle> ::iterator();
  new((void*)&(p->__pyx_v_current_c_handle)) opencog::Handle();
  new((void*)&(p->__pyx_v_handle_vector)) std::vector<opencog::Handle> ();
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_c_handle_iter);
  __Pyx_call_destructor(p->__pyx_v_current_c_handle);
  __Pyx_call_destructor(p->__pyx_v_handle_vector);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type)))) {
    __pyx_freelist_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type[__pyx_freecount_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type++] = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_7opencog_9atomspace_Atom *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.__pyx_scope_struct_6_xincoming_by_type", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "atomspace",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {&__pyx_n_s_AtomSpace_xget_atoms_by_av, __pyx_k_AtomSpace_xget_atoms_by_av, sizeof(__pyx_k_AtomSpace_xget_atoms_by_av), 0, 0, 1, 1},
  {&__pyx_n_s_AtomSpace_xget_atoms_by_type, __pyx_k_AtomSpace_xget_atoms_by_type, sizeof(__pyx_k_AtomSpace_xget_atoms_by_type), 0, 0, 1, 1},
  {&__pyx_n_s_AtomSpace_xget_atoms_in_attentio, __pyx_k_AtomSpace_xget_atoms_in_attentio, sizeof(__pyx_k_AtomSpace_xget_atoms_in_attentio), 0, 0, 1, 1},
  {&__pyx_n_s_AtomSpace_xget_predicates, __pyx_k_AtomSpace_xget_predicates, sizeof(__pyx_k_AtomSpace_xget_predicates), 0, 0, 1, 1},
  {&__pyx_n_s_AtomSpace_xget_predicates_for, __pyx_k_AtomSpace_xget_predicates_for, sizeof(__pyx_k_AtomSpace_xget_predicates_for), 0, 0, 1, 1},
  {&__pyx_n_s_Atom___get, __pyx_k_Atom___get, sizeof(__pyx_k_Atom___get), 0, 0, 1, 1},
  {&__pyx_n_s_Atom_xincoming_by_type, __pyx_k_Atom_xincoming_by_type, sizeof(__pyx_k_Atom_xincoming_by_type), 0, 0, 1, 1},
  {&__pyx_kp_s_Atomspace, __pyx_k_Atomspace, sizeof(__pyx_k_Atomspace), 0, 0, 1, 0},
  {&__pyx_kp_s_Got_blank_type_name_while_genera, __pyx_k_Got_blank_type_name_while_genera, sizeof(__pyx_k_Got_blank_type_name_while_genera), 0, 0, 1, 0},
  {&__pyx_n_s_Link, __pyx_k_Link, sizeof(__pyx_k_Link), 0, 0, 1, 1},
  {&__pyx_kp_s_Links_can_t_have_names, __pyx_k_Links_can_t_have_names, sizeof(__pyx_k_Links_can_t_have_names), 0, 0, 1, 0},
  {&__pyx_n_s_NO_TYPE, __pyx_k_NO_TYPE, sizeof(__pyx_k_NO_TYPE), 0, 0, 1, 1},
  {&__pyx_kp_s_Need_Atom_object, __pyx_k_Need_Atom_object, sizeof(__pyx_k_Need_Atom_object), 0, 0, 1, 0},
  {&__pyx_n_s_Node, __pyx_k_Node, sizeof(__pyx_k_Node), 0, 0, 1, 1},
  {&__pyx_kp_s_Nodes_can_t_have_outgoing_sets, __pyx_k_Nodes_can_t_have_outgoing_sets, sizeof(__pyx_k_Nodes_can_t_have_outgoing_sets), 0, 0, 1, 0},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_n_s_PredicateNode, __pyx_k_PredicateNode, sizeof(__pyx_k_PredicateNode), 0, 0, 1, 1},
  {&__pyx_kp_s_TruthValue_does_not_yet_support, __pyx_k_TruthValue_does_not_yet_support, sizeof(__pyx_k_TruthValue_does_not_yet_support), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_add_link, __pyx_k_add_link, sizeof(__pyx_k_add_link), 0, 0, 1, 1},
  {&__pyx_n_s_add_node, __pyx_k_add_node, sizeof(__pyx_k_add_node), 0, 0, 1, 1},
  {&__pyx_n_s_addr, __pyx_k_addr, sizeof(__pyx_k_addr), 0, 0, 1, 1},
  {&__pyx_kp_s_addr_2, __pyx_k_addr_2, sizeof(__pyx_k_addr_2), 0, 0, 1, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_atom, __pyx_k_atom, sizeof(__pyx_k_atom), 0, 0, 1, 1},
  {&__pyx_kp_s_atom_av_property_needs_a_TruthVa, __pyx_k_atom_av_property_needs_a_TruthVa, sizeof(__pyx_k_atom_av_property_needs_a_TruthVa), 0, 0, 1, 0},
  {&__pyx_kp_s_atom_av_property_needs_a_diction, __pyx_k_atom_av_property_needs_a_diction, sizeof(__pyx_k_atom_av_property_needs_a_diction), 0, 0, 1, 0},
  {&__pyx_n_s_atom_name, __pyx_k_atom_name, sizeof(__pyx_k_atom_name), 0, 0, 1, 1},
  {&__pyx_n_s_atom_types, __pyx_k_atom_types, sizeof(__pyx_k_atom_types), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_confidence, __pyx_k_confidence, sizeof(__pyx_k_confidence), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_decrement_vlti, __pyx_k_decrement_vlti, sizeof(__pyx_k_decrement_vlti), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_atoms_by_type, __pyx_k_get_atoms_by_type, sizeof(__pyx_k_get_atoms_by_type), 0, 0, 1, 1},
  {&__pyx_n_s_get_out, __pyx_k_get_out, sizeof(__pyx_k_get_out), 0, 0, 1, 1},
  {&__pyx_n_s_get_refreshed_types, __pyx_k_get_refreshed_types, sizeof(__pyx_k_get_refreshed_types), 0, 0, 1, 1},
  {&__pyx_n_s_get_type, __pyx_k_get_type, sizeof(__pyx_k_get_type), 0, 0, 1, 1},
  {&__pyx_n_s_get_type_name, __pyx_k_get_type_name, sizeof(__pyx_k_get_type_name), 0, 0, 1, 1},
  {&__pyx_n_s_hex, __pyx_k_hex, sizeof(__pyx_k_hex), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_include_incoming, __pyx_k_include_incoming, sizeof(__pyx_k_include_incoming), 0, 0, 1, 1},
  {&__pyx_n_s_include_outgoing, __pyx_k_include_outgoing, sizeof(__pyx_k_include_outgoing), 0, 0, 1, 1},
  {&__pyx_n_s_incoming, __pyx_k_incoming, sizeof(__pyx_k_incoming), 0, 0, 1, 1},
  {&__pyx_n_s_increment_vlti, __pyx_k_increment_vlti, sizeof(__pyx_k_increment_vlti), 0, 0, 1, 1},
  {&__pyx_n_s_is_a, __pyx_k_is_a, sizeof(__pyx_k_is_a), 0, 0, 1, 1},
  {&__pyx_n_s_is_valid, __pyx_k_is_valid, sizeof(__pyx_k_is_valid), 0, 0, 1, 1},
  {&__pyx_n_s_long_string, __pyx_k_long_string, sizeof(__pyx_k_long_string), 0, 0, 1, 1},
  {&__pyx_n_s_lower_bound, __pyx_k_lower_bound, sizeof(__pyx_k_lower_bound), 0, 0, 1, 1},
  {&__pyx_n_s_lptr, __pyx_k_lptr, sizeof(__pyx_k_lptr), 0, 0, 1, 1},
  {&__pyx_n_s_lti, __pyx_k_lti, sizeof(__pyx_k_lti), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_opencog_atomspace, __pyx_k_opencog_atomspace, sizeof(__pyx_k_opencog_atomspace), 0, 0, 1, 1},
  {&__pyx_n_s_out, __pyx_k_out, sizeof(__pyx_k_out), 0, 0, 1, 1},
  {&__pyx_n_s_outgoing, __pyx_k_outgoing, sizeof(__pyx_k_outgoing), 0, 0, 1, 1},
  {&__pyx_kp_s_owns, __pyx_k_owns, sizeof(__pyx_k_owns), 0, 0, 1, 0},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_predicate, __pyx_k_predicate, sizeof(__pyx_k_predicate), 0, 0, 1, 1},
  {&__pyx_n_s_predicate_type, __pyx_k_predicate_type, sizeof(__pyx_k_predicate_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_recursive, __pyx_k_recursive, sizeof(__pyx_k_recursive), 0, 0, 1, 1},
  {&__pyx_kp_s_root_OPENCOG_atomspace_opencog, __pyx_k_root_OPENCOG_atomspace_opencog, sizeof(__pyx_k_root_OPENCOG_atomspace_opencog), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sti, __pyx_k_sti, sizeof(__pyx_k_sti), 0, 0, 1, 1},
  {&__pyx_n_s_strength, __pyx_k_strength, sizeof(__pyx_k_strength), 0, 0, 1, 1},
  {&__pyx_n_s_subclasses, __pyx_k_subclasses, sizeof(__pyx_k_subclasses), 0, 0, 1, 1},
  {&__pyx_n_s_subtype, __pyx_k_subtype, sizeof(__pyx_k_subtype), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_t1, __pyx_k_t1, sizeof(__pyx_k_t1), 0, 0, 1, 1},
  {&__pyx_n_s_t2, __pyx_k_t2, sizeof(__pyx_k_t2), 0, 0, 1, 1},
  {&__pyx_n_s_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tv, __pyx_k_tv, sizeof(__pyx_k_tv), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_types, __pyx_k_types, sizeof(__pyx_k_types), 0, 0, 1, 1},
  {&__pyx_n_s_upper_bound, __pyx_k_upper_bound, sizeof(__pyx_k_upper_bound), 0, 0, 1, 1},
  {&__pyx_n_s_vlti, __pyx_k_vlti, sizeof(__pyx_k_vlti), 0, 0, 1, 1},
  {&__pyx_n_s_xget_atoms_by_av, __pyx_k_xget_atoms_by_av, sizeof(__pyx_k_xget_atoms_by_av), 0, 0, 1, 1},
  {&__pyx_n_s_xget_atoms_by_type, __pyx_k_xget_atoms_by_type, sizeof(__pyx_k_xget_atoms_by_type), 0, 0, 1, 1},
  {&__pyx_n_s_xget_atoms_in_attentional_focus, __pyx_k_xget_atoms_in_attentional_focus, sizeof(__pyx_k_xget_atoms_in_attentional_focus), 0, 0, 1, 1},
  {&__pyx_n_s_xget_predicates, __pyx_k_xget_predicates, sizeof(__pyx_k_xget_predicates), 0, 0, 1, 1},
  {&__pyx_n_s_xget_predicates_for, __pyx_k_xget_predicates_for, sizeof(__pyx_k_xget_predicates_for), 0, 0, 1, 1},
  {&__pyx_n_s_xincoming_by_type, __pyx_k_xincoming_by_type, sizeof(__pyx_k_xincoming_by_type), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_hex = __Pyx_GetBuiltinName(__pyx_n_s_hex); if (!__pyx_builtin_hex) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":23
 * # Given the string name, look up the numeric type.
 * cdef c_get_named_type(str type_name):
 *     return nameserver().getType(type_name.encode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 * # Atom type methods.
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":27
 * # Atom type methods.
 * def get_type_name(t):
 *     return c_get_type_name(t).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * def get_type(name):
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":64
 *     def __str__(self):
 *         cs = string(self._ptr().to_string().c_str())
 *         return cs.decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":68
 *     def __repr__(self):
 *         cs = string(self._ptr().to_string().c_str())
 *         return cs.decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * #    @staticmethod
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":12
 * cdef api string get_path_as_string() with gil:
 *     import sys
 *     return str(sys.path).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * cdef convert_handle_seq_to_python_list(vector[cHandle] handles, AtomSpace atomspace):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":95
 *         if self.atomspace == NULL:
 *             return None
 *         cdef string name = atom_name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         cdef cHandle result = self.atomspace.add_node(t, name)
 * 
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_UTF_8); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":133
 *             assert isinstance(atom, Atom)
 *         except AssertionError:
 *             raise TypeError("Need Atom object")             # <<<<<<<<<<<<<<
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):
 *             return True
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Need_Atom_object); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":184
 *         if self.atomspace == NULL:
 *             return None
 *         return iter(self.get_atoms_by_type(0))             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "../../../../opencog/cython/opencog/atom.pyx":63
 *                 assert isinstance(truth_value, TruthValue)
 *             except AssertionError:
 *                 raise TypeError("atom.av property needs a TruthValue object")             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_atom_av_property_needs_a_TruthVa); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "../../../../opencog/cython/opencog/atom.pyx":82
 *                 assert isinstance(av_dict, dict)
 *             except AssertionError:
 *                 raise TypeError("atom.av property needs a dictionary object")             # <<<<<<<<<<<<<<
 *             cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_atom_av_property_needs_a_diction); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":26
 * 
 * # Atom type methods.
 * def get_type_name(t):             # <<<<<<<<<<<<<<
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_n_s_t); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_root_OPENCOG_atomspace_opencog, __pyx_n_s_get_type_name, 26, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "../../../../opencog/cython/opencog/nameserver.pyx":29
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 * def get_type(name):             # <<<<<<<<<<<<<<
 *     return c_get_named_type(name)
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_n_s_name); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_root_OPENCOG_atomspace_opencog, __pyx_n_s_get_type, 29, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "../../../../opencog/cython/opencog/nameserver.pyx":32
 *     return c_get_named_type(name)
 * 
 * def is_a(Type t1, Type t2):             # <<<<<<<<<<<<<<
 *     return nameserver().isA(t1,t2)
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_n_s_t1, __pyx_n_s_t2); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_root_OPENCOG_atomspace_opencog, __pyx_n_s_is_a, 32, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "../../../../opencog/cython/opencog/nameserver.pyx":63
 * #And you can refresh these new types by this function
 * 
 * def get_refreshed_types():             # <<<<<<<<<<<<<<
 *     global types
 *     types = type('atom_types', (), generate_type_module())
 */
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_root_OPENCOG_atomspace_opencog, __pyx_n_s_get_refreshed_types, 63, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initatomspace(void); /*proto*/
PyMODINIT_FUNC initatomspace(void)
#else
PyMODINIT_FUNC PyInit_atomspace(void); /*proto*/
PyMODINIT_FUNC PyInit_atomspace(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_7opencog_9atomspace_Type __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_atomspace(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("atomspace", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_opencog__atomspace) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "opencog.atomspace")) {
      if (unlikely(PyDict_SetItemString(modules, "opencog.atomspace", __pyx_m) < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("AtomSpace_factory", (void (*)(void))__pyx_f_7opencog_9atomspace_AtomSpace_factory, "PyObject *(opencog::AtomSpace *)") < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("get_path_as_string", (void (*)(void))__pyx_f_7opencog_9atomspace_get_path_as_string, "std::string (void)") < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("py_atomspace", (void (*)(void))__pyx_f_7opencog_9atomspace_py_atomspace, "PyObject *(opencog::AtomSpace *)") < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("py_atom", (void (*)(void))__pyx_f_7opencog_9atomspace_py_atom, "PyObject *(PANDLE, PyObject *)") < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  __pyx_vtabptr_7opencog_9atomspace_TruthValue = &__pyx_vtable_7opencog_9atomspace_TruthValue;
  __pyx_vtable_7opencog_9atomspace_TruthValue._mean = (PyObject *(*)(struct __pyx_obj_7opencog_9atomspace_TruthValue *))__pyx_f_7opencog_9atomspace_10TruthValue__mean;
  __pyx_vtable_7opencog_9atomspace_TruthValue._confidence = (PyObject *(*)(struct __pyx_obj_7opencog_9atomspace_TruthValue *))__pyx_f_7opencog_9atomspace_10TruthValue__confidence;
  __pyx_vtable_7opencog_9atomspace_TruthValue._count = (PyObject *(*)(struct __pyx_obj_7opencog_9atomspace_TruthValue *))__pyx_f_7opencog_9atomspace_10TruthValue__count;
  __pyx_vtable_7opencog_9atomspace_TruthValue._ptr = (const opencog::TruthValue *(*)(struct __pyx_obj_7opencog_9atomspace_TruthValue *))__pyx_f_7opencog_9atomspace_10TruthValue__ptr;
  __pyx_vtable_7opencog_9atomspace_TruthValue._tvptr = (std::shared_ptr<const opencog::TruthValue> *(*)(struct __pyx_obj_7opencog_9atomspace_TruthValue *))__pyx_f_7opencog_9atomspace_10TruthValue__tvptr;
  __pyx_vtable_7opencog_9atomspace_TruthValue._init = (PyObject *(*)(struct __pyx_obj_7opencog_9atomspace_TruthValue *, float, float))__pyx_f_7opencog_9atomspace_10TruthValue__init;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace_TruthValue) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7opencog_9atomspace_TruthValue.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7opencog_9atomspace_TruthValue.tp_dict, __pyx_vtabptr_7opencog_9atomspace_TruthValue) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "TruthValue", (PyObject *)&__pyx_type_7opencog_9atomspace_TruthValue) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7opencog_9atomspace_TruthValue = &__pyx_type_7opencog_9atomspace_TruthValue;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace_Atom) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7opencog_9atomspace_Atom.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Atom", (PyObject *)&__pyx_type_7opencog_9atomspace_Atom) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7opencog_9atomspace_Atom = &__pyx_type_7opencog_9atomspace_Atom;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace_AtomSpace) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7opencog_9atomspace_AtomSpace.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7opencog_9atomspace_AtomSpace, "__contains__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_20__contains__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_20__contains__.doc = __pyx_doc_7opencog_9atomspace_9AtomSpace_20__contains__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_20__contains__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7opencog_9atomspace_AtomSpace, "__str__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_22__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_22__str__.doc = __pyx_doc_7opencog_9atomspace_9AtomSpace_22__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_22__str__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7opencog_9atomspace_AtomSpace, "__len__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_24__len__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_24__len__.doc = __pyx_doc_7opencog_9atomspace_9AtomSpace_24__len__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_24__len__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7opencog_9atomspace_AtomSpace, "__iter__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_26__iter__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_26__iter__.doc = __pyx_doc_7opencog_9atomspace_9AtomSpace_26__iter__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_26__iter__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "AtomSpace", (PyObject *)&__pyx_type_7opencog_9atomspace_AtomSpace) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7opencog_9atomspace_AtomSpace = &__pyx_type_7opencog_9atomspace_AtomSpace;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type.tp_print = 0;
  __pyx_ptype_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type = &__pyx_type_7opencog_9atomspace___pyx_scope_struct__xget_atoms_by_type;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av.tp_print = 0;
  __pyx_ptype_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av = &__pyx_type_7opencog_9atomspace___pyx_scope_struct_1_xget_atoms_by_av;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus.tp_print = 0;
  __pyx_ptype_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus = &__pyx_type_7opencog_9atomspace___pyx_scope_struct_2_xget_atoms_in_attentional_focus;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates.tp_print = 0;
  __pyx_ptype_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates = &__pyx_type_7opencog_9atomspace___pyx_scope_struct_3_xget_predicates;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for.tp_print = 0;
  __pyx_ptype_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for = &__pyx_type_7opencog_9atomspace___pyx_scope_struct_4_xget_predicates_for;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace___pyx_scope_struct_5___get__) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7opencog_9atomspace___pyx_scope_struct_5___get__.tp_print = 0;
  __pyx_ptype_7opencog_9atomspace___pyx_scope_struct_5___get__ = &__pyx_type_7opencog_9atomspace___pyx_scope_struct_5___get__;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type.tp_print = 0;
  __pyx_ptype_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type = &__pyx_type_7opencog_9atomspace___pyx_scope_struct_6_xincoming_by_type;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "../../../../opencog/cython/opencog/nameserver.pyx":26
 * 
 * # Atom type methods.
 * def get_type_name(t):             # <<<<<<<<<<<<<<
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_1get_type_name, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_type_name, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":29
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 * def get_type(name):             # <<<<<<<<<<<<<<
 *     return c_get_named_type(name)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_3get_type, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_type, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":32
 *     return c_get_named_type(name)
 * 
 * def is_a(Type t1, Type t2):             # <<<<<<<<<<<<<<
 *     return nameserver().isA(t1,t2)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_5is_a, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_a, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":43
 * #    setattr(mod, name, class_)
 * 
 * types = {}             # <<<<<<<<<<<<<<
 * cdef generate_type_module():
 *     global types
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":57
 *     return types
 * 
 * types = type('atom_types', (), generate_type_module())             # <<<<<<<<<<<<<<
 * 
 * #This function is for refreshing new types
 */
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_generate_type_module(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_atom_types);
  __Pyx_GIVEREF(__pyx_n_s_atom_types);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_atom_types);
  __Pyx_INCREF(__pyx_empty_tuple);
  __Pyx_GIVEREF(__pyx_empty_tuple);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_empty_tuple);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyType_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":63
 * #And you can refresh these new types by this function
 * 
 * def get_refreshed_types():             # <<<<<<<<<<<<<<
 *     global types
 *     types = type('atom_types', (), generate_type_module())
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_7get_refreshed_types, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_refreshed_types, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":279
 *     def get_predicates(self,
 *                        Atom target,
 *                        Type predicate_type = types.PredicateNode,             # <<<<<<<<<<<<<<
 *                        subclasses=True):
 *         if self.atomspace == NULL:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PredicateNode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_short(__pyx_t_2); if (unlikely((__pyx_t_3 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__11 = __pyx_t_3;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":291
 *     def xget_predicates(self,
 *                         Atom target,
 *                         Type predicate_type = types.PredicateNode,             # <<<<<<<<<<<<<<
 *                         subclasses=True):
 *         if self.atomspace == NULL:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_types); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_PredicateNode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_3 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__12 = __pyx_t_3;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":338
 * 
 *     @classmethod
 *     def include_incoming(cls, atoms):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the conjunction of a set of atoms and their incoming sets.
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_7opencog_9atomspace_AtomSpace, __pyx_n_s_include_incoming); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":337
 *             inc(c_handle_iter)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def include_incoming(cls, atoms):
 *         """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opencog_9atomspace_AtomSpace->tp_dict, __pyx_n_s_include_incoming, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7opencog_9atomspace_AtomSpace);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":349
 * 
 *     @classmethod
 *     def include_outgoing(cls, atoms):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the conjunction of a set of atoms and their outgoing sets.
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_7opencog_9atomspace_AtomSpace, __pyx_n_s_include_outgoing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":348
 *                 [item for sublist in [atom.incoming for atom in atoms if len(atom.incoming) > 0] for item in sublist]))
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def include_outgoing(cls, atoms):
 *         """
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opencog_9atomspace_AtomSpace->tp_dict, __pyx_n_s_include_outgoing, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opencog_9atomspace_AtomSpace);

  /* "opencog/atomspace.pyx":1
 * # Cython/distutils can only handle a single file as the source for             # <<<<<<<<<<<<<<
 * # a python module.  Since it is helpful to be able to split the binding
 * # code into separate files, we just include them here.
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init opencog.atomspace", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init opencog.atomspace");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static void __Pyx__ReturnWithStopIteration(PyObject* value) {
    PyObject *exc, *args;
#if CYTHON_COMPILING_IN_CPYTHON
    if ((PY_VERSION_HEX >= 0x03030000 && PY_VERSION_HEX < 0x030500B1) || PyTuple_Check(value)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) return;
        Py_INCREF(value);
        PyTuple_SET_ITEM(args, 0, value);
        exc = PyType_Type.tp_call(PyExc_StopIteration, args, NULL);
        Py_DECREF(args);
        if (!exc) return;
    } else {
        Py_INCREF(value);
        exc = value;
    }
    if (!PyThreadState_GET()->exc_type) {
        Py_INCREF(PyExc_StopIteration);
        __Pyx_ErrRestore(PyExc_StopIteration, exc, NULL);
        return;
    }
#else
    args = PyTuple_Pack(1, value);
    if (unlikely(!args)) return;
    exc = PyObject_Call(PyExc_StopIteration, args, NULL);
    Py_DECREF(args);
    if (unlikely(!exc)) return;
#endif
    PyErr_SetObject(PyExc_StopIteration, exc);
    Py_DECREF(exc);
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *x) {
    const short neg_one = (short) -1, const_zero = (short) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(short) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(short, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (short) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (short) 0;
                case  1: __PYX_VERIFY_RETURN_INT(short, digit, digits[0])
                case 2:
                    if (8 * sizeof(short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 2 * PyLong_SHIFT) {
                            return (short) (((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 3 * PyLong_SHIFT) {
                            return (short) (((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 4 * PyLong_SHIFT) {
                            return (short) (((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (short) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(short) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(short) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (short) 0;
                case -1: __PYX_VERIFY_RETURN_INT(short, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(short,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(short) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                            return (short) ((((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                            return (short) ((((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 4 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 4 * PyLong_SHIFT) {
                            return (short) ((((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(short) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, long, PyLong_AsLong(x))
            } else if (sizeof(short) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            short val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (short) -1;
        }
    } else {
        short val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (short) -1;
        val = __Pyx_PyInt_As_short(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to short");
    return (short) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to short");
    return (short) -1;
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value) {
    const short neg_one = (short) -1, const_zero = (short) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(short) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(short),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (PyObject_TypeCheck(method, methoddescr_type)) {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (PyObject_TypeCheck(method, __pyx_CyFunctionType)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_SetString(PyExc_TypeError,
                   "Class-level classmethod() can only be called on "
                   "a method_descriptor or instance method.");
    return NULL;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

#include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
#if PY_VERSION_HEX >= 0x030300A0
        if (ev && Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
#endif
        if (!ev || !PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            } else if (PyTuple_Check(ev)) {
                if (PyTuple_GET_SIZE(ev) >= 1) {
                    PyObject *value;
#if CYTHON_COMPILING_IN_CPYTHON
                    value = PySequence_ITEM(ev, 0);
#else
                    value = PyTuple_GET_ITEM(ev, 0);
                    Py_INCREF(value);
#endif
                    Py_DECREF(ev);
                    ev = value;
                } else {
                    Py_INCREF(Py_None);
                    Py_DECREF(ev);
                    ev = Py_None;
                }
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyThreadState *tstate = PyThreadState_GET();
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    Py_INCREF(self->gi_name);
    return self->gi_name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    Py_INCREF(self->gi_qualname);
    return self->gi_qualname;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(PyTypeObject* type, __pyx_coroutine_body_t body,
                                                   PyObject *closure, PyObject *name, PyObject *qualname) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    PyObject_GC_Track(gen);
    return gen;
}

static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
