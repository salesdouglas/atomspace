// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZMQMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZMQMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ZMQAttentionValueHolderMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZMQAttentionValueHolderMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZMQSingleTruthValueMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZMQSingleTruthValueMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZMQTruthValueMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZMQTruthValueMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZMQAtomMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZMQAtomMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZMQAtomFetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZMQAtomFetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZMQAtomTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZMQAtomTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZMQRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZMQRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZMQReplyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZMQReplyMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ZMQTruthValueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ZMQAtomType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ZMQAtomFetchKind_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ZMQFunctionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ZMQMessages_2eproto() {
  protobuf_AddDesc_ZMQMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ZMQMessages.proto");
  GOOGLE_CHECK(file != NULL);
  ZMQAttentionValueHolderMessage_descriptor_ = file->message_type(0);
  static const int ZMQAttentionValueHolderMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAttentionValueHolderMessage, sti_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAttentionValueHolderMessage, lti_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAttentionValueHolderMessage, vlti_),
  };
  ZMQAttentionValueHolderMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZMQAttentionValueHolderMessage_descriptor_,
      ZMQAttentionValueHolderMessage::default_instance_,
      ZMQAttentionValueHolderMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAttentionValueHolderMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAttentionValueHolderMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZMQAttentionValueHolderMessage));
  ZMQSingleTruthValueMessage_descriptor_ = file->message_type(1);
  static const int ZMQSingleTruthValueMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSingleTruthValueMessage, truthvaluetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSingleTruthValueMessage, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSingleTruthValueMessage, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSingleTruthValueMessage, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSingleTruthValueMessage, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSingleTruthValueMessage, l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSingleTruthValueMessage, confidencelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSingleTruthValueMessage, symmetric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSingleTruthValueMessage, diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSingleTruthValueMessage, firstorderdistribution_),
  };
  ZMQSingleTruthValueMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZMQSingleTruthValueMessage_descriptor_,
      ZMQSingleTruthValueMessage::default_instance_,
      ZMQSingleTruthValueMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSingleTruthValueMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQSingleTruthValueMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZMQSingleTruthValueMessage));
  ZMQTruthValueMessage_descriptor_ = file->message_type(2);
  static const int ZMQTruthValueMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQTruthValueMessage, singletruthvalue_),
  };
  ZMQTruthValueMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZMQTruthValueMessage_descriptor_,
      ZMQTruthValueMessage::default_instance_,
      ZMQTruthValueMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQTruthValueMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQTruthValueMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZMQTruthValueMessage));
  ZMQAtomMessage_descriptor_ = file->message_type(3);
  static const int ZMQAtomMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomMessage, atomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomMessage, attentionvalueholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomMessage, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomMessage, incoming_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomMessage, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomMessage, truthvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomMessage, outgoing_),
  };
  ZMQAtomMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZMQAtomMessage_descriptor_,
      ZMQAtomMessage::default_instance_,
      ZMQAtomMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZMQAtomMessage));
  ZMQAtomFetch_descriptor_ = file->message_type(4);
  static const int ZMQAtomFetch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomFetch, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomFetch, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomFetch, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomFetch, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomFetch, outgoing_),
  };
  ZMQAtomFetch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZMQAtomFetch_descriptor_,
      ZMQAtomFetch::default_instance_,
      ZMQAtomFetch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomFetch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomFetch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZMQAtomFetch));
  ZMQAtomTypeInfo_descriptor_ = file->message_type(5);
  static const int ZMQAtomTypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomTypeInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomTypeInfo, name_),
  };
  ZMQAtomTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZMQAtomTypeInfo_descriptor_,
      ZMQAtomTypeInfo::default_instance_,
      ZMQAtomTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQAtomTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZMQAtomTypeInfo));
  ZMQRequestMessage_descriptor_ = file->message_type(6);
  static const int ZMQRequestMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQRequestMessage, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQRequestMessage, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQRequestMessage, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQRequestMessage, atom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQRequestMessage, atom_type_),
  };
  ZMQRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZMQRequestMessage_descriptor_,
      ZMQRequestMessage::default_instance_,
      ZMQRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZMQRequestMessage));
  ZMQReplyMessage_descriptor_ = file->message_type(7);
  static const int ZMQReplyMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQReplyMessage, atom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQReplyMessage, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQReplyMessage, atom_type_),
  };
  ZMQReplyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZMQReplyMessage_descriptor_,
      ZMQReplyMessage::default_instance_,
      ZMQReplyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQReplyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZMQReplyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZMQReplyMessage));
  ZMQTruthValueType_descriptor_ = file->enum_type(0);
  ZMQAtomType_descriptor_ = file->enum_type(1);
  ZMQAtomFetchKind_descriptor_ = file->enum_type(2);
  ZMQFunctionType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ZMQMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZMQAttentionValueHolderMessage_descriptor_, &ZMQAttentionValueHolderMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZMQSingleTruthValueMessage_descriptor_, &ZMQSingleTruthValueMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZMQTruthValueMessage_descriptor_, &ZMQTruthValueMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZMQAtomMessage_descriptor_, &ZMQAtomMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZMQAtomFetch_descriptor_, &ZMQAtomFetch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZMQAtomTypeInfo_descriptor_, &ZMQAtomTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZMQRequestMessage_descriptor_, &ZMQRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZMQReplyMessage_descriptor_, &ZMQReplyMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ZMQMessages_2eproto() {
  delete ZMQAttentionValueHolderMessage::default_instance_;
  delete ZMQAttentionValueHolderMessage_reflection_;
  delete ZMQSingleTruthValueMessage::default_instance_;
  delete ZMQSingleTruthValueMessage_reflection_;
  delete ZMQTruthValueMessage::default_instance_;
  delete ZMQTruthValueMessage_reflection_;
  delete ZMQAtomMessage::default_instance_;
  delete ZMQAtomMessage_reflection_;
  delete ZMQAtomFetch::default_instance_;
  delete ZMQAtomFetch_reflection_;
  delete ZMQAtomTypeInfo::default_instance_;
  delete ZMQAtomTypeInfo_reflection_;
  delete ZMQRequestMessage::default_instance_;
  delete ZMQRequestMessage_reflection_;
  delete ZMQReplyMessage::default_instance_;
  delete ZMQReplyMessage_reflection_;
}

void protobuf_AddDesc_ZMQMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ZMQMessages.proto\"H\n\036ZMQAttentionValue"
    "HolderMessage\022\013\n\003STI\030\001 \002(\001\022\013\n\003LTI\030\002 \002(\001\022"
    "\014\n\004VLTI\030\003 \002(\001\"\351\001\n\032ZMQSingleTruthValueMes"
    "sage\022*\n\016truthvaluetype\030\001 \002(\0162\022.ZMQTruthV"
    "alueType\022\014\n\004mean\030\002 \001(\002\022\022\n\nconfidence\030\003 \001"
    "(\002\022\r\n\005count\030\004 \001(\002\022\t\n\001U\030\006 \001(\002\022\t\n\001L\030\007 \001(\002\022"
    "\027\n\017confidenceLevel\030\010 \001(\002\022\021\n\tsymmetric\030\t "
    "\001(\005\022\014\n\004diff\030\n \001(\002\022\036\n\026firstOrderDistribut"
    "ion\030\013 \003(\002\"M\n\024ZMQTruthValueMessage\0225\n\020sin"
    "gleTruthValue\030\001 \003(\0132\033.ZMQSingleTruthValu"
    "eMessage\"\371\001\n\016ZMQAtomMessage\022\036\n\010atomtype\030"
    "\001 \002(\0162\014.ZMQAtomType\022=\n\024attentionvaluehol"
    "der\030\002 \001(\0132\037.ZMQAttentionValueHolderMessa"
    "ge\022\016\n\006handle\030\003 \001(\004\022\020\n\010incoming\030\004 \003(\004\022\014\n\004"
    "type\030\005 \001(\005\022\r\n\005flags\030\006 \001(\005\022)\n\ntruthValue\030"
    "\007 \001(\0132\025.ZMQTruthValueMessage\022\014\n\004name\030\010 \001"
    "(\t\022\020\n\010outgoing\030\t \003(\004\"m\n\014ZMQAtomFetch\022\037\n\004"
    "kind\030\001 \002(\0162\021.ZMQAtomFetchKind\022\016\n\006handle\030"
    "\002 \001(\004\022\014\n\004type\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\022\020\n\010out"
    "going\030\005 \003(\004\"+\n\017ZMQAtomTypeInfo\022\n\n\002id\030\001 \001"
    "(\005\022\014\n\004name\030\002 \001(\t\"\251\001\n\021ZMQRequestMessage\022\""
    "\n\010function\030\001 \002(\0162\020.ZMQFunctionType\022\016\n\006ha"
    "ndle\030\002 \001(\004\022\034\n\005fetch\030\003 \003(\0132\r.ZMQAtomFetch"
    "\022\035\n\004atom\030\004 \003(\0132\017.ZMQAtomMessage\022#\n\tatom_"
    "type\030\005 \003(\0132\020.ZMQAtomTypeInfo\"b\n\017ZMQReply"
    "Message\022\035\n\004atom\030\001 \003(\0132\017.ZMQAtomMessage\022\013"
    "\n\003str\030\002 \001(\t\022#\n\tatom_type\030\003 \003(\0132\020.ZMQAtom"
    "TypeInfo*\210\001\n\021ZMQTruthValueType\022\033\n\027ZMQTru"
    "thValueTypeSimple\020\000\022\032\n\026ZMQTruthValueType"
    "Count\020\001\022\031\n\025ZMQTruthValueTypeNull\020\002\022\037\n\033ZM"
    "QTruthValueTypeIndefinite\020\003*P\n\013ZMQAtomTy"
    "pe\022\023\n\017ZMQAtomTypeNode\020\000\022\023\n\017ZMQAtomTypeLi"
    "nk\020\001\022\027\n\023ZMQAtomTypeNotFound\020\002*0\n\020ZMQAtom"
    "FetchKind\022\010\n\004UUID\020\000\022\010\n\004NODE\020\001\022\010\n\004LINK\020\002*"
    "U\n\017ZMQFunctionType\022\016\n\nZMQgetAtom\020\000\022\016\n\nZM"
    "QgetName\020\001\022\017\n\013ZMQgetAtoms\020\002\022\021\n\rZMQstoreA"
    "toms\020\003B*\n\025org.opencog.atomspaceB\017AtomSpa"
    "ceProtosH\001", 1490);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ZMQMessages.proto", &protobuf_RegisterTypes);
  ZMQAttentionValueHolderMessage::default_instance_ = new ZMQAttentionValueHolderMessage();
  ZMQSingleTruthValueMessage::default_instance_ = new ZMQSingleTruthValueMessage();
  ZMQTruthValueMessage::default_instance_ = new ZMQTruthValueMessage();
  ZMQAtomMessage::default_instance_ = new ZMQAtomMessage();
  ZMQAtomFetch::default_instance_ = new ZMQAtomFetch();
  ZMQAtomTypeInfo::default_instance_ = new ZMQAtomTypeInfo();
  ZMQRequestMessage::default_instance_ = new ZMQRequestMessage();
  ZMQReplyMessage::default_instance_ = new ZMQReplyMessage();
  ZMQAttentionValueHolderMessage::default_instance_->InitAsDefaultInstance();
  ZMQSingleTruthValueMessage::default_instance_->InitAsDefaultInstance();
  ZMQTruthValueMessage::default_instance_->InitAsDefaultInstance();
  ZMQAtomMessage::default_instance_->InitAsDefaultInstance();
  ZMQAtomFetch::default_instance_->InitAsDefaultInstance();
  ZMQAtomTypeInfo::default_instance_->InitAsDefaultInstance();
  ZMQRequestMessage::default_instance_->InitAsDefaultInstance();
  ZMQReplyMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZMQMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZMQMessages_2eproto {
  StaticDescriptorInitializer_ZMQMessages_2eproto() {
    protobuf_AddDesc_ZMQMessages_2eproto();
  }
} static_descriptor_initializer_ZMQMessages_2eproto_;
const ::google::protobuf::EnumDescriptor* ZMQTruthValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQTruthValueType_descriptor_;
}
bool ZMQTruthValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ZMQAtomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQAtomType_descriptor_;
}
bool ZMQAtomType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ZMQAtomFetchKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQAtomFetchKind_descriptor_;
}
bool ZMQAtomFetchKind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ZMQFunctionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQFunctionType_descriptor_;
}
bool ZMQFunctionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ZMQAttentionValueHolderMessage::kSTIFieldNumber;
const int ZMQAttentionValueHolderMessage::kLTIFieldNumber;
const int ZMQAttentionValueHolderMessage::kVLTIFieldNumber;
#endif  // !_MSC_VER

ZMQAttentionValueHolderMessage::ZMQAttentionValueHolderMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZMQAttentionValueHolderMessage)
}

void ZMQAttentionValueHolderMessage::InitAsDefaultInstance() {
}

ZMQAttentionValueHolderMessage::ZMQAttentionValueHolderMessage(const ZMQAttentionValueHolderMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZMQAttentionValueHolderMessage)
}

void ZMQAttentionValueHolderMessage::SharedCtor() {
  _cached_size_ = 0;
  sti_ = 0;
  lti_ = 0;
  vlti_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZMQAttentionValueHolderMessage::~ZMQAttentionValueHolderMessage() {
  // @@protoc_insertion_point(destructor:ZMQAttentionValueHolderMessage)
  SharedDtor();
}

void ZMQAttentionValueHolderMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZMQAttentionValueHolderMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZMQAttentionValueHolderMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQAttentionValueHolderMessage_descriptor_;
}

const ZMQAttentionValueHolderMessage& ZMQAttentionValueHolderMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZMQMessages_2eproto();
  return *default_instance_;
}

ZMQAttentionValueHolderMessage* ZMQAttentionValueHolderMessage::default_instance_ = NULL;

ZMQAttentionValueHolderMessage* ZMQAttentionValueHolderMessage::New() const {
  return new ZMQAttentionValueHolderMessage;
}

void ZMQAttentionValueHolderMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZMQAttentionValueHolderMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sti_, vlti_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZMQAttentionValueHolderMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZMQAttentionValueHolderMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double STI = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sti_)));
          set_has_sti();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_LTI;
        break;
      }

      // required double LTI = 2;
      case 2: {
        if (tag == 17) {
         parse_LTI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lti_)));
          set_has_lti();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_VLTI;
        break;
      }

      // required double VLTI = 3;
      case 3: {
        if (tag == 25) {
         parse_VLTI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vlti_)));
          set_has_vlti();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZMQAttentionValueHolderMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZMQAttentionValueHolderMessage)
  return false;
#undef DO_
}

void ZMQAttentionValueHolderMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZMQAttentionValueHolderMessage)
  // required double STI = 1;
  if (has_sti()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sti(), output);
  }

  // required double LTI = 2;
  if (has_lti()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lti(), output);
  }

  // required double VLTI = 3;
  if (has_vlti()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vlti(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZMQAttentionValueHolderMessage)
}

::google::protobuf::uint8* ZMQAttentionValueHolderMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZMQAttentionValueHolderMessage)
  // required double STI = 1;
  if (has_sti()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sti(), target);
  }

  // required double LTI = 2;
  if (has_lti()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lti(), target);
  }

  // required double VLTI = 3;
  if (has_vlti()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vlti(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZMQAttentionValueHolderMessage)
  return target;
}

int ZMQAttentionValueHolderMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double STI = 1;
    if (has_sti()) {
      total_size += 1 + 8;
    }

    // required double LTI = 2;
    if (has_lti()) {
      total_size += 1 + 8;
    }

    // required double VLTI = 3;
    if (has_vlti()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZMQAttentionValueHolderMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZMQAttentionValueHolderMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZMQAttentionValueHolderMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZMQAttentionValueHolderMessage::MergeFrom(const ZMQAttentionValueHolderMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sti()) {
      set_sti(from.sti());
    }
    if (from.has_lti()) {
      set_lti(from.lti());
    }
    if (from.has_vlti()) {
      set_vlti(from.vlti());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZMQAttentionValueHolderMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZMQAttentionValueHolderMessage::CopyFrom(const ZMQAttentionValueHolderMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZMQAttentionValueHolderMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ZMQAttentionValueHolderMessage::Swap(ZMQAttentionValueHolderMessage* other) {
  if (other != this) {
    std::swap(sti_, other->sti_);
    std::swap(lti_, other->lti_);
    std::swap(vlti_, other->vlti_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZMQAttentionValueHolderMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZMQAttentionValueHolderMessage_descriptor_;
  metadata.reflection = ZMQAttentionValueHolderMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZMQSingleTruthValueMessage::kTruthvaluetypeFieldNumber;
const int ZMQSingleTruthValueMessage::kMeanFieldNumber;
const int ZMQSingleTruthValueMessage::kConfidenceFieldNumber;
const int ZMQSingleTruthValueMessage::kCountFieldNumber;
const int ZMQSingleTruthValueMessage::kUFieldNumber;
const int ZMQSingleTruthValueMessage::kLFieldNumber;
const int ZMQSingleTruthValueMessage::kConfidenceLevelFieldNumber;
const int ZMQSingleTruthValueMessage::kSymmetricFieldNumber;
const int ZMQSingleTruthValueMessage::kDiffFieldNumber;
const int ZMQSingleTruthValueMessage::kFirstOrderDistributionFieldNumber;
#endif  // !_MSC_VER

ZMQSingleTruthValueMessage::ZMQSingleTruthValueMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZMQSingleTruthValueMessage)
}

void ZMQSingleTruthValueMessage::InitAsDefaultInstance() {
}

ZMQSingleTruthValueMessage::ZMQSingleTruthValueMessage(const ZMQSingleTruthValueMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZMQSingleTruthValueMessage)
}

void ZMQSingleTruthValueMessage::SharedCtor() {
  _cached_size_ = 0;
  truthvaluetype_ = 0;
  mean_ = 0;
  confidence_ = 0;
  count_ = 0;
  u_ = 0;
  l_ = 0;
  confidencelevel_ = 0;
  symmetric_ = 0;
  diff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZMQSingleTruthValueMessage::~ZMQSingleTruthValueMessage() {
  // @@protoc_insertion_point(destructor:ZMQSingleTruthValueMessage)
  SharedDtor();
}

void ZMQSingleTruthValueMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZMQSingleTruthValueMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZMQSingleTruthValueMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQSingleTruthValueMessage_descriptor_;
}

const ZMQSingleTruthValueMessage& ZMQSingleTruthValueMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZMQMessages_2eproto();
  return *default_instance_;
}

ZMQSingleTruthValueMessage* ZMQSingleTruthValueMessage::default_instance_ = NULL;

ZMQSingleTruthValueMessage* ZMQSingleTruthValueMessage::New() const {
  return new ZMQSingleTruthValueMessage;
}

void ZMQSingleTruthValueMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZMQSingleTruthValueMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(truthvaluetype_, symmetric_);
  }
  diff_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  firstorderdistribution_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZMQSingleTruthValueMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZMQSingleTruthValueMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZMQTruthValueType truthvaluetype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ZMQTruthValueType_IsValid(value)) {
            set_truthvaluetype(static_cast< ::ZMQTruthValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_mean;
        break;
      }

      // optional float mean = 2;
      case 2: {
        if (tag == 21) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_confidence;
        break;
      }

      // optional float confidence = 3;
      case 3: {
        if (tag == 29) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_count;
        break;
      }

      // optional float count = 4;
      case 4: {
        if (tag == 37) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_U;
        break;
      }

      // optional float U = 6;
      case 6: {
        if (tag == 53) {
         parse_U:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &u_)));
          set_has_u();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_L;
        break;
      }

      // optional float L = 7;
      case 7: {
        if (tag == 61) {
         parse_L:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l_)));
          set_has_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_confidenceLevel;
        break;
      }

      // optional float confidenceLevel = 8;
      case 8: {
        if (tag == 69) {
         parse_confidenceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidencelevel_)));
          set_has_confidencelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_symmetric;
        break;
      }

      // optional int32 symmetric = 9;
      case 9: {
        if (tag == 72) {
         parse_symmetric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symmetric_)));
          set_has_symmetric();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_diff;
        break;
      }

      // optional float diff = 10;
      case 10: {
        if (tag == 85) {
         parse_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diff_)));
          set_has_diff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_firstOrderDistribution;
        break;
      }

      // repeated float firstOrderDistribution = 11;
      case 11: {
        if (tag == 93) {
         parse_firstOrderDistribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 93, input, this->mutable_firstorderdistribution())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_firstorderdistribution())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_firstOrderDistribution;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZMQSingleTruthValueMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZMQSingleTruthValueMessage)
  return false;
#undef DO_
}

void ZMQSingleTruthValueMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZMQSingleTruthValueMessage)
  // required .ZMQTruthValueType truthvaluetype = 1;
  if (has_truthvaluetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->truthvaluetype(), output);
  }

  // optional float mean = 2;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean(), output);
  }

  // optional float confidence = 3;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // optional float count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->count(), output);
  }

  // optional float U = 6;
  if (has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->u(), output);
  }

  // optional float L = 7;
  if (has_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->l(), output);
  }

  // optional float confidenceLevel = 8;
  if (has_confidencelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->confidencelevel(), output);
  }

  // optional int32 symmetric = 9;
  if (has_symmetric()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->symmetric(), output);
  }

  // optional float diff = 10;
  if (has_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->diff(), output);
  }

  // repeated float firstOrderDistribution = 11;
  for (int i = 0; i < this->firstorderdistribution_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      11, this->firstorderdistribution(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZMQSingleTruthValueMessage)
}

::google::protobuf::uint8* ZMQSingleTruthValueMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZMQSingleTruthValueMessage)
  // required .ZMQTruthValueType truthvaluetype = 1;
  if (has_truthvaluetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->truthvaluetype(), target);
  }

  // optional float mean = 2;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean(), target);
  }

  // optional float confidence = 3;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // optional float count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->count(), target);
  }

  // optional float U = 6;
  if (has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->u(), target);
  }

  // optional float L = 7;
  if (has_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->l(), target);
  }

  // optional float confidenceLevel = 8;
  if (has_confidencelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->confidencelevel(), target);
  }

  // optional int32 symmetric = 9;
  if (has_symmetric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->symmetric(), target);
  }

  // optional float diff = 10;
  if (has_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->diff(), target);
  }

  // repeated float firstOrderDistribution = 11;
  for (int i = 0; i < this->firstorderdistribution_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(11, this->firstorderdistribution(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZMQSingleTruthValueMessage)
  return target;
}

int ZMQSingleTruthValueMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZMQTruthValueType truthvaluetype = 1;
    if (has_truthvaluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->truthvaluetype());
    }

    // optional float mean = 2;
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float confidence = 3;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

    // optional float count = 4;
    if (has_count()) {
      total_size += 1 + 4;
    }

    // optional float U = 6;
    if (has_u()) {
      total_size += 1 + 4;
    }

    // optional float L = 7;
    if (has_l()) {
      total_size += 1 + 4;
    }

    // optional float confidenceLevel = 8;
    if (has_confidencelevel()) {
      total_size += 1 + 4;
    }

    // optional int32 symmetric = 9;
    if (has_symmetric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->symmetric());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float diff = 10;
    if (has_diff()) {
      total_size += 1 + 4;
    }

  }
  // repeated float firstOrderDistribution = 11;
  {
    int data_size = 0;
    data_size = 4 * this->firstorderdistribution_size();
    total_size += 1 * this->firstorderdistribution_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZMQSingleTruthValueMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZMQSingleTruthValueMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZMQSingleTruthValueMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZMQSingleTruthValueMessage::MergeFrom(const ZMQSingleTruthValueMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  firstorderdistribution_.MergeFrom(from.firstorderdistribution_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_truthvaluetype()) {
      set_truthvaluetype(from.truthvaluetype());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_u()) {
      set_u(from.u());
    }
    if (from.has_l()) {
      set_l(from.l());
    }
    if (from.has_confidencelevel()) {
      set_confidencelevel(from.confidencelevel());
    }
    if (from.has_symmetric()) {
      set_symmetric(from.symmetric());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_diff()) {
      set_diff(from.diff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZMQSingleTruthValueMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZMQSingleTruthValueMessage::CopyFrom(const ZMQSingleTruthValueMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZMQSingleTruthValueMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZMQSingleTruthValueMessage::Swap(ZMQSingleTruthValueMessage* other) {
  if (other != this) {
    std::swap(truthvaluetype_, other->truthvaluetype_);
    std::swap(mean_, other->mean_);
    std::swap(confidence_, other->confidence_);
    std::swap(count_, other->count_);
    std::swap(u_, other->u_);
    std::swap(l_, other->l_);
    std::swap(confidencelevel_, other->confidencelevel_);
    std::swap(symmetric_, other->symmetric_);
    std::swap(diff_, other->diff_);
    firstorderdistribution_.Swap(&other->firstorderdistribution_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZMQSingleTruthValueMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZMQSingleTruthValueMessage_descriptor_;
  metadata.reflection = ZMQSingleTruthValueMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZMQTruthValueMessage::kSingleTruthValueFieldNumber;
#endif  // !_MSC_VER

ZMQTruthValueMessage::ZMQTruthValueMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZMQTruthValueMessage)
}

void ZMQTruthValueMessage::InitAsDefaultInstance() {
}

ZMQTruthValueMessage::ZMQTruthValueMessage(const ZMQTruthValueMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZMQTruthValueMessage)
}

void ZMQTruthValueMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZMQTruthValueMessage::~ZMQTruthValueMessage() {
  // @@protoc_insertion_point(destructor:ZMQTruthValueMessage)
  SharedDtor();
}

void ZMQTruthValueMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZMQTruthValueMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZMQTruthValueMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQTruthValueMessage_descriptor_;
}

const ZMQTruthValueMessage& ZMQTruthValueMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZMQMessages_2eproto();
  return *default_instance_;
}

ZMQTruthValueMessage* ZMQTruthValueMessage::default_instance_ = NULL;

ZMQTruthValueMessage* ZMQTruthValueMessage::New() const {
  return new ZMQTruthValueMessage;
}

void ZMQTruthValueMessage::Clear() {
  singletruthvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZMQTruthValueMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZMQTruthValueMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZMQSingleTruthValueMessage singleTruthValue = 1;
      case 1: {
        if (tag == 10) {
         parse_singleTruthValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singletruthvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_singleTruthValue;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZMQTruthValueMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZMQTruthValueMessage)
  return false;
#undef DO_
}

void ZMQTruthValueMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZMQTruthValueMessage)
  // repeated .ZMQSingleTruthValueMessage singleTruthValue = 1;
  for (int i = 0; i < this->singletruthvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->singletruthvalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZMQTruthValueMessage)
}

::google::protobuf::uint8* ZMQTruthValueMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZMQTruthValueMessage)
  // repeated .ZMQSingleTruthValueMessage singleTruthValue = 1;
  for (int i = 0; i < this->singletruthvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->singletruthvalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZMQTruthValueMessage)
  return target;
}

int ZMQTruthValueMessage::ByteSize() const {
  int total_size = 0;

  // repeated .ZMQSingleTruthValueMessage singleTruthValue = 1;
  total_size += 1 * this->singletruthvalue_size();
  for (int i = 0; i < this->singletruthvalue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->singletruthvalue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZMQTruthValueMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZMQTruthValueMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZMQTruthValueMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZMQTruthValueMessage::MergeFrom(const ZMQTruthValueMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  singletruthvalue_.MergeFrom(from.singletruthvalue_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZMQTruthValueMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZMQTruthValueMessage::CopyFrom(const ZMQTruthValueMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZMQTruthValueMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->singletruthvalue())) return false;
  return true;
}

void ZMQTruthValueMessage::Swap(ZMQTruthValueMessage* other) {
  if (other != this) {
    singletruthvalue_.Swap(&other->singletruthvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZMQTruthValueMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZMQTruthValueMessage_descriptor_;
  metadata.reflection = ZMQTruthValueMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZMQAtomMessage::kAtomtypeFieldNumber;
const int ZMQAtomMessage::kAttentionvalueholderFieldNumber;
const int ZMQAtomMessage::kHandleFieldNumber;
const int ZMQAtomMessage::kIncomingFieldNumber;
const int ZMQAtomMessage::kTypeFieldNumber;
const int ZMQAtomMessage::kFlagsFieldNumber;
const int ZMQAtomMessage::kTruthValueFieldNumber;
const int ZMQAtomMessage::kNameFieldNumber;
const int ZMQAtomMessage::kOutgoingFieldNumber;
#endif  // !_MSC_VER

ZMQAtomMessage::ZMQAtomMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZMQAtomMessage)
}

void ZMQAtomMessage::InitAsDefaultInstance() {
  attentionvalueholder_ = const_cast< ::ZMQAttentionValueHolderMessage*>(&::ZMQAttentionValueHolderMessage::default_instance());
  truthvalue_ = const_cast< ::ZMQTruthValueMessage*>(&::ZMQTruthValueMessage::default_instance());
}

ZMQAtomMessage::ZMQAtomMessage(const ZMQAtomMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZMQAtomMessage)
}

void ZMQAtomMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  atomtype_ = 0;
  attentionvalueholder_ = NULL;
  handle_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  flags_ = 0;
  truthvalue_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZMQAtomMessage::~ZMQAtomMessage() {
  // @@protoc_insertion_point(destructor:ZMQAtomMessage)
  SharedDtor();
}

void ZMQAtomMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete attentionvalueholder_;
    delete truthvalue_;
  }
}

void ZMQAtomMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZMQAtomMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQAtomMessage_descriptor_;
}

const ZMQAtomMessage& ZMQAtomMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZMQMessages_2eproto();
  return *default_instance_;
}

ZMQAtomMessage* ZMQAtomMessage::default_instance_ = NULL;

ZMQAtomMessage* ZMQAtomMessage::New() const {
  return new ZMQAtomMessage;
}

void ZMQAtomMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZMQAtomMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(handle_, type_);
    if (has_attentionvalueholder()) {
      if (attentionvalueholder_ != NULL) attentionvalueholder_->::ZMQAttentionValueHolderMessage::Clear();
    }
    flags_ = 0;
    if (has_truthvalue()) {
      if (truthvalue_ != NULL) truthvalue_->::ZMQTruthValueMessage::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  incoming_.Clear();
  outgoing_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZMQAtomMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZMQAtomMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZMQAtomType atomtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ZMQAtomType_IsValid(value)) {
            set_atomtype(static_cast< ::ZMQAtomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attentionvalueholder;
        break;
      }

      // optional .ZMQAttentionValueHolderMessage attentionvalueholder = 2;
      case 2: {
        if (tag == 18) {
         parse_attentionvalueholder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attentionvalueholder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_handle;
        break;
      }

      // optional uint64 handle = 3;
      case 3: {
        if (tag == 24) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_incoming;
        break;
      }

      // repeated uint64 incoming = 4;
      case 4: {
        if (tag == 32) {
         parse_incoming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_incoming())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_incoming())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_incoming;
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_flags;
        break;
      }

      // optional int32 flags = 6;
      case 6: {
        if (tag == 48) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_truthValue;
        break;
      }

      // optional .ZMQTruthValueMessage truthValue = 7;
      case 7: {
        if (tag == 58) {
         parse_truthValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truthvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // optional string name = 8;
      case 8: {
        if (tag == 66) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_outgoing;
        break;
      }

      // repeated uint64 outgoing = 9;
      case 9: {
        if (tag == 72) {
         parse_outgoing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 72, input, this->mutable_outgoing())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_outgoing())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_outgoing;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZMQAtomMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZMQAtomMessage)
  return false;
#undef DO_
}

void ZMQAtomMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZMQAtomMessage)
  // required .ZMQAtomType atomtype = 1;
  if (has_atomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->atomtype(), output);
  }

  // optional .ZMQAttentionValueHolderMessage attentionvalueholder = 2;
  if (has_attentionvalueholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attentionvalueholder(), output);
  }

  // optional uint64 handle = 3;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->handle(), output);
  }

  // repeated uint64 incoming = 4;
  for (int i = 0; i < this->incoming_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->incoming(i), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional int32 flags = 6;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->flags(), output);
  }

  // optional .ZMQTruthValueMessage truthValue = 7;
  if (has_truthvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->truthvalue(), output);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // repeated uint64 outgoing = 9;
  for (int i = 0; i < this->outgoing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      9, this->outgoing(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZMQAtomMessage)
}

::google::protobuf::uint8* ZMQAtomMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZMQAtomMessage)
  // required .ZMQAtomType atomtype = 1;
  if (has_atomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->atomtype(), target);
  }

  // optional .ZMQAttentionValueHolderMessage attentionvalueholder = 2;
  if (has_attentionvalueholder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attentionvalueholder(), target);
  }

  // optional uint64 handle = 3;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->handle(), target);
  }

  // repeated uint64 incoming = 4;
  for (int i = 0; i < this->incoming_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->incoming(i), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional int32 flags = 6;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->flags(), target);
  }

  // optional .ZMQTruthValueMessage truthValue = 7;
  if (has_truthvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->truthvalue(), target);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  // repeated uint64 outgoing = 9;
  for (int i = 0; i < this->outgoing_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(9, this->outgoing(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZMQAtomMessage)
  return target;
}

int ZMQAtomMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZMQAtomType atomtype = 1;
    if (has_atomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atomtype());
    }

    // optional .ZMQAttentionValueHolderMessage attentionvalueholder = 2;
    if (has_attentionvalueholder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attentionvalueholder());
    }

    // optional uint64 handle = 3;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handle());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 flags = 6;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional .ZMQTruthValueMessage truthValue = 7;
    if (has_truthvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->truthvalue());
    }

    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated uint64 incoming = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->incoming_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->incoming(i));
    }
    total_size += 1 * this->incoming_size() + data_size;
  }

  // repeated uint64 outgoing = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->outgoing_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->outgoing(i));
    }
    total_size += 1 * this->outgoing_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZMQAtomMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZMQAtomMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZMQAtomMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZMQAtomMessage::MergeFrom(const ZMQAtomMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  incoming_.MergeFrom(from.incoming_);
  outgoing_.MergeFrom(from.outgoing_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atomtype()) {
      set_atomtype(from.atomtype());
    }
    if (from.has_attentionvalueholder()) {
      mutable_attentionvalueholder()->::ZMQAttentionValueHolderMessage::MergeFrom(from.attentionvalueholder());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_truthvalue()) {
      mutable_truthvalue()->::ZMQTruthValueMessage::MergeFrom(from.truthvalue());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZMQAtomMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZMQAtomMessage::CopyFrom(const ZMQAtomMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZMQAtomMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_attentionvalueholder()) {
    if (!this->attentionvalueholder().IsInitialized()) return false;
  }
  if (has_truthvalue()) {
    if (!this->truthvalue().IsInitialized()) return false;
  }
  return true;
}

void ZMQAtomMessage::Swap(ZMQAtomMessage* other) {
  if (other != this) {
    std::swap(atomtype_, other->atomtype_);
    std::swap(attentionvalueholder_, other->attentionvalueholder_);
    std::swap(handle_, other->handle_);
    incoming_.Swap(&other->incoming_);
    std::swap(type_, other->type_);
    std::swap(flags_, other->flags_);
    std::swap(truthvalue_, other->truthvalue_);
    std::swap(name_, other->name_);
    outgoing_.Swap(&other->outgoing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZMQAtomMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZMQAtomMessage_descriptor_;
  metadata.reflection = ZMQAtomMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZMQAtomFetch::kKindFieldNumber;
const int ZMQAtomFetch::kHandleFieldNumber;
const int ZMQAtomFetch::kTypeFieldNumber;
const int ZMQAtomFetch::kNameFieldNumber;
const int ZMQAtomFetch::kOutgoingFieldNumber;
#endif  // !_MSC_VER

ZMQAtomFetch::ZMQAtomFetch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZMQAtomFetch)
}

void ZMQAtomFetch::InitAsDefaultInstance() {
}

ZMQAtomFetch::ZMQAtomFetch(const ZMQAtomFetch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZMQAtomFetch)
}

void ZMQAtomFetch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kind_ = 0;
  handle_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZMQAtomFetch::~ZMQAtomFetch() {
  // @@protoc_insertion_point(destructor:ZMQAtomFetch)
  SharedDtor();
}

void ZMQAtomFetch::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ZMQAtomFetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZMQAtomFetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQAtomFetch_descriptor_;
}

const ZMQAtomFetch& ZMQAtomFetch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZMQMessages_2eproto();
  return *default_instance_;
}

ZMQAtomFetch* ZMQAtomFetch::default_instance_ = NULL;

ZMQAtomFetch* ZMQAtomFetch::New() const {
  return new ZMQAtomFetch;
}

void ZMQAtomFetch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZMQAtomFetch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(handle_, type_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  outgoing_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZMQAtomFetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZMQAtomFetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZMQAtomFetchKind kind = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ZMQAtomFetchKind_IsValid(value)) {
            set_kind(static_cast< ::ZMQAtomFetchKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_handle;
        break;
      }

      // optional uint64 handle = 2;
      case 2: {
        if (tag == 16) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_outgoing;
        break;
      }

      // repeated uint64 outgoing = 5;
      case 5: {
        if (tag == 40) {
         parse_outgoing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_outgoing())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_outgoing())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_outgoing;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZMQAtomFetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZMQAtomFetch)
  return false;
#undef DO_
}

void ZMQAtomFetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZMQAtomFetch)
  // required .ZMQAtomFetchKind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // optional uint64 handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->handle(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // repeated uint64 outgoing = 5;
  for (int i = 0; i < this->outgoing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->outgoing(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZMQAtomFetch)
}

::google::protobuf::uint8* ZMQAtomFetch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZMQAtomFetch)
  // required .ZMQAtomFetchKind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // optional uint64 handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->handle(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // repeated uint64 outgoing = 5;
  for (int i = 0; i < this->outgoing_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->outgoing(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZMQAtomFetch)
  return target;
}

int ZMQAtomFetch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZMQAtomFetchKind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional uint64 handle = 2;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handle());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated uint64 outgoing = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->outgoing_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->outgoing(i));
    }
    total_size += 1 * this->outgoing_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZMQAtomFetch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZMQAtomFetch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZMQAtomFetch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZMQAtomFetch::MergeFrom(const ZMQAtomFetch& from) {
  GOOGLE_CHECK_NE(&from, this);
  outgoing_.MergeFrom(from.outgoing_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZMQAtomFetch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZMQAtomFetch::CopyFrom(const ZMQAtomFetch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZMQAtomFetch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZMQAtomFetch::Swap(ZMQAtomFetch* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(handle_, other->handle_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    outgoing_.Swap(&other->outgoing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZMQAtomFetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZMQAtomFetch_descriptor_;
  metadata.reflection = ZMQAtomFetch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZMQAtomTypeInfo::kIdFieldNumber;
const int ZMQAtomTypeInfo::kNameFieldNumber;
#endif  // !_MSC_VER

ZMQAtomTypeInfo::ZMQAtomTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZMQAtomTypeInfo)
}

void ZMQAtomTypeInfo::InitAsDefaultInstance() {
}

ZMQAtomTypeInfo::ZMQAtomTypeInfo(const ZMQAtomTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZMQAtomTypeInfo)
}

void ZMQAtomTypeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZMQAtomTypeInfo::~ZMQAtomTypeInfo() {
  // @@protoc_insertion_point(destructor:ZMQAtomTypeInfo)
  SharedDtor();
}

void ZMQAtomTypeInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ZMQAtomTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZMQAtomTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQAtomTypeInfo_descriptor_;
}

const ZMQAtomTypeInfo& ZMQAtomTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZMQMessages_2eproto();
  return *default_instance_;
}

ZMQAtomTypeInfo* ZMQAtomTypeInfo::default_instance_ = NULL;

ZMQAtomTypeInfo* ZMQAtomTypeInfo::New() const {
  return new ZMQAtomTypeInfo;
}

void ZMQAtomTypeInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZMQAtomTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZMQAtomTypeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZMQAtomTypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZMQAtomTypeInfo)
  return false;
#undef DO_
}

void ZMQAtomTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZMQAtomTypeInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZMQAtomTypeInfo)
}

::google::protobuf::uint8* ZMQAtomTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZMQAtomTypeInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZMQAtomTypeInfo)
  return target;
}

int ZMQAtomTypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZMQAtomTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZMQAtomTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZMQAtomTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZMQAtomTypeInfo::MergeFrom(const ZMQAtomTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZMQAtomTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZMQAtomTypeInfo::CopyFrom(const ZMQAtomTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZMQAtomTypeInfo::IsInitialized() const {

  return true;
}

void ZMQAtomTypeInfo::Swap(ZMQAtomTypeInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZMQAtomTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZMQAtomTypeInfo_descriptor_;
  metadata.reflection = ZMQAtomTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZMQRequestMessage::kFunctionFieldNumber;
const int ZMQRequestMessage::kHandleFieldNumber;
const int ZMQRequestMessage::kFetchFieldNumber;
const int ZMQRequestMessage::kAtomFieldNumber;
const int ZMQRequestMessage::kAtomTypeFieldNumber;
#endif  // !_MSC_VER

ZMQRequestMessage::ZMQRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZMQRequestMessage)
}

void ZMQRequestMessage::InitAsDefaultInstance() {
}

ZMQRequestMessage::ZMQRequestMessage(const ZMQRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZMQRequestMessage)
}

void ZMQRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  function_ = 0;
  handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZMQRequestMessage::~ZMQRequestMessage() {
  // @@protoc_insertion_point(destructor:ZMQRequestMessage)
  SharedDtor();
}

void ZMQRequestMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZMQRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZMQRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQRequestMessage_descriptor_;
}

const ZMQRequestMessage& ZMQRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZMQMessages_2eproto();
  return *default_instance_;
}

ZMQRequestMessage* ZMQRequestMessage::default_instance_ = NULL;

ZMQRequestMessage* ZMQRequestMessage::New() const {
  return new ZMQRequestMessage;
}

void ZMQRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    function_ = 0;
    handle_ = GOOGLE_ULONGLONG(0);
  }
  fetch_.Clear();
  atom_.Clear();
  atom_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZMQRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZMQRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZMQFunctionType function = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ZMQFunctionType_IsValid(value)) {
            set_function(static_cast< ::ZMQFunctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_handle;
        break;
      }

      // optional uint64 handle = 2;
      case 2: {
        if (tag == 16) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fetch;
        break;
      }

      // repeated .ZMQAtomFetch fetch = 3;
      case 3: {
        if (tag == 26) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fetch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fetch;
        if (input->ExpectTag(34)) goto parse_atom;
        break;
      }

      // repeated .ZMQAtomMessage atom = 4;
      case 4: {
        if (tag == 34) {
         parse_atom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_atom;
        if (input->ExpectTag(42)) goto parse_atom_type;
        break;
      }

      // repeated .ZMQAtomTypeInfo atom_type = 5;
      case 5: {
        if (tag == 42) {
         parse_atom_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atom_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_atom_type;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZMQRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZMQRequestMessage)
  return false;
#undef DO_
}

void ZMQRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZMQRequestMessage)
  // required .ZMQFunctionType function = 1;
  if (has_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->function(), output);
  }

  // optional uint64 handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->handle(), output);
  }

  // repeated .ZMQAtomFetch fetch = 3;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fetch(i), output);
  }

  // repeated .ZMQAtomMessage atom = 4;
  for (int i = 0; i < this->atom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->atom(i), output);
  }

  // repeated .ZMQAtomTypeInfo atom_type = 5;
  for (int i = 0; i < this->atom_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->atom_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZMQRequestMessage)
}

::google::protobuf::uint8* ZMQRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZMQRequestMessage)
  // required .ZMQFunctionType function = 1;
  if (has_function()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->function(), target);
  }

  // optional uint64 handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->handle(), target);
  }

  // repeated .ZMQAtomFetch fetch = 3;
  for (int i = 0; i < this->fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fetch(i), target);
  }

  // repeated .ZMQAtomMessage atom = 4;
  for (int i = 0; i < this->atom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->atom(i), target);
  }

  // repeated .ZMQAtomTypeInfo atom_type = 5;
  for (int i = 0; i < this->atom_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->atom_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZMQRequestMessage)
  return target;
}

int ZMQRequestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZMQFunctionType function = 1;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->function());
    }

    // optional uint64 handle = 2;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handle());
    }

  }
  // repeated .ZMQAtomFetch fetch = 3;
  total_size += 1 * this->fetch_size();
  for (int i = 0; i < this->fetch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fetch(i));
  }

  // repeated .ZMQAtomMessage atom = 4;
  total_size += 1 * this->atom_size();
  for (int i = 0; i < this->atom_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atom(i));
  }

  // repeated .ZMQAtomTypeInfo atom_type = 5;
  total_size += 1 * this->atom_type_size();
  for (int i = 0; i < this->atom_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atom_type(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZMQRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZMQRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZMQRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZMQRequestMessage::MergeFrom(const ZMQRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetch_.MergeFrom(from.fetch_);
  atom_.MergeFrom(from.atom_);
  atom_type_.MergeFrom(from.atom_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZMQRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZMQRequestMessage::CopyFrom(const ZMQRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZMQRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fetch())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->atom())) return false;
  return true;
}

void ZMQRequestMessage::Swap(ZMQRequestMessage* other) {
  if (other != this) {
    std::swap(function_, other->function_);
    std::swap(handle_, other->handle_);
    fetch_.Swap(&other->fetch_);
    atom_.Swap(&other->atom_);
    atom_type_.Swap(&other->atom_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZMQRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZMQRequestMessage_descriptor_;
  metadata.reflection = ZMQRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZMQReplyMessage::kAtomFieldNumber;
const int ZMQReplyMessage::kStrFieldNumber;
const int ZMQReplyMessage::kAtomTypeFieldNumber;
#endif  // !_MSC_VER

ZMQReplyMessage::ZMQReplyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZMQReplyMessage)
}

void ZMQReplyMessage::InitAsDefaultInstance() {
}

ZMQReplyMessage::ZMQReplyMessage(const ZMQReplyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZMQReplyMessage)
}

void ZMQReplyMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZMQReplyMessage::~ZMQReplyMessage() {
  // @@protoc_insertion_point(destructor:ZMQReplyMessage)
  SharedDtor();
}

void ZMQReplyMessage::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void ZMQReplyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZMQReplyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZMQReplyMessage_descriptor_;
}

const ZMQReplyMessage& ZMQReplyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZMQMessages_2eproto();
  return *default_instance_;
}

ZMQReplyMessage* ZMQReplyMessage::default_instance_ = NULL;

ZMQReplyMessage* ZMQReplyMessage::New() const {
  return new ZMQReplyMessage;
}

void ZMQReplyMessage::Clear() {
  if (has_str()) {
    if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      str_->clear();
    }
  }
  atom_.Clear();
  atom_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZMQReplyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZMQReplyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZMQAtomMessage atom = 1;
      case 1: {
        if (tag == 10) {
         parse_atom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_atom;
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // optional string str = 2;
      case 2: {
        if (tag == 18) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_atom_type;
        break;
      }

      // repeated .ZMQAtomTypeInfo atom_type = 3;
      case 3: {
        if (tag == 26) {
         parse_atom_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atom_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_atom_type;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZMQReplyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZMQReplyMessage)
  return false;
#undef DO_
}

void ZMQReplyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZMQReplyMessage)
  // repeated .ZMQAtomMessage atom = 1;
  for (int i = 0; i < this->atom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->atom(i), output);
  }

  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->str(), output);
  }

  // repeated .ZMQAtomTypeInfo atom_type = 3;
  for (int i = 0; i < this->atom_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->atom_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZMQReplyMessage)
}

::google::protobuf::uint8* ZMQReplyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZMQReplyMessage)
  // repeated .ZMQAtomMessage atom = 1;
  for (int i = 0; i < this->atom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->atom(i), target);
  }

  // optional string str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  // repeated .ZMQAtomTypeInfo atom_type = 3;
  for (int i = 0; i < this->atom_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->atom_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZMQReplyMessage)
  return target;
}

int ZMQReplyMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  // repeated .ZMQAtomMessage atom = 1;
  total_size += 1 * this->atom_size();
  for (int i = 0; i < this->atom_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atom(i));
  }

  // repeated .ZMQAtomTypeInfo atom_type = 3;
  total_size += 1 * this->atom_type_size();
  for (int i = 0; i < this->atom_type_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atom_type(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZMQReplyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZMQReplyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZMQReplyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZMQReplyMessage::MergeFrom(const ZMQReplyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  atom_.MergeFrom(from.atom_);
  atom_type_.MergeFrom(from.atom_type_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZMQReplyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZMQReplyMessage::CopyFrom(const ZMQReplyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZMQReplyMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->atom())) return false;
  return true;
}

void ZMQReplyMessage::Swap(ZMQReplyMessage* other) {
  if (other != this) {
    atom_.Swap(&other->atom_);
    std::swap(str_, other->str_);
    atom_type_.Swap(&other->atom_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZMQReplyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZMQReplyMessage_descriptor_;
  metadata.reflection = ZMQReplyMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
