// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZMQMessages.proto

#ifndef PROTOBUF_ZMQMessages_2eproto__INCLUDED
#define PROTOBUF_ZMQMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ZMQMessages_2eproto();
void protobuf_AssignDesc_ZMQMessages_2eproto();
void protobuf_ShutdownFile_ZMQMessages_2eproto();

class ZMQAttentionValueHolderMessage;
class ZMQSingleTruthValueMessage;
class ZMQTruthValueMessage;
class ZMQAtomMessage;
class ZMQAtomFetch;
class ZMQAtomTypeInfo;
class ZMQRequestMessage;
class ZMQReplyMessage;

enum ZMQTruthValueType {
  ZMQTruthValueTypeSimple = 0,
  ZMQTruthValueTypeCount = 1,
  ZMQTruthValueTypeNull = 2,
  ZMQTruthValueTypeIndefinite = 3
};
bool ZMQTruthValueType_IsValid(int value);
const ZMQTruthValueType ZMQTruthValueType_MIN = ZMQTruthValueTypeSimple;
const ZMQTruthValueType ZMQTruthValueType_MAX = ZMQTruthValueTypeIndefinite;
const int ZMQTruthValueType_ARRAYSIZE = ZMQTruthValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ZMQTruthValueType_descriptor();
inline const ::std::string& ZMQTruthValueType_Name(ZMQTruthValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ZMQTruthValueType_descriptor(), value);
}
inline bool ZMQTruthValueType_Parse(
    const ::std::string& name, ZMQTruthValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ZMQTruthValueType>(
    ZMQTruthValueType_descriptor(), name, value);
}
enum ZMQAtomType {
  ZMQAtomTypeNode = 0,
  ZMQAtomTypeLink = 1,
  ZMQAtomTypeNotFound = 2
};
bool ZMQAtomType_IsValid(int value);
const ZMQAtomType ZMQAtomType_MIN = ZMQAtomTypeNode;
const ZMQAtomType ZMQAtomType_MAX = ZMQAtomTypeNotFound;
const int ZMQAtomType_ARRAYSIZE = ZMQAtomType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ZMQAtomType_descriptor();
inline const ::std::string& ZMQAtomType_Name(ZMQAtomType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ZMQAtomType_descriptor(), value);
}
inline bool ZMQAtomType_Parse(
    const ::std::string& name, ZMQAtomType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ZMQAtomType>(
    ZMQAtomType_descriptor(), name, value);
}
enum ZMQAtomFetchKind {
  UUID = 0,
  NODE = 1,
  LINK = 2
};
bool ZMQAtomFetchKind_IsValid(int value);
const ZMQAtomFetchKind ZMQAtomFetchKind_MIN = UUID;
const ZMQAtomFetchKind ZMQAtomFetchKind_MAX = LINK;
const int ZMQAtomFetchKind_ARRAYSIZE = ZMQAtomFetchKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* ZMQAtomFetchKind_descriptor();
inline const ::std::string& ZMQAtomFetchKind_Name(ZMQAtomFetchKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    ZMQAtomFetchKind_descriptor(), value);
}
inline bool ZMQAtomFetchKind_Parse(
    const ::std::string& name, ZMQAtomFetchKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ZMQAtomFetchKind>(
    ZMQAtomFetchKind_descriptor(), name, value);
}
enum ZMQFunctionType {
  ZMQgetAtom = 0,
  ZMQgetName = 1,
  ZMQgetAtoms = 2,
  ZMQstoreAtoms = 3
};
bool ZMQFunctionType_IsValid(int value);
const ZMQFunctionType ZMQFunctionType_MIN = ZMQgetAtom;
const ZMQFunctionType ZMQFunctionType_MAX = ZMQstoreAtoms;
const int ZMQFunctionType_ARRAYSIZE = ZMQFunctionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ZMQFunctionType_descriptor();
inline const ::std::string& ZMQFunctionType_Name(ZMQFunctionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ZMQFunctionType_descriptor(), value);
}
inline bool ZMQFunctionType_Parse(
    const ::std::string& name, ZMQFunctionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ZMQFunctionType>(
    ZMQFunctionType_descriptor(), name, value);
}
// ===================================================================

class ZMQAttentionValueHolderMessage : public ::google::protobuf::Message {
 public:
  ZMQAttentionValueHolderMessage();
  virtual ~ZMQAttentionValueHolderMessage();

  ZMQAttentionValueHolderMessage(const ZMQAttentionValueHolderMessage& from);

  inline ZMQAttentionValueHolderMessage& operator=(const ZMQAttentionValueHolderMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZMQAttentionValueHolderMessage& default_instance();

  void Swap(ZMQAttentionValueHolderMessage* other);

  // implements Message ----------------------------------------------

  ZMQAttentionValueHolderMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZMQAttentionValueHolderMessage& from);
  void MergeFrom(const ZMQAttentionValueHolderMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double STI = 1;
  inline bool has_sti() const;
  inline void clear_sti();
  static const int kSTIFieldNumber = 1;
  inline double sti() const;
  inline void set_sti(double value);

  // required double LTI = 2;
  inline bool has_lti() const;
  inline void clear_lti();
  static const int kLTIFieldNumber = 2;
  inline double lti() const;
  inline void set_lti(double value);

  // required double VLTI = 3;
  inline bool has_vlti() const;
  inline void clear_vlti();
  static const int kVLTIFieldNumber = 3;
  inline double vlti() const;
  inline void set_vlti(double value);

  // @@protoc_insertion_point(class_scope:ZMQAttentionValueHolderMessage)
 private:
  inline void set_has_sti();
  inline void clear_has_sti();
  inline void set_has_lti();
  inline void clear_has_lti();
  inline void set_has_vlti();
  inline void clear_has_vlti();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double sti_;
  double lti_;
  double vlti_;
  friend void  protobuf_AddDesc_ZMQMessages_2eproto();
  friend void protobuf_AssignDesc_ZMQMessages_2eproto();
  friend void protobuf_ShutdownFile_ZMQMessages_2eproto();

  void InitAsDefaultInstance();
  static ZMQAttentionValueHolderMessage* default_instance_;
};
// -------------------------------------------------------------------

class ZMQSingleTruthValueMessage : public ::google::protobuf::Message {
 public:
  ZMQSingleTruthValueMessage();
  virtual ~ZMQSingleTruthValueMessage();

  ZMQSingleTruthValueMessage(const ZMQSingleTruthValueMessage& from);

  inline ZMQSingleTruthValueMessage& operator=(const ZMQSingleTruthValueMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZMQSingleTruthValueMessage& default_instance();

  void Swap(ZMQSingleTruthValueMessage* other);

  // implements Message ----------------------------------------------

  ZMQSingleTruthValueMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZMQSingleTruthValueMessage& from);
  void MergeFrom(const ZMQSingleTruthValueMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZMQTruthValueType truthvaluetype = 1;
  inline bool has_truthvaluetype() const;
  inline void clear_truthvaluetype();
  static const int kTruthvaluetypeFieldNumber = 1;
  inline ::ZMQTruthValueType truthvaluetype() const;
  inline void set_truthvaluetype(::ZMQTruthValueType value);

  // optional float mean = 2;
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 2;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float confidence = 3;
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  inline float confidence() const;
  inline void set_confidence(float value);

  // optional float count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline float count() const;
  inline void set_count(float value);

  // optional float U = 6;
  inline bool has_u() const;
  inline void clear_u();
  static const int kUFieldNumber = 6;
  inline float u() const;
  inline void set_u(float value);

  // optional float L = 7;
  inline bool has_l() const;
  inline void clear_l();
  static const int kLFieldNumber = 7;
  inline float l() const;
  inline void set_l(float value);

  // optional float confidenceLevel = 8;
  inline bool has_confidencelevel() const;
  inline void clear_confidencelevel();
  static const int kConfidenceLevelFieldNumber = 8;
  inline float confidencelevel() const;
  inline void set_confidencelevel(float value);

  // optional int32 symmetric = 9;
  inline bool has_symmetric() const;
  inline void clear_symmetric();
  static const int kSymmetricFieldNumber = 9;
  inline ::google::protobuf::int32 symmetric() const;
  inline void set_symmetric(::google::protobuf::int32 value);

  // optional float diff = 10;
  inline bool has_diff() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 10;
  inline float diff() const;
  inline void set_diff(float value);

  // repeated float firstOrderDistribution = 11;
  inline int firstorderdistribution_size() const;
  inline void clear_firstorderdistribution();
  static const int kFirstOrderDistributionFieldNumber = 11;
  inline float firstorderdistribution(int index) const;
  inline void set_firstorderdistribution(int index, float value);
  inline void add_firstorderdistribution(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      firstorderdistribution() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_firstorderdistribution();

  // @@protoc_insertion_point(class_scope:ZMQSingleTruthValueMessage)
 private:
  inline void set_has_truthvaluetype();
  inline void clear_has_truthvaluetype();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_u();
  inline void clear_has_u();
  inline void set_has_l();
  inline void clear_has_l();
  inline void set_has_confidencelevel();
  inline void clear_has_confidencelevel();
  inline void set_has_symmetric();
  inline void clear_has_symmetric();
  inline void set_has_diff();
  inline void clear_has_diff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int truthvaluetype_;
  float mean_;
  float confidence_;
  float count_;
  float u_;
  float l_;
  float confidencelevel_;
  ::google::protobuf::int32 symmetric_;
  ::google::protobuf::RepeatedField< float > firstorderdistribution_;
  float diff_;
  friend void  protobuf_AddDesc_ZMQMessages_2eproto();
  friend void protobuf_AssignDesc_ZMQMessages_2eproto();
  friend void protobuf_ShutdownFile_ZMQMessages_2eproto();

  void InitAsDefaultInstance();
  static ZMQSingleTruthValueMessage* default_instance_;
};
// -------------------------------------------------------------------

class ZMQTruthValueMessage : public ::google::protobuf::Message {
 public:
  ZMQTruthValueMessage();
  virtual ~ZMQTruthValueMessage();

  ZMQTruthValueMessage(const ZMQTruthValueMessage& from);

  inline ZMQTruthValueMessage& operator=(const ZMQTruthValueMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZMQTruthValueMessage& default_instance();

  void Swap(ZMQTruthValueMessage* other);

  // implements Message ----------------------------------------------

  ZMQTruthValueMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZMQTruthValueMessage& from);
  void MergeFrom(const ZMQTruthValueMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZMQSingleTruthValueMessage singleTruthValue = 1;
  inline int singletruthvalue_size() const;
  inline void clear_singletruthvalue();
  static const int kSingleTruthValueFieldNumber = 1;
  inline const ::ZMQSingleTruthValueMessage& singletruthvalue(int index) const;
  inline ::ZMQSingleTruthValueMessage* mutable_singletruthvalue(int index);
  inline ::ZMQSingleTruthValueMessage* add_singletruthvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::ZMQSingleTruthValueMessage >&
      singletruthvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZMQSingleTruthValueMessage >*
      mutable_singletruthvalue();

  // @@protoc_insertion_point(class_scope:ZMQTruthValueMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ZMQSingleTruthValueMessage > singletruthvalue_;
  friend void  protobuf_AddDesc_ZMQMessages_2eproto();
  friend void protobuf_AssignDesc_ZMQMessages_2eproto();
  friend void protobuf_ShutdownFile_ZMQMessages_2eproto();

  void InitAsDefaultInstance();
  static ZMQTruthValueMessage* default_instance_;
};
// -------------------------------------------------------------------

class ZMQAtomMessage : public ::google::protobuf::Message {
 public:
  ZMQAtomMessage();
  virtual ~ZMQAtomMessage();

  ZMQAtomMessage(const ZMQAtomMessage& from);

  inline ZMQAtomMessage& operator=(const ZMQAtomMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZMQAtomMessage& default_instance();

  void Swap(ZMQAtomMessage* other);

  // implements Message ----------------------------------------------

  ZMQAtomMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZMQAtomMessage& from);
  void MergeFrom(const ZMQAtomMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZMQAtomType atomtype = 1;
  inline bool has_atomtype() const;
  inline void clear_atomtype();
  static const int kAtomtypeFieldNumber = 1;
  inline ::ZMQAtomType atomtype() const;
  inline void set_atomtype(::ZMQAtomType value);

  // optional .ZMQAttentionValueHolderMessage attentionvalueholder = 2;
  inline bool has_attentionvalueholder() const;
  inline void clear_attentionvalueholder();
  static const int kAttentionvalueholderFieldNumber = 2;
  inline const ::ZMQAttentionValueHolderMessage& attentionvalueholder() const;
  inline ::ZMQAttentionValueHolderMessage* mutable_attentionvalueholder();
  inline ::ZMQAttentionValueHolderMessage* release_attentionvalueholder();
  inline void set_allocated_attentionvalueholder(::ZMQAttentionValueHolderMessage* attentionvalueholder);

  // optional uint64 handle = 3;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 3;
  inline ::google::protobuf::uint64 handle() const;
  inline void set_handle(::google::protobuf::uint64 value);

  // repeated uint64 incoming = 4;
  inline int incoming_size() const;
  inline void clear_incoming();
  static const int kIncomingFieldNumber = 4;
  inline ::google::protobuf::uint64 incoming(int index) const;
  inline void set_incoming(int index, ::google::protobuf::uint64 value);
  inline void add_incoming(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      incoming() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_incoming();

  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 flags = 6;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 6;
  inline ::google::protobuf::int32 flags() const;
  inline void set_flags(::google::protobuf::int32 value);

  // optional .ZMQTruthValueMessage truthValue = 7;
  inline bool has_truthvalue() const;
  inline void clear_truthvalue();
  static const int kTruthValueFieldNumber = 7;
  inline const ::ZMQTruthValueMessage& truthvalue() const;
  inline ::ZMQTruthValueMessage* mutable_truthvalue();
  inline ::ZMQTruthValueMessage* release_truthvalue();
  inline void set_allocated_truthvalue(::ZMQTruthValueMessage* truthvalue);

  // optional string name = 8;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 8;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated uint64 outgoing = 9;
  inline int outgoing_size() const;
  inline void clear_outgoing();
  static const int kOutgoingFieldNumber = 9;
  inline ::google::protobuf::uint64 outgoing(int index) const;
  inline void set_outgoing(int index, ::google::protobuf::uint64 value);
  inline void add_outgoing(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      outgoing() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_outgoing();

  // @@protoc_insertion_point(class_scope:ZMQAtomMessage)
 private:
  inline void set_has_atomtype();
  inline void clear_has_atomtype();
  inline void set_has_attentionvalueholder();
  inline void clear_has_attentionvalueholder();
  inline void set_has_handle();
  inline void clear_has_handle();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_truthvalue();
  inline void clear_has_truthvalue();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ZMQAttentionValueHolderMessage* attentionvalueholder_;
  ::google::protobuf::uint64 handle_;
  int atomtype_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > incoming_;
  ::ZMQTruthValueMessage* truthvalue_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > outgoing_;
  ::google::protobuf::int32 flags_;
  friend void  protobuf_AddDesc_ZMQMessages_2eproto();
  friend void protobuf_AssignDesc_ZMQMessages_2eproto();
  friend void protobuf_ShutdownFile_ZMQMessages_2eproto();

  void InitAsDefaultInstance();
  static ZMQAtomMessage* default_instance_;
};
// -------------------------------------------------------------------

class ZMQAtomFetch : public ::google::protobuf::Message {
 public:
  ZMQAtomFetch();
  virtual ~ZMQAtomFetch();

  ZMQAtomFetch(const ZMQAtomFetch& from);

  inline ZMQAtomFetch& operator=(const ZMQAtomFetch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZMQAtomFetch& default_instance();

  void Swap(ZMQAtomFetch* other);

  // implements Message ----------------------------------------------

  ZMQAtomFetch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZMQAtomFetch& from);
  void MergeFrom(const ZMQAtomFetch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZMQAtomFetchKind kind = 1;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 1;
  inline ::ZMQAtomFetchKind kind() const;
  inline void set_kind(::ZMQAtomFetchKind value);

  // optional uint64 handle = 2;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 2;
  inline ::google::protobuf::uint64 handle() const;
  inline void set_handle(::google::protobuf::uint64 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated uint64 outgoing = 5;
  inline int outgoing_size() const;
  inline void clear_outgoing();
  static const int kOutgoingFieldNumber = 5;
  inline ::google::protobuf::uint64 outgoing(int index) const;
  inline void set_outgoing(int index, ::google::protobuf::uint64 value);
  inline void add_outgoing(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      outgoing() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_outgoing();

  // @@protoc_insertion_point(class_scope:ZMQAtomFetch)
 private:
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_handle();
  inline void clear_has_handle();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 handle_;
  int kind_;
  ::google::protobuf::int32 type_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > outgoing_;
  friend void  protobuf_AddDesc_ZMQMessages_2eproto();
  friend void protobuf_AssignDesc_ZMQMessages_2eproto();
  friend void protobuf_ShutdownFile_ZMQMessages_2eproto();

  void InitAsDefaultInstance();
  static ZMQAtomFetch* default_instance_;
};
// -------------------------------------------------------------------

class ZMQAtomTypeInfo : public ::google::protobuf::Message {
 public:
  ZMQAtomTypeInfo();
  virtual ~ZMQAtomTypeInfo();

  ZMQAtomTypeInfo(const ZMQAtomTypeInfo& from);

  inline ZMQAtomTypeInfo& operator=(const ZMQAtomTypeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZMQAtomTypeInfo& default_instance();

  void Swap(ZMQAtomTypeInfo* other);

  // implements Message ----------------------------------------------

  ZMQAtomTypeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZMQAtomTypeInfo& from);
  void MergeFrom(const ZMQAtomTypeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ZMQAtomTypeInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_ZMQMessages_2eproto();
  friend void protobuf_AssignDesc_ZMQMessages_2eproto();
  friend void protobuf_ShutdownFile_ZMQMessages_2eproto();

  void InitAsDefaultInstance();
  static ZMQAtomTypeInfo* default_instance_;
};
// -------------------------------------------------------------------

class ZMQRequestMessage : public ::google::protobuf::Message {
 public:
  ZMQRequestMessage();
  virtual ~ZMQRequestMessage();

  ZMQRequestMessage(const ZMQRequestMessage& from);

  inline ZMQRequestMessage& operator=(const ZMQRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZMQRequestMessage& default_instance();

  void Swap(ZMQRequestMessage* other);

  // implements Message ----------------------------------------------

  ZMQRequestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZMQRequestMessage& from);
  void MergeFrom(const ZMQRequestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZMQFunctionType function = 1;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 1;
  inline ::ZMQFunctionType function() const;
  inline void set_function(::ZMQFunctionType value);

  // optional uint64 handle = 2;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 2;
  inline ::google::protobuf::uint64 handle() const;
  inline void set_handle(::google::protobuf::uint64 value);

  // repeated .ZMQAtomFetch fetch = 3;
  inline int fetch_size() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 3;
  inline const ::ZMQAtomFetch& fetch(int index) const;
  inline ::ZMQAtomFetch* mutable_fetch(int index);
  inline ::ZMQAtomFetch* add_fetch();
  inline const ::google::protobuf::RepeatedPtrField< ::ZMQAtomFetch >&
      fetch() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZMQAtomFetch >*
      mutable_fetch();

  // repeated .ZMQAtomMessage atom = 4;
  inline int atom_size() const;
  inline void clear_atom();
  static const int kAtomFieldNumber = 4;
  inline const ::ZMQAtomMessage& atom(int index) const;
  inline ::ZMQAtomMessage* mutable_atom(int index);
  inline ::ZMQAtomMessage* add_atom();
  inline const ::google::protobuf::RepeatedPtrField< ::ZMQAtomMessage >&
      atom() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZMQAtomMessage >*
      mutable_atom();

  // repeated .ZMQAtomTypeInfo atom_type = 5;
  inline int atom_type_size() const;
  inline void clear_atom_type();
  static const int kAtomTypeFieldNumber = 5;
  inline const ::ZMQAtomTypeInfo& atom_type(int index) const;
  inline ::ZMQAtomTypeInfo* mutable_atom_type(int index);
  inline ::ZMQAtomTypeInfo* add_atom_type();
  inline const ::google::protobuf::RepeatedPtrField< ::ZMQAtomTypeInfo >&
      atom_type() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZMQAtomTypeInfo >*
      mutable_atom_type();

  // @@protoc_insertion_point(class_scope:ZMQRequestMessage)
 private:
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_handle();
  inline void clear_has_handle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 handle_;
  ::google::protobuf::RepeatedPtrField< ::ZMQAtomFetch > fetch_;
  ::google::protobuf::RepeatedPtrField< ::ZMQAtomMessage > atom_;
  ::google::protobuf::RepeatedPtrField< ::ZMQAtomTypeInfo > atom_type_;
  int function_;
  friend void  protobuf_AddDesc_ZMQMessages_2eproto();
  friend void protobuf_AssignDesc_ZMQMessages_2eproto();
  friend void protobuf_ShutdownFile_ZMQMessages_2eproto();

  void InitAsDefaultInstance();
  static ZMQRequestMessage* default_instance_;
};
// -------------------------------------------------------------------

class ZMQReplyMessage : public ::google::protobuf::Message {
 public:
  ZMQReplyMessage();
  virtual ~ZMQReplyMessage();

  ZMQReplyMessage(const ZMQReplyMessage& from);

  inline ZMQReplyMessage& operator=(const ZMQReplyMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZMQReplyMessage& default_instance();

  void Swap(ZMQReplyMessage* other);

  // implements Message ----------------------------------------------

  ZMQReplyMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZMQReplyMessage& from);
  void MergeFrom(const ZMQReplyMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZMQAtomMessage atom = 1;
  inline int atom_size() const;
  inline void clear_atom();
  static const int kAtomFieldNumber = 1;
  inline const ::ZMQAtomMessage& atom(int index) const;
  inline ::ZMQAtomMessage* mutable_atom(int index);
  inline ::ZMQAtomMessage* add_atom();
  inline const ::google::protobuf::RepeatedPtrField< ::ZMQAtomMessage >&
      atom() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZMQAtomMessage >*
      mutable_atom();

  // optional string str = 2;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // repeated .ZMQAtomTypeInfo atom_type = 3;
  inline int atom_type_size() const;
  inline void clear_atom_type();
  static const int kAtomTypeFieldNumber = 3;
  inline const ::ZMQAtomTypeInfo& atom_type(int index) const;
  inline ::ZMQAtomTypeInfo* mutable_atom_type(int index);
  inline ::ZMQAtomTypeInfo* add_atom_type();
  inline const ::google::protobuf::RepeatedPtrField< ::ZMQAtomTypeInfo >&
      atom_type() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZMQAtomTypeInfo >*
      mutable_atom_type();

  // @@protoc_insertion_point(class_scope:ZMQReplyMessage)
 private:
  inline void set_has_str();
  inline void clear_has_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ZMQAtomMessage > atom_;
  ::std::string* str_;
  ::google::protobuf::RepeatedPtrField< ::ZMQAtomTypeInfo > atom_type_;
  friend void  protobuf_AddDesc_ZMQMessages_2eproto();
  friend void protobuf_AssignDesc_ZMQMessages_2eproto();
  friend void protobuf_ShutdownFile_ZMQMessages_2eproto();

  void InitAsDefaultInstance();
  static ZMQReplyMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ZMQAttentionValueHolderMessage

// required double STI = 1;
inline bool ZMQAttentionValueHolderMessage::has_sti() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZMQAttentionValueHolderMessage::set_has_sti() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZMQAttentionValueHolderMessage::clear_has_sti() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZMQAttentionValueHolderMessage::clear_sti() {
  sti_ = 0;
  clear_has_sti();
}
inline double ZMQAttentionValueHolderMessage::sti() const {
  // @@protoc_insertion_point(field_get:ZMQAttentionValueHolderMessage.STI)
  return sti_;
}
inline void ZMQAttentionValueHolderMessage::set_sti(double value) {
  set_has_sti();
  sti_ = value;
  // @@protoc_insertion_point(field_set:ZMQAttentionValueHolderMessage.STI)
}

// required double LTI = 2;
inline bool ZMQAttentionValueHolderMessage::has_lti() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZMQAttentionValueHolderMessage::set_has_lti() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZMQAttentionValueHolderMessage::clear_has_lti() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZMQAttentionValueHolderMessage::clear_lti() {
  lti_ = 0;
  clear_has_lti();
}
inline double ZMQAttentionValueHolderMessage::lti() const {
  // @@protoc_insertion_point(field_get:ZMQAttentionValueHolderMessage.LTI)
  return lti_;
}
inline void ZMQAttentionValueHolderMessage::set_lti(double value) {
  set_has_lti();
  lti_ = value;
  // @@protoc_insertion_point(field_set:ZMQAttentionValueHolderMessage.LTI)
}

// required double VLTI = 3;
inline bool ZMQAttentionValueHolderMessage::has_vlti() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZMQAttentionValueHolderMessage::set_has_vlti() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZMQAttentionValueHolderMessage::clear_has_vlti() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZMQAttentionValueHolderMessage::clear_vlti() {
  vlti_ = 0;
  clear_has_vlti();
}
inline double ZMQAttentionValueHolderMessage::vlti() const {
  // @@protoc_insertion_point(field_get:ZMQAttentionValueHolderMessage.VLTI)
  return vlti_;
}
inline void ZMQAttentionValueHolderMessage::set_vlti(double value) {
  set_has_vlti();
  vlti_ = value;
  // @@protoc_insertion_point(field_set:ZMQAttentionValueHolderMessage.VLTI)
}

// -------------------------------------------------------------------

// ZMQSingleTruthValueMessage

// required .ZMQTruthValueType truthvaluetype = 1;
inline bool ZMQSingleTruthValueMessage::has_truthvaluetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZMQSingleTruthValueMessage::set_has_truthvaluetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZMQSingleTruthValueMessage::clear_has_truthvaluetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZMQSingleTruthValueMessage::clear_truthvaluetype() {
  truthvaluetype_ = 0;
  clear_has_truthvaluetype();
}
inline ::ZMQTruthValueType ZMQSingleTruthValueMessage::truthvaluetype() const {
  // @@protoc_insertion_point(field_get:ZMQSingleTruthValueMessage.truthvaluetype)
  return static_cast< ::ZMQTruthValueType >(truthvaluetype_);
}
inline void ZMQSingleTruthValueMessage::set_truthvaluetype(::ZMQTruthValueType value) {
  assert(::ZMQTruthValueType_IsValid(value));
  set_has_truthvaluetype();
  truthvaluetype_ = value;
  // @@protoc_insertion_point(field_set:ZMQSingleTruthValueMessage.truthvaluetype)
}

// optional float mean = 2;
inline bool ZMQSingleTruthValueMessage::has_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZMQSingleTruthValueMessage::set_has_mean() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZMQSingleTruthValueMessage::clear_has_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZMQSingleTruthValueMessage::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float ZMQSingleTruthValueMessage::mean() const {
  // @@protoc_insertion_point(field_get:ZMQSingleTruthValueMessage.mean)
  return mean_;
}
inline void ZMQSingleTruthValueMessage::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:ZMQSingleTruthValueMessage.mean)
}

// optional float confidence = 3;
inline bool ZMQSingleTruthValueMessage::has_confidence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZMQSingleTruthValueMessage::set_has_confidence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZMQSingleTruthValueMessage::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZMQSingleTruthValueMessage::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float ZMQSingleTruthValueMessage::confidence() const {
  // @@protoc_insertion_point(field_get:ZMQSingleTruthValueMessage.confidence)
  return confidence_;
}
inline void ZMQSingleTruthValueMessage::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:ZMQSingleTruthValueMessage.confidence)
}

// optional float count = 4;
inline bool ZMQSingleTruthValueMessage::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZMQSingleTruthValueMessage::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZMQSingleTruthValueMessage::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZMQSingleTruthValueMessage::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline float ZMQSingleTruthValueMessage::count() const {
  // @@protoc_insertion_point(field_get:ZMQSingleTruthValueMessage.count)
  return count_;
}
inline void ZMQSingleTruthValueMessage::set_count(float value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ZMQSingleTruthValueMessage.count)
}

// optional float U = 6;
inline bool ZMQSingleTruthValueMessage::has_u() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZMQSingleTruthValueMessage::set_has_u() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZMQSingleTruthValueMessage::clear_has_u() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZMQSingleTruthValueMessage::clear_u() {
  u_ = 0;
  clear_has_u();
}
inline float ZMQSingleTruthValueMessage::u() const {
  // @@protoc_insertion_point(field_get:ZMQSingleTruthValueMessage.U)
  return u_;
}
inline void ZMQSingleTruthValueMessage::set_u(float value) {
  set_has_u();
  u_ = value;
  // @@protoc_insertion_point(field_set:ZMQSingleTruthValueMessage.U)
}

// optional float L = 7;
inline bool ZMQSingleTruthValueMessage::has_l() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ZMQSingleTruthValueMessage::set_has_l() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ZMQSingleTruthValueMessage::clear_has_l() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ZMQSingleTruthValueMessage::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline float ZMQSingleTruthValueMessage::l() const {
  // @@protoc_insertion_point(field_get:ZMQSingleTruthValueMessage.L)
  return l_;
}
inline void ZMQSingleTruthValueMessage::set_l(float value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:ZMQSingleTruthValueMessage.L)
}

// optional float confidenceLevel = 8;
inline bool ZMQSingleTruthValueMessage::has_confidencelevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ZMQSingleTruthValueMessage::set_has_confidencelevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ZMQSingleTruthValueMessage::clear_has_confidencelevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ZMQSingleTruthValueMessage::clear_confidencelevel() {
  confidencelevel_ = 0;
  clear_has_confidencelevel();
}
inline float ZMQSingleTruthValueMessage::confidencelevel() const {
  // @@protoc_insertion_point(field_get:ZMQSingleTruthValueMessage.confidenceLevel)
  return confidencelevel_;
}
inline void ZMQSingleTruthValueMessage::set_confidencelevel(float value) {
  set_has_confidencelevel();
  confidencelevel_ = value;
  // @@protoc_insertion_point(field_set:ZMQSingleTruthValueMessage.confidenceLevel)
}

// optional int32 symmetric = 9;
inline bool ZMQSingleTruthValueMessage::has_symmetric() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ZMQSingleTruthValueMessage::set_has_symmetric() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ZMQSingleTruthValueMessage::clear_has_symmetric() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ZMQSingleTruthValueMessage::clear_symmetric() {
  symmetric_ = 0;
  clear_has_symmetric();
}
inline ::google::protobuf::int32 ZMQSingleTruthValueMessage::symmetric() const {
  // @@protoc_insertion_point(field_get:ZMQSingleTruthValueMessage.symmetric)
  return symmetric_;
}
inline void ZMQSingleTruthValueMessage::set_symmetric(::google::protobuf::int32 value) {
  set_has_symmetric();
  symmetric_ = value;
  // @@protoc_insertion_point(field_set:ZMQSingleTruthValueMessage.symmetric)
}

// optional float diff = 10;
inline bool ZMQSingleTruthValueMessage::has_diff() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ZMQSingleTruthValueMessage::set_has_diff() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ZMQSingleTruthValueMessage::clear_has_diff() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ZMQSingleTruthValueMessage::clear_diff() {
  diff_ = 0;
  clear_has_diff();
}
inline float ZMQSingleTruthValueMessage::diff() const {
  // @@protoc_insertion_point(field_get:ZMQSingleTruthValueMessage.diff)
  return diff_;
}
inline void ZMQSingleTruthValueMessage::set_diff(float value) {
  set_has_diff();
  diff_ = value;
  // @@protoc_insertion_point(field_set:ZMQSingleTruthValueMessage.diff)
}

// repeated float firstOrderDistribution = 11;
inline int ZMQSingleTruthValueMessage::firstorderdistribution_size() const {
  return firstorderdistribution_.size();
}
inline void ZMQSingleTruthValueMessage::clear_firstorderdistribution() {
  firstorderdistribution_.Clear();
}
inline float ZMQSingleTruthValueMessage::firstorderdistribution(int index) const {
  // @@protoc_insertion_point(field_get:ZMQSingleTruthValueMessage.firstOrderDistribution)
  return firstorderdistribution_.Get(index);
}
inline void ZMQSingleTruthValueMessage::set_firstorderdistribution(int index, float value) {
  firstorderdistribution_.Set(index, value);
  // @@protoc_insertion_point(field_set:ZMQSingleTruthValueMessage.firstOrderDistribution)
}
inline void ZMQSingleTruthValueMessage::add_firstorderdistribution(float value) {
  firstorderdistribution_.Add(value);
  // @@protoc_insertion_point(field_add:ZMQSingleTruthValueMessage.firstOrderDistribution)
}
inline const ::google::protobuf::RepeatedField< float >&
ZMQSingleTruthValueMessage::firstorderdistribution() const {
  // @@protoc_insertion_point(field_list:ZMQSingleTruthValueMessage.firstOrderDistribution)
  return firstorderdistribution_;
}
inline ::google::protobuf::RepeatedField< float >*
ZMQSingleTruthValueMessage::mutable_firstorderdistribution() {
  // @@protoc_insertion_point(field_mutable_list:ZMQSingleTruthValueMessage.firstOrderDistribution)
  return &firstorderdistribution_;
}

// -------------------------------------------------------------------

// ZMQTruthValueMessage

// repeated .ZMQSingleTruthValueMessage singleTruthValue = 1;
inline int ZMQTruthValueMessage::singletruthvalue_size() const {
  return singletruthvalue_.size();
}
inline void ZMQTruthValueMessage::clear_singletruthvalue() {
  singletruthvalue_.Clear();
}
inline const ::ZMQSingleTruthValueMessage& ZMQTruthValueMessage::singletruthvalue(int index) const {
  // @@protoc_insertion_point(field_get:ZMQTruthValueMessage.singleTruthValue)
  return singletruthvalue_.Get(index);
}
inline ::ZMQSingleTruthValueMessage* ZMQTruthValueMessage::mutable_singletruthvalue(int index) {
  // @@protoc_insertion_point(field_mutable:ZMQTruthValueMessage.singleTruthValue)
  return singletruthvalue_.Mutable(index);
}
inline ::ZMQSingleTruthValueMessage* ZMQTruthValueMessage::add_singletruthvalue() {
  // @@protoc_insertion_point(field_add:ZMQTruthValueMessage.singleTruthValue)
  return singletruthvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZMQSingleTruthValueMessage >&
ZMQTruthValueMessage::singletruthvalue() const {
  // @@protoc_insertion_point(field_list:ZMQTruthValueMessage.singleTruthValue)
  return singletruthvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZMQSingleTruthValueMessage >*
ZMQTruthValueMessage::mutable_singletruthvalue() {
  // @@protoc_insertion_point(field_mutable_list:ZMQTruthValueMessage.singleTruthValue)
  return &singletruthvalue_;
}

// -------------------------------------------------------------------

// ZMQAtomMessage

// required .ZMQAtomType atomtype = 1;
inline bool ZMQAtomMessage::has_atomtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZMQAtomMessage::set_has_atomtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZMQAtomMessage::clear_has_atomtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZMQAtomMessage::clear_atomtype() {
  atomtype_ = 0;
  clear_has_atomtype();
}
inline ::ZMQAtomType ZMQAtomMessage::atomtype() const {
  // @@protoc_insertion_point(field_get:ZMQAtomMessage.atomtype)
  return static_cast< ::ZMQAtomType >(atomtype_);
}
inline void ZMQAtomMessage::set_atomtype(::ZMQAtomType value) {
  assert(::ZMQAtomType_IsValid(value));
  set_has_atomtype();
  atomtype_ = value;
  // @@protoc_insertion_point(field_set:ZMQAtomMessage.atomtype)
}

// optional .ZMQAttentionValueHolderMessage attentionvalueholder = 2;
inline bool ZMQAtomMessage::has_attentionvalueholder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZMQAtomMessage::set_has_attentionvalueholder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZMQAtomMessage::clear_has_attentionvalueholder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZMQAtomMessage::clear_attentionvalueholder() {
  if (attentionvalueholder_ != NULL) attentionvalueholder_->::ZMQAttentionValueHolderMessage::Clear();
  clear_has_attentionvalueholder();
}
inline const ::ZMQAttentionValueHolderMessage& ZMQAtomMessage::attentionvalueholder() const {
  // @@protoc_insertion_point(field_get:ZMQAtomMessage.attentionvalueholder)
  return attentionvalueholder_ != NULL ? *attentionvalueholder_ : *default_instance_->attentionvalueholder_;
}
inline ::ZMQAttentionValueHolderMessage* ZMQAtomMessage::mutable_attentionvalueholder() {
  set_has_attentionvalueholder();
  if (attentionvalueholder_ == NULL) attentionvalueholder_ = new ::ZMQAttentionValueHolderMessage;
  // @@protoc_insertion_point(field_mutable:ZMQAtomMessage.attentionvalueholder)
  return attentionvalueholder_;
}
inline ::ZMQAttentionValueHolderMessage* ZMQAtomMessage::release_attentionvalueholder() {
  clear_has_attentionvalueholder();
  ::ZMQAttentionValueHolderMessage* temp = attentionvalueholder_;
  attentionvalueholder_ = NULL;
  return temp;
}
inline void ZMQAtomMessage::set_allocated_attentionvalueholder(::ZMQAttentionValueHolderMessage* attentionvalueholder) {
  delete attentionvalueholder_;
  attentionvalueholder_ = attentionvalueholder;
  if (attentionvalueholder) {
    set_has_attentionvalueholder();
  } else {
    clear_has_attentionvalueholder();
  }
  // @@protoc_insertion_point(field_set_allocated:ZMQAtomMessage.attentionvalueholder)
}

// optional uint64 handle = 3;
inline bool ZMQAtomMessage::has_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZMQAtomMessage::set_has_handle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZMQAtomMessage::clear_has_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZMQAtomMessage::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
  clear_has_handle();
}
inline ::google::protobuf::uint64 ZMQAtomMessage::handle() const {
  // @@protoc_insertion_point(field_get:ZMQAtomMessage.handle)
  return handle_;
}
inline void ZMQAtomMessage::set_handle(::google::protobuf::uint64 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:ZMQAtomMessage.handle)
}

// repeated uint64 incoming = 4;
inline int ZMQAtomMessage::incoming_size() const {
  return incoming_.size();
}
inline void ZMQAtomMessage::clear_incoming() {
  incoming_.Clear();
}
inline ::google::protobuf::uint64 ZMQAtomMessage::incoming(int index) const {
  // @@protoc_insertion_point(field_get:ZMQAtomMessage.incoming)
  return incoming_.Get(index);
}
inline void ZMQAtomMessage::set_incoming(int index, ::google::protobuf::uint64 value) {
  incoming_.Set(index, value);
  // @@protoc_insertion_point(field_set:ZMQAtomMessage.incoming)
}
inline void ZMQAtomMessage::add_incoming(::google::protobuf::uint64 value) {
  incoming_.Add(value);
  // @@protoc_insertion_point(field_add:ZMQAtomMessage.incoming)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ZMQAtomMessage::incoming() const {
  // @@protoc_insertion_point(field_list:ZMQAtomMessage.incoming)
  return incoming_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ZMQAtomMessage::mutable_incoming() {
  // @@protoc_insertion_point(field_mutable_list:ZMQAtomMessage.incoming)
  return &incoming_;
}

// optional int32 type = 5;
inline bool ZMQAtomMessage::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZMQAtomMessage::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZMQAtomMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZMQAtomMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ZMQAtomMessage::type() const {
  // @@protoc_insertion_point(field_get:ZMQAtomMessage.type)
  return type_;
}
inline void ZMQAtomMessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ZMQAtomMessage.type)
}

// optional int32 flags = 6;
inline bool ZMQAtomMessage::has_flags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ZMQAtomMessage::set_has_flags() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ZMQAtomMessage::clear_has_flags() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ZMQAtomMessage::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
inline ::google::protobuf::int32 ZMQAtomMessage::flags() const {
  // @@protoc_insertion_point(field_get:ZMQAtomMessage.flags)
  return flags_;
}
inline void ZMQAtomMessage::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:ZMQAtomMessage.flags)
}

// optional .ZMQTruthValueMessage truthValue = 7;
inline bool ZMQAtomMessage::has_truthvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ZMQAtomMessage::set_has_truthvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ZMQAtomMessage::clear_has_truthvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ZMQAtomMessage::clear_truthvalue() {
  if (truthvalue_ != NULL) truthvalue_->::ZMQTruthValueMessage::Clear();
  clear_has_truthvalue();
}
inline const ::ZMQTruthValueMessage& ZMQAtomMessage::truthvalue() const {
  // @@protoc_insertion_point(field_get:ZMQAtomMessage.truthValue)
  return truthvalue_ != NULL ? *truthvalue_ : *default_instance_->truthvalue_;
}
inline ::ZMQTruthValueMessage* ZMQAtomMessage::mutable_truthvalue() {
  set_has_truthvalue();
  if (truthvalue_ == NULL) truthvalue_ = new ::ZMQTruthValueMessage;
  // @@protoc_insertion_point(field_mutable:ZMQAtomMessage.truthValue)
  return truthvalue_;
}
inline ::ZMQTruthValueMessage* ZMQAtomMessage::release_truthvalue() {
  clear_has_truthvalue();
  ::ZMQTruthValueMessage* temp = truthvalue_;
  truthvalue_ = NULL;
  return temp;
}
inline void ZMQAtomMessage::set_allocated_truthvalue(::ZMQTruthValueMessage* truthvalue) {
  delete truthvalue_;
  truthvalue_ = truthvalue;
  if (truthvalue) {
    set_has_truthvalue();
  } else {
    clear_has_truthvalue();
  }
  // @@protoc_insertion_point(field_set_allocated:ZMQAtomMessage.truthValue)
}

// optional string name = 8;
inline bool ZMQAtomMessage::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ZMQAtomMessage::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ZMQAtomMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ZMQAtomMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ZMQAtomMessage::name() const {
  // @@protoc_insertion_point(field_get:ZMQAtomMessage.name)
  return *name_;
}
inline void ZMQAtomMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ZMQAtomMessage.name)
}
inline void ZMQAtomMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ZMQAtomMessage.name)
}
inline void ZMQAtomMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ZMQAtomMessage.name)
}
inline ::std::string* ZMQAtomMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ZMQAtomMessage.name)
  return name_;
}
inline ::std::string* ZMQAtomMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ZMQAtomMessage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ZMQAtomMessage.name)
}

// repeated uint64 outgoing = 9;
inline int ZMQAtomMessage::outgoing_size() const {
  return outgoing_.size();
}
inline void ZMQAtomMessage::clear_outgoing() {
  outgoing_.Clear();
}
inline ::google::protobuf::uint64 ZMQAtomMessage::outgoing(int index) const {
  // @@protoc_insertion_point(field_get:ZMQAtomMessage.outgoing)
  return outgoing_.Get(index);
}
inline void ZMQAtomMessage::set_outgoing(int index, ::google::protobuf::uint64 value) {
  outgoing_.Set(index, value);
  // @@protoc_insertion_point(field_set:ZMQAtomMessage.outgoing)
}
inline void ZMQAtomMessage::add_outgoing(::google::protobuf::uint64 value) {
  outgoing_.Add(value);
  // @@protoc_insertion_point(field_add:ZMQAtomMessage.outgoing)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ZMQAtomMessage::outgoing() const {
  // @@protoc_insertion_point(field_list:ZMQAtomMessage.outgoing)
  return outgoing_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ZMQAtomMessage::mutable_outgoing() {
  // @@protoc_insertion_point(field_mutable_list:ZMQAtomMessage.outgoing)
  return &outgoing_;
}

// -------------------------------------------------------------------

// ZMQAtomFetch

// required .ZMQAtomFetchKind kind = 1;
inline bool ZMQAtomFetch::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZMQAtomFetch::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZMQAtomFetch::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZMQAtomFetch::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::ZMQAtomFetchKind ZMQAtomFetch::kind() const {
  // @@protoc_insertion_point(field_get:ZMQAtomFetch.kind)
  return static_cast< ::ZMQAtomFetchKind >(kind_);
}
inline void ZMQAtomFetch::set_kind(::ZMQAtomFetchKind value) {
  assert(::ZMQAtomFetchKind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:ZMQAtomFetch.kind)
}

// optional uint64 handle = 2;
inline bool ZMQAtomFetch::has_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZMQAtomFetch::set_has_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZMQAtomFetch::clear_has_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZMQAtomFetch::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
  clear_has_handle();
}
inline ::google::protobuf::uint64 ZMQAtomFetch::handle() const {
  // @@protoc_insertion_point(field_get:ZMQAtomFetch.handle)
  return handle_;
}
inline void ZMQAtomFetch::set_handle(::google::protobuf::uint64 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:ZMQAtomFetch.handle)
}

// optional int32 type = 3;
inline bool ZMQAtomFetch::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZMQAtomFetch::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZMQAtomFetch::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZMQAtomFetch::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ZMQAtomFetch::type() const {
  // @@protoc_insertion_point(field_get:ZMQAtomFetch.type)
  return type_;
}
inline void ZMQAtomFetch::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ZMQAtomFetch.type)
}

// optional string name = 4;
inline bool ZMQAtomFetch::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZMQAtomFetch::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZMQAtomFetch::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZMQAtomFetch::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ZMQAtomFetch::name() const {
  // @@protoc_insertion_point(field_get:ZMQAtomFetch.name)
  return *name_;
}
inline void ZMQAtomFetch::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ZMQAtomFetch.name)
}
inline void ZMQAtomFetch::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ZMQAtomFetch.name)
}
inline void ZMQAtomFetch::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ZMQAtomFetch.name)
}
inline ::std::string* ZMQAtomFetch::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ZMQAtomFetch.name)
  return name_;
}
inline ::std::string* ZMQAtomFetch::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ZMQAtomFetch::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ZMQAtomFetch.name)
}

// repeated uint64 outgoing = 5;
inline int ZMQAtomFetch::outgoing_size() const {
  return outgoing_.size();
}
inline void ZMQAtomFetch::clear_outgoing() {
  outgoing_.Clear();
}
inline ::google::protobuf::uint64 ZMQAtomFetch::outgoing(int index) const {
  // @@protoc_insertion_point(field_get:ZMQAtomFetch.outgoing)
  return outgoing_.Get(index);
}
inline void ZMQAtomFetch::set_outgoing(int index, ::google::protobuf::uint64 value) {
  outgoing_.Set(index, value);
  // @@protoc_insertion_point(field_set:ZMQAtomFetch.outgoing)
}
inline void ZMQAtomFetch::add_outgoing(::google::protobuf::uint64 value) {
  outgoing_.Add(value);
  // @@protoc_insertion_point(field_add:ZMQAtomFetch.outgoing)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ZMQAtomFetch::outgoing() const {
  // @@protoc_insertion_point(field_list:ZMQAtomFetch.outgoing)
  return outgoing_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ZMQAtomFetch::mutable_outgoing() {
  // @@protoc_insertion_point(field_mutable_list:ZMQAtomFetch.outgoing)
  return &outgoing_;
}

// -------------------------------------------------------------------

// ZMQAtomTypeInfo

// optional int32 id = 1;
inline bool ZMQAtomTypeInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZMQAtomTypeInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZMQAtomTypeInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZMQAtomTypeInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ZMQAtomTypeInfo::id() const {
  // @@protoc_insertion_point(field_get:ZMQAtomTypeInfo.id)
  return id_;
}
inline void ZMQAtomTypeInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ZMQAtomTypeInfo.id)
}

// optional string name = 2;
inline bool ZMQAtomTypeInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZMQAtomTypeInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZMQAtomTypeInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZMQAtomTypeInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ZMQAtomTypeInfo::name() const {
  // @@protoc_insertion_point(field_get:ZMQAtomTypeInfo.name)
  return *name_;
}
inline void ZMQAtomTypeInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ZMQAtomTypeInfo.name)
}
inline void ZMQAtomTypeInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ZMQAtomTypeInfo.name)
}
inline void ZMQAtomTypeInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ZMQAtomTypeInfo.name)
}
inline ::std::string* ZMQAtomTypeInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ZMQAtomTypeInfo.name)
  return name_;
}
inline ::std::string* ZMQAtomTypeInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ZMQAtomTypeInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ZMQAtomTypeInfo.name)
}

// -------------------------------------------------------------------

// ZMQRequestMessage

// required .ZMQFunctionType function = 1;
inline bool ZMQRequestMessage::has_function() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZMQRequestMessage::set_has_function() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZMQRequestMessage::clear_has_function() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZMQRequestMessage::clear_function() {
  function_ = 0;
  clear_has_function();
}
inline ::ZMQFunctionType ZMQRequestMessage::function() const {
  // @@protoc_insertion_point(field_get:ZMQRequestMessage.function)
  return static_cast< ::ZMQFunctionType >(function_);
}
inline void ZMQRequestMessage::set_function(::ZMQFunctionType value) {
  assert(::ZMQFunctionType_IsValid(value));
  set_has_function();
  function_ = value;
  // @@protoc_insertion_point(field_set:ZMQRequestMessage.function)
}

// optional uint64 handle = 2;
inline bool ZMQRequestMessage::has_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZMQRequestMessage::set_has_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZMQRequestMessage::clear_has_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZMQRequestMessage::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
  clear_has_handle();
}
inline ::google::protobuf::uint64 ZMQRequestMessage::handle() const {
  // @@protoc_insertion_point(field_get:ZMQRequestMessage.handle)
  return handle_;
}
inline void ZMQRequestMessage::set_handle(::google::protobuf::uint64 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:ZMQRequestMessage.handle)
}

// repeated .ZMQAtomFetch fetch = 3;
inline int ZMQRequestMessage::fetch_size() const {
  return fetch_.size();
}
inline void ZMQRequestMessage::clear_fetch() {
  fetch_.Clear();
}
inline const ::ZMQAtomFetch& ZMQRequestMessage::fetch(int index) const {
  // @@protoc_insertion_point(field_get:ZMQRequestMessage.fetch)
  return fetch_.Get(index);
}
inline ::ZMQAtomFetch* ZMQRequestMessage::mutable_fetch(int index) {
  // @@protoc_insertion_point(field_mutable:ZMQRequestMessage.fetch)
  return fetch_.Mutable(index);
}
inline ::ZMQAtomFetch* ZMQRequestMessage::add_fetch() {
  // @@protoc_insertion_point(field_add:ZMQRequestMessage.fetch)
  return fetch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZMQAtomFetch >&
ZMQRequestMessage::fetch() const {
  // @@protoc_insertion_point(field_list:ZMQRequestMessage.fetch)
  return fetch_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZMQAtomFetch >*
ZMQRequestMessage::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable_list:ZMQRequestMessage.fetch)
  return &fetch_;
}

// repeated .ZMQAtomMessage atom = 4;
inline int ZMQRequestMessage::atom_size() const {
  return atom_.size();
}
inline void ZMQRequestMessage::clear_atom() {
  atom_.Clear();
}
inline const ::ZMQAtomMessage& ZMQRequestMessage::atom(int index) const {
  // @@protoc_insertion_point(field_get:ZMQRequestMessage.atom)
  return atom_.Get(index);
}
inline ::ZMQAtomMessage* ZMQRequestMessage::mutable_atom(int index) {
  // @@protoc_insertion_point(field_mutable:ZMQRequestMessage.atom)
  return atom_.Mutable(index);
}
inline ::ZMQAtomMessage* ZMQRequestMessage::add_atom() {
  // @@protoc_insertion_point(field_add:ZMQRequestMessage.atom)
  return atom_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZMQAtomMessage >&
ZMQRequestMessage::atom() const {
  // @@protoc_insertion_point(field_list:ZMQRequestMessage.atom)
  return atom_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZMQAtomMessage >*
ZMQRequestMessage::mutable_atom() {
  // @@protoc_insertion_point(field_mutable_list:ZMQRequestMessage.atom)
  return &atom_;
}

// repeated .ZMQAtomTypeInfo atom_type = 5;
inline int ZMQRequestMessage::atom_type_size() const {
  return atom_type_.size();
}
inline void ZMQRequestMessage::clear_atom_type() {
  atom_type_.Clear();
}
inline const ::ZMQAtomTypeInfo& ZMQRequestMessage::atom_type(int index) const {
  // @@protoc_insertion_point(field_get:ZMQRequestMessage.atom_type)
  return atom_type_.Get(index);
}
inline ::ZMQAtomTypeInfo* ZMQRequestMessage::mutable_atom_type(int index) {
  // @@protoc_insertion_point(field_mutable:ZMQRequestMessage.atom_type)
  return atom_type_.Mutable(index);
}
inline ::ZMQAtomTypeInfo* ZMQRequestMessage::add_atom_type() {
  // @@protoc_insertion_point(field_add:ZMQRequestMessage.atom_type)
  return atom_type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZMQAtomTypeInfo >&
ZMQRequestMessage::atom_type() const {
  // @@protoc_insertion_point(field_list:ZMQRequestMessage.atom_type)
  return atom_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZMQAtomTypeInfo >*
ZMQRequestMessage::mutable_atom_type() {
  // @@protoc_insertion_point(field_mutable_list:ZMQRequestMessage.atom_type)
  return &atom_type_;
}

// -------------------------------------------------------------------

// ZMQReplyMessage

// repeated .ZMQAtomMessage atom = 1;
inline int ZMQReplyMessage::atom_size() const {
  return atom_.size();
}
inline void ZMQReplyMessage::clear_atom() {
  atom_.Clear();
}
inline const ::ZMQAtomMessage& ZMQReplyMessage::atom(int index) const {
  // @@protoc_insertion_point(field_get:ZMQReplyMessage.atom)
  return atom_.Get(index);
}
inline ::ZMQAtomMessage* ZMQReplyMessage::mutable_atom(int index) {
  // @@protoc_insertion_point(field_mutable:ZMQReplyMessage.atom)
  return atom_.Mutable(index);
}
inline ::ZMQAtomMessage* ZMQReplyMessage::add_atom() {
  // @@protoc_insertion_point(field_add:ZMQReplyMessage.atom)
  return atom_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZMQAtomMessage >&
ZMQReplyMessage::atom() const {
  // @@protoc_insertion_point(field_list:ZMQReplyMessage.atom)
  return atom_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZMQAtomMessage >*
ZMQReplyMessage::mutable_atom() {
  // @@protoc_insertion_point(field_mutable_list:ZMQReplyMessage.atom)
  return &atom_;
}

// optional string str = 2;
inline bool ZMQReplyMessage::has_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZMQReplyMessage::set_has_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZMQReplyMessage::clear_has_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZMQReplyMessage::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& ZMQReplyMessage::str() const {
  // @@protoc_insertion_point(field_get:ZMQReplyMessage.str)
  return *str_;
}
inline void ZMQReplyMessage::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:ZMQReplyMessage.str)
}
inline void ZMQReplyMessage::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:ZMQReplyMessage.str)
}
inline void ZMQReplyMessage::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ZMQReplyMessage.str)
}
inline ::std::string* ZMQReplyMessage::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ZMQReplyMessage.str)
  return str_;
}
inline ::std::string* ZMQReplyMessage::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ZMQReplyMessage::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ZMQReplyMessage.str)
}

// repeated .ZMQAtomTypeInfo atom_type = 3;
inline int ZMQReplyMessage::atom_type_size() const {
  return atom_type_.size();
}
inline void ZMQReplyMessage::clear_atom_type() {
  atom_type_.Clear();
}
inline const ::ZMQAtomTypeInfo& ZMQReplyMessage::atom_type(int index) const {
  // @@protoc_insertion_point(field_get:ZMQReplyMessage.atom_type)
  return atom_type_.Get(index);
}
inline ::ZMQAtomTypeInfo* ZMQReplyMessage::mutable_atom_type(int index) {
  // @@protoc_insertion_point(field_mutable:ZMQReplyMessage.atom_type)
  return atom_type_.Mutable(index);
}
inline ::ZMQAtomTypeInfo* ZMQReplyMessage::add_atom_type() {
  // @@protoc_insertion_point(field_add:ZMQReplyMessage.atom_type)
  return atom_type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZMQAtomTypeInfo >&
ZMQReplyMessage::atom_type() const {
  // @@protoc_insertion_point(field_list:ZMQReplyMessage.atom_type)
  return atom_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZMQAtomTypeInfo >*
ZMQReplyMessage::mutable_atom_type() {
  // @@protoc_insertion_point(field_mutable_list:ZMQReplyMessage.atom_type)
  return &atom_type_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ZMQTruthValueType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZMQTruthValueType>() {
  return ::ZMQTruthValueType_descriptor();
}
template <> struct is_proto_enum< ::ZMQAtomType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZMQAtomType>() {
  return ::ZMQAtomType_descriptor();
}
template <> struct is_proto_enum< ::ZMQAtomFetchKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZMQAtomFetchKind>() {
  return ::ZMQAtomFetchKind_descriptor();
}
template <> struct is_proto_enum< ::ZMQFunctionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZMQFunctionType>() {
  return ::ZMQFunctionType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ZMQMessages_2eproto__INCLUDED
